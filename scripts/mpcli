#!/usr/bin/env python3
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
##
# mPlane Protocol Reference Implementation
# Simple client command-line interface
#
# (c) 2013-2014 mPlane Consortium (http://www.ict-mplane.eu)
#               Author: Brian Trammell <brian@trammell.ch>
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version. This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
# General Public License for more details. You should have received a copy
# of the GNU General Public License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

import argparse
import configparser

import mplane.model
import mplane.client
import mplane.utils
import mplane.tls
import mplane.ui.clishell


if __name__ == "__main__":

    # FIXME HACK
    # some urllib3 versions let you disable warnings about untrusted CAs,
    # which we use a lot in the project demo. Try to disable warnings if
    # we can.
    try:
        urllib3.disable_warnings()
    except:
        pass


    # look for TLS configuration
    parser = argparse.ArgumentParser(description="mPlane generic testing client")
    parser.add_argument('--config', metavar="config-file",
                        help="Configuration file")
    args = parser.parse_args()

    # Read the configuration file, if given
    if args.config:
        config = configparser.ConfigParser()
        config.optionxform = str
        config.read(mplane.utils.search_path(args.config))
    else:
        # hack a default configuration together
        config = {}
        config["is_default"] = True
        config["client"] = {}
        config["client"]["workflow"] = "client-initiated"

        # preload any registries necessary
    if "client" in config:

        if "registry_preload" in config["client"]:
            mplane.model.preload_registry(
                config["client"]["registry_preload"])

        if "registry_uri" in config["client"]:
            registry_uri = config["client"]["registry_uri"]
        else:
            registry_uri = None
    else:
        registry_uri = None

    # load default registry
    mplane.model.initialize_registry(registry_uri)

    tls_state = mplane.tls.TlsState(config)

    # default workflow is client-initiated
    # FIXME this should be boolean instead
    workflow = "client-initiated"

    if "client" in config:
        if "workflow" in config["client"]:
            workflow = config["client"]["workflow"]

    if workflow == "component-initiated":
        client = mplane.client.HttpListenerClient(config=config,
                                                        tls_state=tls_state)
    elif workflow == "client-initiated":
        client = mplane.client.HttpInitiatorClient(config=config,
                                                         tls_state=tls_state)
    else:
        raise ValueError("workflow setting in " + args.CONF +
                             " can only be 'client-initiated' or 'component-initiated'")


    # create a shell
    cs = mplane.ui.clishell.ClientShell(config, client)

    while not cs.exited:
        try:
            cs.cmdloop()
        except Exception as e:
            cs.handle_uncaught(e)
