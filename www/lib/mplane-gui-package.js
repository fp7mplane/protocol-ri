/**
 * @author Be?ta Pletscher
 * @docauthor Be?ta Pletscher
 */

/*
 * This file is the Entry Point for the implementation of this ExtJS package.
 * 
 * NOTE: Please DO NOT edit this file unless you know what you are exactly
 * doing.
 */

// BEGIN: Package definition
(function(){
	{
		var pkg =
		{
		  name : 'mplane-gui',
		  namespace : 'NV.mplane.gui',
		  path : 'mplane-gui',
		  date : new Date('2015','01','12','16','28','01'), // 2015/01/12 16:28:01
		  version : new Ext.Version('1.0.0.2'),
		  description : ''
		};
	
		// Register Package
	
		Ext.namespace( 'NV' );
		var packages = NV.$Packages || (NV.$Packages = {});
		packages[pkg.name] = pkg;
	
		Ext.Loader.setPath( pkg.namespace, 'lib/' + pkg.path );
	}
})();
// END: Package definition
// @tag mplane-gui
Ext.define('NV.mplane.gui.Constants',{
	singleton:true,
	capabilityMenu:{
            'capabilities':{
            	label:'Capabilities',
            	type:'capability',
            	icon:'list.png'
            },
            'pending':{
            	label:'Pending measurements',
            	type:'pending',
            	icon:'run.png'
            },
            'results':{
            	label:'Results',
            	type:'results',
            	icon:'results.png'
            },
            'ondeamand':{
            	label:'On-Demand Chart View',
            	type:'ondemand',
            	icon:'dashboard.png'
            },
	},
	dashboardMenu:{
       
},
	
	urls:{
		capabilityList: "/gui/list/capabilities",
		registry: "registry.json",
		gridUrl: 'resource/mplane-gui/json/capabilityGridDefinition.json',
		runUrl: '/gui/run/capability',
		runningList:"/gui/list/pendings",
		resultList:"/gui/list/results",
		resultDetails: "/gui/get/result",
		
		guiSettings : "/gui/settings"
	},
	
	testUrls:{
		capabilityList: "test/json/capabilities.json",
		registry: "test/json/registry.json",
		gridUrl: 'resource/mplane-gui/json/capabilityGridDefinition.json',
		runUrl: 'resource/mplane-gui/json/capabilityGridDefinition.json',
		runningList:"test/json/capabilities.json",
		resultList:"test/json/listresult.json",
		resultDetails: "test/json/getresults.json",
		
		guiSettings : "test/json/guisettings.json"
	},
	
	readRegistry: function(callback, obj, args){
		Ext.Ajax.request({
				url : NV.mplane.gui.Main.urls.registry,
				success : function(response) {
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if (!json) {
						return;
					}	
					this.parameterDescriptors = json.elements;
					this.parameterMap = {};			
					for(var i=0; i<this.parameterDescriptors.length; i++){
						this.parameterMap[this.parameterDescriptors[i].name] = this.parameterDescriptors[i];
					}
					
					if(callback){
						 Ext.callback(callback, obj, args);
					}
				},	
				failure : function(response) {
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope : this
			
		});
	},
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.LoginForm',{
	extend:'Ext.window.Window',
	config:{
		failed:false,
		errorMessage:"Wrong username or password"
	},
	constructor:function(config){
		this.callParent([Ext.apply(config,{
			layout:{
				type:'vbox',
				align:'center'
			},
			width:500,
			height:210,
			closable:false,
			title: "Mplane login",
			buttons:[
			   {
				   text:"Ok",
				   width:150,
				   cls:'menuButton',
				   handler: function(){
					   Ext.Ajax.request({
						  url:"/gui/login",
						  params:{
							  username:this.nameInput.getValue(),
							  password:this.passwordInput.getValue()
						  },
						  success: function(response){
							  var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
	  							if (!json) {
	  								return;
	  							}	
	  							window.location.href='index.html';
						  },
						  scope:this
					   });
				   },
				   scope:this
			   }
			]
		})]);
		
		var array = document.location.search.substr(document.location.search.search("/?")+1).split("&");
		for(var i in array){
			var command = array[i].split("=")[0];
			var value = array[i].split("=")[1];
			if(command=='failure'){
				if(value=='true'){
					this.failed=true;
				}
			}
		}
		
		this.nameInput = Ext.create('Ext.form.field.Text', {
			inputType : "text",
			name : "name",
			fieldLabel : "Username",
			validateBlank : true,
			allowBlank : false,
			labelWidth : 140,
			msgTarget : "side",
			padding:'10 0 0 0'
		});

		this.passwordInput = Ext.create('Ext.form.field.Text', {
			inputType : "password",
			name : "password",
			fieldLabel : "Password",
			validateBlank : true,
			allowBlank : false,
			labelWidth : 140,
			msgTarget : "side",
			listeners: {
                specialkey: function(field, e){
                    // e.HOME, e.END, e.PAGE_UP, e.PAGE_DOWN,
                    // e.TAB, e.ESC, arrow keys: e.LEFT, e.RIGHT, e.UP, e.DOWN
                    if (e.getKey() == e.ENTER) {
                    	Ext.Ajax.request({
  						  url:"/gui/login",
  						  params:{
  							  username:this.nameInput.getValue(),
  							  password:this.passwordInput.getValue()
  						  },
  						  success: function(response){
  							var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
  							if (!json) {
  								return;
  							}	
  							window.location.href='index.html';
  						  },
  						  scope:this
  					   });                    
                    }
                },
                scope:this
            }
			
		});
		
		this.errorMessage = Ext.create('Ext.form.Label',{
		        xtype: 'label',
		        forId: 'errorLabel',
		        style:{
		        	color:"red",
		        	fontWeight:"bold"
		        },
		        text: this.errorMessage,
		        margin: '0 0 0 10'
		});
		this.add(Ext.create('Ext.Img',{
			src:'resource/mplane-gui/image/mplane_final_logo.png',
			width:400,
			height:70,
			border:false
		}));
		this.add(this.nameInput);
		this.add(this.passwordInput);
		if(this.failed){
			this.add(this.errorMessage);
		}
	}
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.utils.OnDemand', {
	singleton:true,
	

		dashboardConfig:{
			width:2,
			height:6
			
		},
		panelsConfig:[],
	
	
	init: function(){
		if(NV.mplane.gui.Main.userSettings && NV.mplane.gui.Main.userSettings.onDemand){
			//there is some user settings
			this.dashboardConfig = NV.mplane.gui.Main.userSettings.onDemand.dashboardConfig;
			this.panelsConfig = NV.mplane.gui.Main.userSettings.onDemand.panelsConfig;
		}
		this.createMiniDashboard();
	},
	
	addPortlet: function(config){
		//{x:myX, y:myY, measurementId:data.measurementId, measurementData:measurementData}
		
		this.panelsConfig[(config.y) * this.dashboardConfig.width + config.x] = {};
		
		this.panelsConfig[(config.y) * this.dashboardConfig.width + config.x].measurementId = config.measurementId;
		this.panelsConfig[(config.y) * this.dashboardConfig.width + config.x].measurementData = config.measurementData;
		
		if(this.miniDashboard.isVisible()){
			var p = this.panels[(config.y) * this.dashboardConfig.width + config.x];
			p.removeAll();
			p.add({xtype:"container", html:config.measurementId});
		}else{
			changed = true;
		}
		
	},
	
	setWidth: function(){
		
	},
	
	setHeight: function(){
		
	},
	
	addSeriesToPortlet: function(){
		
	},
	
	removeSeriesFromPortlet: function(){
		
	},
	
	createMiniDashboard: function(){
		this.panels = [];
		for(var i=0; i<this.dashboardConfig.height; i++){
			for(var j=0; j<this.dashboardConfig.width; j++){
				var myX = j;
				var myY = i;
				var panel = Ext.create('Ext.panel.Panel',{
					xtype:'panel',
					header:false,
					frame:true,
					bodyBorder:false,
					border:false,
					columnWidth: 1/this.dashboardConfig.width,
					margin:5,
					height:50,
					width:50,
					myX:myX,
					myY:myY,
					html: this.panelsConfig[(myY) * this.dashboardConfig.width + myX]?this.panelsConfig[(myY) * this.dashboardConfig.width + myX].measurementId:"",
			    	listeners:{
			    		render: function(panel, eOpts){
				   			var me = this;
			    			Ext.create('Ext.dd.DropTarget', panel.body,{
				   				notifyDrop: function(source, e, data){
				   					me.addPortlet({x:panel.myX, y:panel.myY, measurementId:data.measurementId, measurementData:data.measurementData});
				   				},
				   				ddGroup: "chartToDashboard"
				   			});
				   		},
				   		scope:this
			    	}
				});
				this.panels.push(panel);
			}
		}
		
		this.miniDashboard = Ext.create('Ext.panel.Panel',{
			xtype:'panel',
	    	layout:{
	    		type: 'column',
	    	},
	    	items: this.panels,
	    	title: "On-Demand Charts",
	    	flex:1
	    	
		});
		this.changed = false;
	},
	
	
	createDashboard: function(){
		this.dashboardPanels = [];
		for(var i=0; i<this.dashboardConfig.height; i++){
			for(var j=0; j<this.dashboardConfig.width; j++){
				var myX = j;
				var myY = i;
				var panel = Ext.create('Ext.panel.Panel',{
					xtype:'panel',
					header:false,
					frame:true,
					bodyBorder:false,
					border:false,
					columnWidth: 1/this.dashboardConfig.width,
					margin:5,
					height:200,
					width:50,
					myX:myX,
					myY:myY,
					layout:"fit",
					resizable:true
			    	
				});
				this.dashboardPanels.push(panel);
			}
		}
		
		
		
		this.dashboard = Ext.create('Ext.panel.Panel',{
			xtype:'panel',
	    	layout:{
	    		type: 'column',
	    	},
	    	items: this.dashboardPanels,
	    	title: "On-Demand Charts",
	    	header:false,
	    	border:false,
	    	flex:1
	    	
		});
		this.changed = false;
	},
	
	getMiniDashboard: function(){
		if(!this.miniDashboard || this.changed){
			this.createMiniDashboard();
		}
		return this.miniDashboard;
	},
	
	getDashboard: function(){
	//	if(!this.dashboard || this.changed){
			this.createDashboard();
	//	}
		return this.dashboard;
	},
	
	showCharts: function(){
		for(var i=0; i<this.dashboardConfig.height; i++){
			for(var j=0; j<this.dashboardConfig.width; j++){
				var myX = j;
				var myY = i;
				
				if(this.panelsConfig[(myY) * this.dashboardConfig.width + myX]){
					var chartConfig = {
							"chartType" : "combo",
							series : [{
								"field" : {
									"value" :1
								},

								"axis" : "left",
								"type" : "line",
								"seriesId" : "0",
								// "visible":false,
								"title" : this.panelsConfig[(myY) * this.dashboardConfig.width + myX].measurementId
							}],
							"legend" : {
								position : "right"
							},
							"measurementData" : this.panelsConfig[(myY) * this.dashboardConfig.width + myX].measurementData,
							"axes" : [ {
								"position" : "bottom",
								"grid" : false,
								"labelVisible" : true,
								"showlabel" : true,
								"type" : "Time",
								"labelFont" : "10.0px serif",
								"labelRotation" : -45
							}, {
								"position" : "left",
								"grid" : true,
								"labelVisible" : true,
								"type" : "Numeric",
								"labelFont" : "10.0px serif",
								"format" : "# %"
							} ],
							cursor:true
						};
					
					chart = NV.chart.library.ChartDrawer.drawChartFromJson(chartConfig);
					console.log(chartConfig);
					this.dashboardPanels[(myY) * this.dashboardConfig.width + myX].removeAll();
					this.dashboardPanels[(myY) * this.dashboardConfig.width + myX].add(chart.chartContent);
				}

			}
		}
			
	}
});

// @tag mplane-gui
Ext.require('NV.mplane.gui.Constants');
Ext.require('NV.ext.ux.nv.GlobalErrorHandler');
Ext.require('NV.mplane.gui.utils.OnDemand');
Ext.define('NV.mplane.gui.Main',{
	singleton: true,
	renderedTabs: {},	//tabs thats already opened once 
	urlParams: {},
	init: function(){
		
		test = false;	//global variable
		
		
		
		//process the url parameters
		var array = document.location.search.substr(document.location.search.search("/?") + 1).split("&");
		for ( var i = 0; i < array.length; i++) {
			var command = array[i].split("=")[0];
			var url = array[i].split("=")[1];
			this.urlParams[command] = url;
		}
		
		test = this.urlParams.test;
		
		if(test){
			this.urls = NV.mplane.gui.Constants.testUrls;
		}else{
			this.urls = NV.mplane.gui.Constants.urls;
		}

		
		Ext.Ajax.request({
			url : this.urls.guiSettings,
			success : function(response) {
				var json;
				try{
					json =  Ext.decode(response.responseText);
				}
				catch(e){
					window.location.href = "login.html";	
					return;
				}
				this.continueInit(json);
			},
			failure : function(response) {
				window.location.href = "login.html";	
			},
			scope : this
		});
	
		
	},

	continueInit: function(currentUsersSettings){
		this.userSettings = currentUsersSettings;
		Ext.Ajax.request({
			url : "resource/dashboard-layout/json/lang/nv.lang.en.json",
			success : function(response) {
				lang = Ext.decode(response.responseText);//global variable
			},
			failure : function(response) {
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			},
			scope : this
		});
		
		
		if(this.urlParams.page){
			this.initParameters = {
					page : this.urlParams.page,
					objectId : this.urlParams.objectId
				};
		}

		NV.mplane.gui.utils.OnDemand.init();
		
		
		this.tabPanel = Ext.create('Ext.tab.Panel', {
			height : 700,
			plain : false,
			border : false,
			bodyBorder : false,
			style : {
				backgroundColor : 'white'
			},
			flex : 1,
			items : [{
				xtype:'panel',
				title:"welcome",
				html:"<iframe frameBorder='0' src='welcome.html' width='100%' height='100%'></iframe>",
				closable:true,
				border : false,
				bodyBorder : false,
				itemId: 'welcomme'
			}],
			region:"center",
			listeners : {
				tabchange : function(tabPanel, newCard, oldCard, eOpts) {
		/*			try {
						newCard.enableAutoRefresh();
					} catch (e) {
						console.log("failed enable auto refresh");
						console.log(newCard);
					}
					try {
						oldCard.disableAutoRefresh();
					} catch (e) {
						console.log("failed disable auto refresh");
						console.log(oldCard);
					}
*/
				},
				scope : this
			}
		});

		capabilityMenuItems = [];
		

		for(var i in NV.mplane.gui.Constants.capabilityMenu){
			capabilityMenuItems.push({
					header : false,
					border : false,
					bodyBorder : false,
					cls : 'hoverMenu',
					layout : {
						type : 'hbox'
					},
					items : [ {

						xtype : 'image',
						src : 'resource/mplane-gui/image/' + NV.mplane.gui.Constants.capabilityMenu[i].icon,
						width : 30,
						height : 30,
						padding: '5'
					}, {
						xtype : 'label',
						html : NV.mplane.gui.Constants.capabilityMenu[i].label,
						height : 30,
						border : false,
						bodyBorder : false,
						flex : 1,
						cls : 'leftSubmenu',
						padding: '5'

					} ],
					listeners : {
						render : function(panel) {
							panel.body.on('click', function() {
								
								NV.mplane.gui.Main.goToPage({page:this.itemid});
							}, this);
						},
						scope : {
							main: this,
							itemid : i
						}
					}
			});
		}

		
		this.menuPanel = Ext.create('Ext.panel.Panel', {
		    title: 'Menu',
		    width: 200,

		    defaults: {
		        // applied to each contained panel
		        bodyStyle: 'padding:0px'
		    },
		    layout: {
		        // layout-specific configs go here
		        type: 'accordion',
		        titleCollapse: true,
		        animate: true,
		        activeOnTop: false,
		        hideCollapseTool: true
		    },
		    items: [{
		        title: 'Components',
		        layout:'vbox',
		        items: capabilityMenuItems
		                
		    },{
		        title: 'Dashboard',
		        html: 'No dashboard specified'
		    },{
		        title: 'Settings',
		        html: 'Manage users'
		    }],
			region : 'west',
			 collapsible: true
		});
		
		var panel = Ext.create('Ext.panel.Panel', {
			
			header : false,
			layout : {
				type : 'border'
			},
			border : false,
			bodyBorder : false,
			items : [ 
			    {
					html:"<image src='resource/mplane-gui/image/mplane_final_logo.png' height='50px'>",
					region:"north"
				},
				this.tabPanel, 
				this.menuPanel 
			]
		});
		
		
		Ext.create('Ext.container.Viewport', {
			renderTo : Ext.getBody(),
			layout : {
				type : 'fit'

			},
			items : panel

		});
		
		if(this.initParameters){
			this.goToPage(this.initParameters);
		}
	},
	
	goToPage:function(params){
	
		if(this.tabPanel.items.keys.indexOf(params.page)>=0){	//opened
			this.tabPanel.setActiveTab(this.tabPanel.child('#'+params.page));
		}else{
							//new
			if(NV.mplane.gui.Constants.capabilityMenu[params.page].type=='capability'){
				newTab = Ext.create('NV.mplane.gui.tab.AllCapabilityTab', {itemId:params.page});
				this.renderedTabs[params.page] = newTab;
			}
			if(NV.mplane.gui.Constants.capabilityMenu[params.page].type=='pending'){
				newTab = Ext.create('NV.mplane.gui.tab.RunningMeasurementsTab', {itemId:params.page});
				this.renderedTabs[params.page] = newTab;
			}
			if(NV.mplane.gui.Constants.capabilityMenu[params.page].type=='results'){
				newTab = Ext.create('NV.mplane.gui.tab.FinishedTasksTab', {itemId:params.page});
				this.renderedTabs[params.page] = newTab;
			}
			if(NV.mplane.gui.Constants.capabilityMenu[params.page].type=='ondemand'){
				newTab = Ext.create('NV.mplane.gui.tab.OndemandTab', {itemId:params.page});
				this.renderedTabs[params.page] = newTab;
			}
			
			this.tabPanel.add(this.renderedTabs[params.page]);
			this.tabPanel.setActiveTab(this.tabPanel.child('#'+params.page));
		}
		
	}

});

// @tag mplane-gui
Ext.define('NV.mplane.gui.tab.BaseCapabilityTab',{
	extend:'Ext.panel.Panel',
	
	gridUrl: undefined,// NV.mplane.gui.Main.urls.gridUrl,
	
	/**
	 * read the grid configuaration and place
	 */
	constructor: function(config){
		this.callParent([Ext.apply(config,{
			
			layout:{
				type:'fit'
			},
			closable:true
		})]);
		this.readRegistry();
	},

	readRegistry: function(){
		if(NV.mplane.gui.Constants.parameterDescriptors){
			this.parameterDescriptors = NV.mplane.gui.Constants.parameterDescriptors;
			this.loadGridConfig();
		}
		else{
			NV.mplane.gui.Constants.readRegistry('loadGridConfig',this);
		}

	},

	loadGridConfig: function(){
/*		this.parameterDescriptors = NV.mplane.gui.Constants.parameterDescriptors;
		Ext.Ajax.request({
				url : this.gridUrl,
				success : function(response) {
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if (!json) {
						return;
					}	
				
					this.addExtraParametersToFilters(json.config.filterConfig);
					json.config.dataUrl = NV.mplane.gui.Main.urls.capabilityList;
					json.config.myTab = this;
					json.config.type = "list";
					this.grid = Ext.create('NV.mplane.gui.utils.CapabilityGrid',json.config);
					this.add(this.grid);
				},
				failure : function(response) {
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope : this
			});
		*/
	},

	addExtraParametersToFilters: function(filterConfig){
		for(var i = 0; i < this.parameterDescriptors.length; i++){
			var filter = {
					text:this.parameterDescriptors[i].name
			};
			if(this.parameterDescriptors[i].prim == 'natural' || this.parameterDescriptors[i].prim == 'real'){
				filter.type = 'integer';
			}
			else if(this.parameterDescriptors[i].prim == 'time'){
				filter.type = 'datetime';
			}
			else if(this.parameterDescriptors[i].prim == 'string'){
				filter.type = 'string';
			}
			else if(this.parameterDescriptors[i].prim == 'address'){
				filter.type = 'string',
				filter.regexp = '\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b';
			}else if(this.parameterDescriptors[i].prim == 'url'){
				filter.type = 'string',
				filter.regexp = '^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*$';
			}else if(this.parameterDescriptors[i].prim == 'boolean'){
				filter.type = 'boolean';
			}else{
				console.log("ivalid parameter type:");
				console.log(this.parameterDescriptors[i]);
			}
			
			filterConfig.filters[this.parameterDescriptors[i].name] = (filter);
		}
		return filterConfig.filters;
	}
	
	
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.tab.AllCapabilityTab',{
	extend:'NV.mplane.gui.tab.BaseCapabilityTab',
	runUrl: undefined,
	/**
	 * read the grid configuaration and place
	 */
	constructor: function(config){
		this.callParent([Ext.apply(config,{
			title:'List of capabilities',
			gridUrl: NV.mplane.gui.Main.urls.gridUrl,
			runUrl : NV.mplane.gui.Main.urls.runUrl,
		})]);
	},

	
	loadGridConfig: function(){
		this.parameterDescriptors = NV.mplane.gui.Constants.parameterDescriptors;
		Ext.Ajax.request({
				url : this.gridUrl,
				success : function(response) {
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if (!json) {
						return;
					}	
				
					this.addExtraParametersToFilters(json.config.filterConfig);
					json.config.dataUrl = NV.mplane.gui.Main.urls.capabilityList;
					json.config.myTab = this;
					json.config.type = "list";
					this.grid = Ext.create('NV.mplane.gui.utils.CapabilityGrid',json.config);
					this.add(this.grid);
				},
				failure : function(response) {
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope : this
			});
		
	},

	
	runMeasures: function(measures){
		if(measures.length>0){
			this.runMeasure(measures, 0, measures.length);
		}
		
	},
	
	runMeasure: function(measures, currentIndex, size){

		w = Ext.create("NV.mplane.gui.windows.RunWindow",{
			measures:measures, 
			currentIndex:currentIndex, 
			size:size, 
			parent:this
		});
		w.show();
		
		
	},
	
	sendRunParamsToServer: function(raw, values){
		
		
		delete raw.parameterString;
		var url = Ext.String.urlAppend(this.runUrl, "DN="+raw.probe);
		delete raw.probe;
		
		raw.when = values.when;
		delete values.when;
		Ext.apply(raw.parameters, values);
		
		Ext.Ajax.request({
			url: url,
			method:'POST',
			jsonData: raw,
			success: function(opts){
				
			}
		});
	}
	
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.tab.FinishedTasksTab',{
	extend:'NV.mplane.gui.tab.BaseCapabilityTab',	
	detailsUrl: undefined,
	/**
	 * read the grid configuaration and place
	 */
	constructor: function(config){
		
		
		
		this.callParent([Ext.apply(config,{
			title:'Results',
			gridUrl: NV.mplane.gui.Main.urls.gridUrl,
			detailsUrl: NV.mplane.gui.Main.urls.resultDetails,
		})]);
	},

	

	loadGridConfig: function(){
		this.parameterDescriptors = NV.mplane.gui.Constants.parameterDescriptors;
		Ext.Ajax.request({
				url : this.gridUrl,
				success : function(response) {
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if (!json) {
						return;
					}	
				
					this.addExtraParametersToFilters(json.config.filterConfig);
					json.config.dataUrl = NV.mplane.gui.Main.urls.resultList;
					json.config.detailsUrl = this.detailsUrl;
					
					json.config.myTab = this;
					json.config.selectable = false;
					json.config.type = "finished";
					json.config.editable = true;
					this.grid = Ext.create('NV.mplane.gui.utils.FinishedGrid',json.config);
					this.add(this.grid);
				},
				failure : function(response) {
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope : this
			});
		
	}
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.tab.OndemandTab',{
	extend:'Ext.panel.Panel',
	/*
	 * 1) create a dashboard, ondemand.dashboardocnfig.width* odemand.dashboardconfig.height panels
	 */
	
	constructor: function(config){
		this.callParent([Ext.apply(config,{
			items: NV.mplane.gui.utils.OnDemand.getDashboard(),
			title:"On-Demand Chart View",
			closable:true,
			listeners: {
				afterrender: function(panel, eOpts){
					NV.mplane.gui.utils.OnDemand.showCharts();
				}
			}
		})]);
		
	}

	
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.tab.RunningMeasurementsTab',{
	extend:'NV.mplane.gui.tab.BaseCapabilityTab',

	detailsUrl: undefined,
	/**
	 * read the grid configuaration and place
	 */
	constructor: function(config){
		
		
		this.callParent([Ext.apply(config,{
			title:'Running measurements',
			gridUrl: NV.mplane.gui.Main.urls.gridUrl,
			detailsUrl: NV.mplane.gui.Main.urls.detailsUrl
		})]);
	},

	

	loadGridConfig: function(){
		this.parameterDescriptors = NV.mplane.gui.Constants.parameterDescriptors;
		Ext.Ajax.request({
				url : this.gridUrl,
				success : function(response) {
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if (!json) {
						return;
					}	
				
					this.addExtraParametersToFilters(json.config.filterConfig);
					json.config.dataUrl = NV.mplane.gui.Main.urls.runningList;
					json.config.myTab = this;
					json.config.selectable = false;
					json.config.type = "running";
					this.grid = Ext.create('NV.mplane.gui.utils.CapabilityGrid',json.config);
					this.add(this.grid);
				},
				failure : function(response) {
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope : this
			});
		
	}
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.utils.CapabilityGrid',{
	extend:"NV.dashboard.layout.dashboard.components.Grid",
	myTab: undefined,
	type:undefined,
	
	createStore: function(){
		var store, proxy;
		if(this.dataUrl){
			this.extraParams = {};
			
			
			store = Ext.create('Ext.data.Store', {
				model : 'GridModel',
				remoteSort : !this.local,
				remoteFilter : !this.local,
				sorters: this.defaultSorters,
				groupField : this.groupField,
				proxy : {
					type : 'ajax',
					url : this.dataUrl,
					extraParams: this.extraParams,
					reader : Ext.create('NV.mplane.gui.utils.CapabilityReader',{
						type : 'json',
						root : 'list',
						useSimpleAccessors:false
					})
				},
				autoLoad : true,
				pageSize : this.local?500:this.pageSize,

				listeners : {	/** listeners for filter string refresh on top */
					
					refresh : function(store, records, successful, eOpts) {
						this.storeRefreshFunction(store, records, successful, eOpts);
					},

					beforeload: function(store, operation, eOpts){
						if(!this.firstLoaded && this.local){
							this.firstLoaded = true;
							this.setDefaultFilterss();
						}
						else if(this.filterable && this.filterPanel && this.needFilterRefresh){
							this.needFilterRefresh = false;
							this.refreshFilterValues();
						}
						this.needFilterRefresh=true;
					},
					
					scope : this
				}
			});
		}
		return store;
	},
	
	
	createDockedItems : function(dockedItems) {
		
		if(this.firstConfig.type=="list"){
			var runButton = {
					xtype : 'button',
					icon : 'resource/mplane-gui/image/play.png',
					tooltip : 'Create specification',
					tooltipType: "title",
					text:"Create specification",
					listeners : {
						click : function() {
							this.myTab.runMeasures(this.grid.selModel.selected.items);					
						},
						scope : this
					}
				};

				this.topItems = {
						xtype : 'toolbar',
						dock : 'top',
						items : [ runButton]
					};
		}else if(this.firstConfig.type=="running"){
	/*		var runButton = {
					xtype : 'button',
	//				icon : 'resource/mplane-gui/image/start.png',
					tooltip : 'Show details',
					tooltipType: "title",
					text:"Show details",
					listeners : {
						click : function() {
							this.myTab.showDetails(this.grid.selModel.selected.items);					
						},
						scope : this
					}
				};

			this.topItems = {
					xtype : 'toolbar',
					dock : 'top',
					items : [ runButton]
				};*/
		}
	}
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.utils.CapabilityReader',{
	extend:'Ext.data.reader.Json',
		
		 getResponseData: function(response) {
		        var data, error;
		 
		        try {
		            data = Ext.decode(response.responseText);
		            //the data is grouped, and it's not good :(
		            
		            normalizedData = [];
		            for(var key in data){
		            	for(var i=0; i<data[key].length; i++){
		            		//add the probe column to data
		            		Ext.apply(data[key][i],{probe:key});
		            		this.processParameters(data[key][i]);
		            		normalizedData.push(data[key][i]);
		            	
		            	}
		            }
		            
		            return this.readRecords({total:normalizedData.length,list:normalizedData});
		        } catch (ex) {
		            error = new Ext.data.ResultSet({
		                total  : 0,
		                count  : 0,
		                records: [],
		                success: false,
		                message: ex.message
		            });

		            this.fireEvent('exception', this, response, error);

		            Ext.Logger.warn('Unable to parse the JSON returned by the server');

		            return error;
		        }
		    },
		
		processParameters: function(row){
			var parametersString="";
			var descriptors = NV.mplane.gui.Constants.parameterMap;
    		for(var j in row.parameters){
    			if(!descriptors[j]){
    				console.log("error, no parameter descriptor for "+j);
    			}
    			if(row.parameters[j].trim()=="*"){
    				//ki kell tölteni,
    			//	parametersString+="<b>"+j+"</b>:"+row.parameters[j]+"<br>";
    				
    			}else if(descriptors[j].prim=='natural' && row.parameters[j].indexOf("..")>=0 ){
    				//szám és - jel van benne -> ki kell tölteni
    			//	parametersString+="<b>"+j+"</b>:"+row.parameters[j]+"<br>";
    			
    			}else if(descriptors[j].prim=='address' && row.parameters[j].indexOf("/")>=0 ){
    				//ip cím és ki kell tölteni
    			//	parametersString+="<b>"+j+"</b>:"+row.parameters[j]+"<br>";
    			
    			}else if(row.parameters[j].indexOf(",")>=0 ){
    				//felsorolás és ki kell tölteni
    			//	parametersString+="<b>"+j+"</b>:"+row.parameters[j]+"<br>";
    			
    			}else{
    				//fix értéke van
    				parametersString+=j+":"+row.parameters[j]+"<br>";
    			}
    			
    			
    		}
    		Ext.apply(row, {parameterString:parametersString});
		}


});

// @tag mplane-gui
Ext.define("NV.mplane.gui.utils.FinishedGrid",{
	extend:'NV.mplane.gui.utils.CapabilityGrid',
	
	config:{
		detailsUrl: undefined
	},
	
	createExtraFieldsBefore : function(fieldConfig) {
		
		fieldConfig.push({
			menuDisabled : true,
			sortable : false,
			xtype : 'actioncolumn',
			width : 30,
			items : [ {
		//		icon : 'resource/sencha-extjs/resources/themes/images/default/tree/folder-open.gif', 
				icon: 'resource/dashboard-layout/image/tools/search.png',
				tooltip : 'Show',
				handler : function(grid, rowIndex, colIndex) {
					var rec = grid.getStore().getAt(rowIndex);
					this.handleEdit(rec, grid);
				},
				scope : this
			} ]
		});
		
	},
	
	handleEdit : function(rec, grid) {

		Ext.Ajax.request({
			params: {token: rec.raw.token},
			url : this.detailsUrl,
			method:"GET",
			success: function(response){
				var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
				if (!json) {
					return;
				}	
				
				
				
				this.editWindow = Ext.create('NV.mplane.gui.windows.DetailsWindow', json);
				this.editWindow.show();
			},	
			failure : function(response) {
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			},
			scope : this
		});
	}           
	
});

// @tag mplane-gui
Ext.require('NV.mplane.gui.utils.OnDemand');
Ext.define('NV.mplane.gui.windows.DetailsWindow', {
	extend : 'Ext.window.Window',

	config:{
		parent : undefined,
	},

	constructor : function(raw) {

		// property grid mindíg van ő van az első oldalon
		var propertySource = {
			when : raw.when
		};
		Ext.apply(propertySource, raw.parameters);

		var propertyGrid = Ext.create('Ext.grid.property.Grid', {
			title : "Parameters",
			header : false,
			width : 300,
			border : false,
			bodyBorder : false,
			source : propertySource,
			getCellEditor : function() {
				return null;
			},
		});

		var justOneRow = raw.resultvalues.length == 1;

		var valuesGrid = undefined;
		var chart = undefined;
		var chartContent = undefined;
		if (justOneRow) {
			var valuesMap = {};
			for ( var i = 0; i < raw.resultvalues[0].length; i++) {
				valuesMap[raw.results[i]] = raw.resultvalues[0][i];
			}

			valuesGrid = Ext.create('Ext.grid.property.Grid', {
				header : false,
				border : false,
				bodyBorder : false,
				columnWidth : "50%",
				source : valuesMap
			});

		} else { // több sorunk van

			var gridConfig = {
				local : true,
				filterable : false,
				fields : [

				],
				measurementData : [

				]
			};
			for ( var i = 0; i < raw.results.length; i++) {
				gridConfig.fields.push({
					dataIndex : raw.results[i],
					type : 'string',
					text : raw.results[i]
				});
			}

			var dataByMeasurementName = {};
			for (var k=0; k<raw.results.length; k++) {
				dataByMeasurementName[raw.results[k]] = [];
			}
			for ( var i = 0; i < raw.resultvalues.length; i++) {
				var valuesMap = {};
				for ( var j = 0; j < raw.resultvalues[i].length; j++) {
					valuesMap[raw.results[j]] = raw.resultvalues[i][j];
					if(j==0){
						raw.resultvalues[i][0] = new Date(raw.resultvalues[i][0]).getTime();
					}
					else {// 0. is the time, not measure
						dataByMeasurementName[raw.results[j]].push([ raw.resultvalues[i][0], raw.resultvalues[i][j] ]);
					}

				}

				gridConfig.measurementData.push(valuesMap);
			}

			valuesGrid = Ext.create('NV.dashboard.layout.dashboard.components.Grid', gridConfig);

			var chartConfig = {
				"chartType" : "combo",
				series : [],
				"legend" : {
					position : "right"
				},
				"measurementData" : raw.resultvalues,
				"axes" : [ {
					"position" : "bottom",
					"grid" : false,
					"labelVisible" : true,
					"showlabel" : true,
					"type" : "Time",
					"labelFont" : "10.0px serif",
					"labelRotation" : -45
				}, {
					"position" : "left",
					"grid" : true,
					"labelVisible" : true,
					"type" : "Numeric",
					"labelFont" : "10.0px serif",
					"format" : "# %"
				} ]
			};

			// a 0. oszlop mindíg az idő ha több soros a cucc
			for ( var i = 1; i < raw.results.length; i++) {
				chartConfig.series.push({
					"field" : {
						"value" : i
					},

					"axis" : "left",
					"type" : "line",
					"seriesId" : "data" + i,
					// "visible":false,
					"title" : raw.results[i]

				});

			}
			chart = NV.chart.library.ChartDrawer.drawChartFromJson(chartConfig);
			chartContent = chart.chartContent;

			// create the poor man-s dashboard - addseries dialog

			var series = [];
			for ( var i = 1; i < raw.results.length; i++) {
				var measurementData = dataByMeasurementName[raw.results[i]];
				var measurementId = raw.results[i];
				series.push({
					"xtype" : 'panel',
					"html" : raw.results[i],
					border : true,
					header : false,
					cls : "draggableMeasure",
					margin : 2,
					padding : 1,
					measurementData : measurementData,
					measurementId : measurementId,
					listeners : {
						"render" : function(container, eOpts) {
							Ext.create('Ext.dd.DragSource', container.el, {
								ddGroup : "chartToDashboard",
								dragData: {
									measurementData : container.measurementData,
									measurementId : container.measurementId
								}
							/*
							 * notifyEnter : function(source, evt, data) {
							 * console.log("notify"); }
							 */
							});
						}
					}
				});
			}

			addToChartPanel = Ext.create('Ext.panel.Panel', {
				layout : {
					type : 'hbox',
					align : 'stretch'

				},
				header:false,
				items : [ 
				          {
						xtype : "container",
						border : true,
						items : series,
						flex:0,
						layout:{
							type:"vbox",
							align:"stretchmax"
						}
					},
					NV.mplane.gui.utils.OnDemand.getMiniDashboard() 
				]
			});
		}

		var tabPanel = Ext.create('Ext.tab.Panel', {
			width : 900,
			height : 250,
			flex : 1,
			plain : true,
			items : [ {
				title : 'Values',
				layout : 'fit',
				items : [ valuesGrid ],
				iconCls : 'gridTab'
			}, {
				title : 'Chart',
				disabled : justOneRow,
				layout : 'fit',
				items : [ chartContent ],
				iconCls : 'chartTab'
			}, {
				title : 'Add to On-Demand',
				disabled : justOneRow,
				layout : 'fit',
				items : [ addToChartPanel ],
				iconCls : 'chartTab'
			} ]
		});

		this.callParent([ {
			title : raw.label,
			items : [ {
				xtype : 'fieldset',
				title : 'Parameters',
				layout : 'fit',
				items : [ propertyGrid ],

			}, tabPanel ],
			layout : {
				type : 'vbox',
				align : 'stretch'
			},
			buttons : [ {
				text : "Close",
				handler : function() {
					this.hide();

				},
				scope : this
			}

			]
		} ]);
	}
});

// @tag mplane-gui
Ext.define('NV.mplane.gui.windows.RunWindow',{
	extend:'Ext.window.Window',
		
	parent:undefined,
	
	constructor:function(config){
		
		var measures = config.measures;
		var currentIndex = config.currentIndex; 
		var size = config.size;
		var parent = config.parent;
		
		var items = [];
		if(size>1){
			items.push(Ext.create('Ext.form.FieldContainer',{
				layout:'hbox',
		        anchor: '100%',
				items:[
				       {xtype:"label", text:"Capability:", width:"100px"},
				       {xtype:"label", text:measures[currentIndex].get("label")},
				]
			}));
		}
		
		items.push(Ext.create('Ext.form.field.Text',{
			anchor: '100%',
	        name: "when",
	        value: measures[currentIndex].raw.when,
	        fieldLabel: "When",
	        
//	        tooltip: 'When run?',
//	        tooltipType: "title",
//	        disabled: !editable,
//	        readOnlyCls: 'NvReadonlyField',
		}));
		
		var descriptors = NV.mplane.gui.Constants.parameterMap;
		for(var i in measures[currentIndex].raw.parameters){
			var actParam = measures[currentIndex].raw.parameters[i];
			var editable = false;
			if(actParam.trim()=="*"){
				//ki kell tölteni,
				editable = true;				
			}else if(actParam.indexOf("..")>=0 ){
				//szám és - jel van benne -> ki kell tölteni
				editable = true;
			}else if(descriptors[i].prim=='address' && actParam.indexOf("/")>=0 ){
				//ip cím és ki kell tölteni
				editable = true;
			}else if(actParam.indexOf(",")>=0 ){
				//felsorolás és ki kell tölteni
				editable = true;
			}else{
				//fix értéke van
				editable = false;
			}
			

			if(actParam.indexOf(",")>0){
				//felsorolás típusú
				var store = Ext.create('Ext.data.Store', {
				    fields: ['id', 'label'],
				    data : []
				});
				
				values = actParam.split(",");
				for(var j = 0; j <values.length; j++){
					store.add(values[j]);
				}
				
				items.push(Ext.create('Ext.form.ComboBox',{
				    fieldLabel: this.label,
				    name: i,
				    fieldLabel: i,
				    store: store,
				    queryMode: 'local',
				    displayField: 'label',
				    valueField: 'id',
		    	    typeAhead: false,
		    	    allowBlank: false,
		    	    forceSelection: true,
		    	    tooltipType: "title",
		    	    readOnlyCls: 'NvReadonlyField',
		    	    editable:editable
				}));
			}
			if(descriptors[i].prim=='natural' || descriptors[i].prim=='real'){
				
				var minValue, maxValue; 
				if(actParam.indexOf("..")>=0){
					minValue = actParam.substring(0,actParam.lastIndexOf("."));
					maxValue = actParam.substring(actParam.lastIndexOf(".")+1,actParam.length);
				}else{
					minValue = descriptors[i].prim == 'natural' ? 0 : undefined;
					maxValue = undefined;
				}
				
				
				
				items.push(Ext.create('Ext.form.field.Number',{
			        anchor: '100%',
			        name: i,
			        allowDecimals: descriptors[i].prim == 'natural' ? false : true,
			        step: descriptors[i].prim == 'natural' ? 1 : 0.1,				        		
			        fieldLabel: i,
			        tooltip: descriptors[i].desc,
			        value: actParam,
			        disabled: !editable,
			        tooltipType: "title",
			        minValue: minValue,
			        readOnlyCls: 'NvReadonlyField',
			        maxValue: maxValue
			    }));
			}
			else if(descriptors[i].prim=='address'){
				items.push(Ext.create('Ext.form.field.Text',{
			        anchor: '100%',
			        name: i,
			        value: actParam,
			        fieldLabel: i,
			        tooltip: descriptors[i].desc,
			        tooltipType: "title",
			        disabled: !editable,
			        readOnlyCls: 'NvReadonlyField',
			        regexText:'\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b'
			    }));
			}else if(descriptors[i].prim=='string' || descriptors[i].prim=='url'){
				items.push(Ext.create('Ext.form.field.Text',{
			        anchor: '100%',
			        name: i,
			        value:actParam,
			        fieldLabel: i,
			        disabled: !editable,
			        tooltipType: "title",
			        tooltip: descriptors[i].desc,
			        readOnlyCls: 'NvReadonlyField'
			    }));
			}else if(descriptors[i].prim=='time'){
				items.push(Ext.create('Ext.form.field.Text',{
			        anchor: '100%',
			        name: i,
			        fieldLabel: i,
			        tooltip: descriptors[i].desc,
			        tooltipType: "title",
			        disabled: !editable,
			        value:actParam,
			        readOnlyCls: 'NvReadonlyField'
		//	        regex:"\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b"
			    }));
			}
			else if(descriptors[i].prim=='boolean'){
				var checkbox = Ext.create('Ext.form.field.Checkbox',{
					boxLabel  : '',
		            name      : i,
		            inputValue: true,
		            value:actParam,
		            padding:0,
		            disabled: !editable,
				});
				
				items.push(Ext.create('Ext.form.FieldContainer',
					{
			            fieldLabel: i,
			            defaultType: 'checkboxfield',
			            tooltipType: "title",
			            tooltip: descriptors[i].desc,
			            items: [
			                checkbox
			            ]
			        }));
				
			}
			
		}
		
		this.runForm = Ext.create('Ext.form.Panel',{
			items:items,
			layout:"vbox",
			title:false,
			padding:10,
			border:false
		});
		
		var me = this;
		this.callParent([{
			title : size==1?"Run "+measures[currentIndex].get("label"):"Run measures (" + (currentIndex+1) + "/" + (size) + ")",
			items:this.runForm,
			layout:'vbox',
			buttons:[
			         {
			        	 text:"Cancel",
			        	 handler: function(){
			        		 me.hide();
			        		 if(this.currentIndex+1<this.size){
			        			 this.me.runMeasure(this.measures, this.currentIndex+1, this.size);
			        		 }
			        	 },
			        	 scope:{
			        		 measures: measures,
			        		 currentIndex: currentIndex,
			        		 size:size,
			        		 me:parent,
			        		 
			        	 }
			         },
			         {
			        	 text:"Cancel All",
			        	 handler: function(){
			        		 me.hide();
			        	 }
			         },
			         {
			        	 text:"Run",
			        	 handler: function(){
			        		 me.hide();
			        		 this.me.sendRunParamsToServer(Ext.clone(this.measures[this.currentIndex].raw), this.runForm.getValues());
			        		 
			        		 if(this.currentIndex+1<this.size){
			        			 this.me.runMeasure(this.measures, this.currentIndex+1, this.size);
			        		 }
			        	 },
			        	 scope:{
			        		 measures: measures,
			        		 currentIndex: currentIndex,
			        		 size:size,
			        		 runForm:this.runForm,
			        		 me:parent
			        	 }
			         }
			]
		}]);
	}
});

Ext.ClassManager.addNameAliasMappings({
  "NV.mplane.gui.Constants": [],
  "NV.mplane.gui.tab.RunningMeasurementsTab": [],
  "NV.mplane.gui.utils.OnDemand": [],
  "NV.mplane.gui.windows.DetailsWindow": [],
  "NV.mplane.gui.LoginForm": [],
  "NV.mplane.gui.tab.BaseCapabilityTab": [],
  "NV.mplane.gui.tab.OndemandTab": [],
  "NV.mplane.gui.windows.RunWindow": [],
  "NV.mplane.gui.tab.FinishedTasksTab": [],
  "NV.mplane.gui.utils.CapabilityReader": [],
  "NV.mplane.gui.utils.CapabilityGrid": [],
  "NV.mplane.gui.utils.FinishedGrid": [],
  "NV.mplane.gui.tab.AllCapabilityTab": [],
  "NV.mplane.gui.Main": []
});