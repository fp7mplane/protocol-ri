/**
 * @author Be?ta Pletscher
 * @docauthor Be?ta Pletscher
 */

/*
 * This file is the Entry Point for the implementation of this ExtJS package.
 * 
 * NOTE: Please DO NOT edit this file unless you know what you are exactly
 * doing.
 */

// BEGIN: Package definition
(function(){
	{
		var pkg =
		{
		  name : 'ajax-scheduler',
		  namespace : 'NV.ajax.scheduler',
		  path : 'ajax-scheduler',
		  date : new Date('2014','03','03','10','39','11'), // 2014/03/03 10:39:11
		  version : new Ext.Version('1.0.0.13'),
		  description : ''
		};
	
		// Register Package
	
		Ext.namespace( 'NV' );
		var packages = NV.$Packages || (NV.$Packages = {});
		packages[pkg.name] = pkg;
	
		Ext.Loader.setPath( pkg.namespace, 'lib/' + pkg.path );
	}
})();
// END: Package definition
// @tag ajax-scheduler
Ext.define('NV.ajax.scheduler.AjaxClient', {
	alias : 'AjaxClient',

	config : {
		url : "",
		activerequests : {},
		nextReqId : 0,
		serverCommInterval : 1000 // 1000;
	},

	constructor : function(config) {
		this.initConfig(config);
		setTimeout(function() {
			globalAjaxClient.doCommunication();
		}, this.serverCommInterval);
	},

	addRequest : function(requestContent, callBack, timeoutSec) {
		var rd = Ext.create('NV.ajax.scheduler.RequestDescriptor', {
			requestId : this.nextReqId++,
			content : requestContent,
			callback : callBack,
			scope: {},
			timeout : new Date().getTime() + 1000 * timeoutSec
		});
		this.activerequests[rd.requestId] = rd;
		return rd.requestId;
	},

	clearRequest : function(requestId) {
		if (this.activerequests[requestId] != undefined)
			this.activerequests[requestId] = undefined;
	},
	doCommunication : function() {
		if (Object.keys(this.activerequests).length > 0) {
			var now = new Date().getTime();
			
			var data = "";

			var separator = false;

			for ( var reqId in this.activerequests) {
				var rec = this.activerequests[reqId];
				if (rec != null && rec.state === 100) {

						if( separator )
							data += ",";
						else
							separator = true;	

						rec.content.requestId =	rec.requestId;
						data += Ext.encode(rec.content);
						rec.state = 200; // TODO itt még nincsen ám elküldve!
				}

				if (this.activerequests[reqId].timeout < now)
					delete this.activerequests[reqId];

				if (data.length > 8000)
					break;
			}
			data = "["+data+"]";
			
			Ext.Ajax.request( {
				url : this.url,
				params : data,
				success : function(response, opts) {
					try {
						var responses = Ext.decode(response.responseText);
						for ( var i = 0; i < responses.length; ++i) {
							try {
								var req = this.activerequests[responses[i].id];
								req.state = 300;
								req.callback.call(req.scope,responses[i].response);
							} catch (ex) {
								if (location.href.indexOf("debug") > 0)
									alert(ex + "\nCaused by\n" + responses[i]);
							}

							delete this.activerequests[responses[i].id];
						}
					} catch (e) {
						console.debug("invalid json");
					}
					task = new Ext.util.DelayedTask(function() {
						this.doCommunication();
					}, this);
					task.delay(this.serverCommInterval);
				},
				failure : function(response, opts) {
					console.log('server-side failure with status code ' + response.status);
					task = new Ext.util.DelayedTask(function() {
						this.doCommunication();
					}, this);
					task.delay(this.serverCommInterval);
				},
				method:'POST',
				scope : this,
				timeout : 50000
			});

			if (this.nextReqId > 30000)
				this.nextReqId = 0;
		}else{
			task = new Ext.util.DelayedTask(function() {
				this.doCommunication();
			}, this);
			task.delay(this.serverCommInterval);
		}
	}
});

// @tag ajax-scheduler
Ext.define('NV.ajax.scheduler.RefreshJob',{
	alias: 'RefreshJob',
	config:{
		fixParams: {},
		callback: undefined,
		refreshIntervall: 60,
		batchedAjaxEnabled: true,
		communicationType: 'GET',	//batched ajaxnál csak get-ben küldünk
		url: "",
		scope:undefined,
		justOne:false,
		doOnFirstTime: false
	},
	
	createParameters: function(){
		return this.fixParams;
	},
	
	createGetParameters: function(){
		var params = {};
		for(var i in this.fixParams.arguments){
			params[i] = this.fixParams.arguments[i];
		}
		
		return params;
	},
	
	constructor: function(config){
		this.initConfig(config);

	},
	
	stop: function(){
		if(this.task){
			this.task.cancel();
		}
	},
	
	start: function(){
		if(!(this.doOnFirstTime && this.justOne)){
			this.refreshFunction();
			
		}		
		if(this.doOnFirstTime){
			if(this.batchedAjaxEnabled){
				globalAjaxClient.addRequest(this.createParameters(), this.callback, 60);
			}else{	
				Ext.Ajax.request({
					url: this.url+this.fixParams.command,
					method: this.communicationType,
					params: this.createGetParameters(),
					success: function(response, opts){
						this.callback.call(this.scope,Ext.decode(response.responseText));
					},
					scope:this
				});
			}
		}
	},
	
	refreshFunction: function(){
		if(this.batchedAjaxEnabled){
			this.task = new Ext.util.DelayedTask(function(){
				globalAjaxClient.addRequest(this.createParameters(), this.callback, 60);
				if(!this.justOne){
					this.refreshFunction();					
				}
			}, 
			this);

		}else{
			this.task = new Ext.util.DelayedTask(function(){
				
				Ext.Ajax.request({
					url: this.url+this.fixParams.command,
					method: this.communicationType,
					params: this.createGetParameters(),
					success: function(response, opts){
						this.callback.call(this.scope, Ext.decode(response.responseText));
					},
					scope:this
				});
				
				if(!this.justOne){
					this.refreshFunction();					
				}
			}, 
			this);
			
		}
		this.task.delay(this.refreshIntervall*1000);
		
	}
});

// @tag ajax-scheduler
Ext.define('NV.ajax.scheduler.RequestDescriptor',{
	alias: 'RequestDescriptor',
	config: {
		state: 100,
		requestId: 0,
		content: {},
		callback: undefined,
		timeout: 30
	},
	
	constructor: function(config){
		this.initConfig(config);
	}
});

Ext.ClassManager.addNameAliasMappings({
  "NV.ajax.scheduler.RequestDescriptor": [
    "RequestDescriptor"
  ],
  "NV.ajax.scheduler.AjaxClient": [
    "AjaxClient"
  ],
  "NV.ajax.scheduler.RefreshJob": [
    "RefreshJob"
  ]
});