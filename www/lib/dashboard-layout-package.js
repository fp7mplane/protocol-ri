/**
 * @author Be?ta Pletscher
 * @docauthor Be?ta Pletscher
 */

/*
 * This file is the Entry Point for the implementation of this ExtJS package.
 * 
 * NOTE: Please DO NOT edit this file unless you know what you are exactly
 * doing.
 */

// BEGIN: Package definition
(function(){
	{
		var pkg =
		{
		  name : 'dashboard-layout',
		  namespace : 'NV.dashboard.layout',
		  path : 'dashboard-layout',
		  date : new Date('2015','01','13','17','00','04'), // 2015/01/13 17:00:04
		  version : new Ext.Version('1.0.0.166'),
		  description : 'Dashboard Layout Library'
		};
	
		// Register Package
	
		Ext.namespace( 'NV' );
		var packages = NV.$Packages || (NV.$Packages = {});
		packages[pkg.name] = pkg;
	
		Ext.Loader.setPath( pkg.namespace, 'lib/' + pkg.path );
	}
})();
// END: Package definition
// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.Container',{
	config:{
		visible:true,
		portlets:[],
		dashboard:undefined,
		resolvers:undefined,
		parameters: undefined,
		expression:""
	},
	constructor: function(config){
		this.portlets = [];
		this.parameters = {};
		this.initConfig(config);
		this.findParameters();
	},
	
	findParameters: function(){
		if(this.resolvers){
			for(var i = 0; i<this.resolvers.length; i++){
				this.parameters[this.resolvers[i].target] = undefined;
				for(var j=0; j<this.resolvers[i].sources.length; j++){
					if(this.resolvers[i].sources[j].sourceContainer){//portlettől jön a paraméter
						if(this.dashboard.portlets[this.resolvers[i].sources[j].sourceContainer]){
							this.dashboard.portlets[this.resolvers[i].sources[j].sourceContainer].model.addObserver(
								this,
								function(value, scope) {
									if (scope.container.parameters[scope.myParamName] == undefined || scope.container.parameters[scope.myParamName] != value[scope.sourceParamName]) {
										scope.container.parameters[scope.myParamName] = value[scope.sourceParamName];
										scope.container.handleRefresh();
									}
								}, {
									myParamName : this.resolvers[i].target,
									sourceParamName : this.resolvers[i].sources[j].sourceName,
									container : this
								}, "output");
							try {
								this.parameters[this.resolvers[i].target] = this.dashboard.portlets[this.resolvers[i].sources[j].sourceContainer].model.get("output")[this.resolvers[i].target];
								this.handleRefresh();
							} catch (e) {
				
							}
						}
					}else{
						this.dashboard.model.addObserver(
							this,
							function(value, scope) {
								if (scope.container.parameters[scope.myParamName] == undefined || scope.container.parameters[scope.myParamName] != value[scope.sourceParamName]) {
									scope.container.parameters[scope.myParamName] = value[scope.sourceParamName];
									scope.container.handleRefresh();
								}
							}, {
								myParamName : this.resolvers[i].target,
								sourceParamName : this.resolvers[i].sources[j].sourceName,
								container : this
							}, "output");
						try {
							this.parameters[this.resolvers[i].target] = this.dashboard.model.get("output")[this.resolvers[i].target];
							this.handleRefresh();
						} catch (e) {
			
						}
					}
				}
			}
		}
		
	},
	
	/**
	 * if the expression totaly evaled
	 */
	handleRefresh: function(){
		for(var i in this.parameters){
			if(this.parameters[i]==undefined){
				return;
			}
		}
		
		
		var cond = this.expression;
		
		cond = cond.replace(/\${/g, 'this.parameters["').replace(/}/g,'"]');
		cond = eval(cond);
		
		if(this.visible != cond){
			this.visible = cond;
			this.showHidePortlets();
		}		
	},
	
	setVisibility: function(visibility){
		if(this.visible != visibility){
			this.visible = visibility;
			this.showHidePortlets();
		}
	},
	
	showHidePortlets: function(){
		for(var i=0; i<this.portlets.length; i++){

			this.portlets[i].setVisible(this.visible);
			
		}
//		this.dashboard.dragpanel.moveAllPanelToTop();
//		this.dashboard.dragpanel.refreshBoard();
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.columnEditor.ColumnDialogWindow', {
	extend: 'Ext.window.Window',
	title:"",
	buttonTitle:"",
	items: [],
	simpleCombo: undefined,
	widthField: undefined,
	minWidthField: undefined,
	formPanel: undefined,
	columns: {original:{}, current:{}},
	fullscreen :0,
    constructor: function(type, index, columnEditor) { 
    	this.columns.original.originalCols = columnEditor.originalCols;
    	
    	this.columns.original.cols = columnEditor.cols;
    	if(type=="new"){
    		for(var i = this.columns.original.originalCols.length; i>index; i--){			
    			this.columns.original.originalCols[i] = this.columns.original.originalCols[i-1];
    			this.columns.original.cols[i] = this.columns.original.cols[i-1];
    		}
    		this.columns.original.originalCols[index]={type:"fix", width:"200px", minWidth:"100px"};
    		this.columns.original.cols[index]={type:"fix", width:"200px", minWidth:"100px"};
    		
    	}
    	this.columns.current = Ext.clone(this.columns.original);
    	
    	
    	
    	this.index = index;
    	this.fullScreen = columnEditor.dashboard.view.width;
    	
    	var me=this;
    	
    	Ext.regModel('ColumnTypeModel', {
    	    fields: [
    	        {type: 'string', name: 'id'},
    	        {type: 'string', name: 'name'}
    	    ]
    	});
    	
    	
    	var store = Ext.create('Ext.data.Store', {
    	    model: 'ColumnTypeModel',
    	    data: [
    	           {id:'flex', name:lang.dashboardedit.flex},
    	           {id:'fix', name:lang.dashboardedit.fix}
    	           ]
    	});

    	
    	var comboValue = store.findRecord("id", this.columns.current.originalCols[index].type);
    	

    	this.simpleCombo = Ext.create('Ext.form.field.ComboBox', {
    	    fieldLabel: lang.dashboardedit.columnType,
    	    displayField: 'name',
    	    value : comboValue,
    	    labelWidth: 150,
    	    store: store,
    	    queryMode: 'local',
    	    typeAhead: true,
    	    listeners:{
    	         scope: 'columnpropscope',
    	         'select': function(combo, record, opts){
    	        	 if(record[0].data.id=="flex"){
    	        		 me.refreshFlex();
    	        		 if(me.columns.current.originalCols[index].type=="fix"){
    	        			 me.changeFixToFlex();
    	        		 }else{
    	        			 me.redoFlex();
    	        		 }
    	        		
    	        	 }else{
    	        		 me.refreshFix();
    	        		 if(me.columns.current.originalCols[index].type=="flex"){
    	        			 me.changeFlexToFix();
    	        		 }else{
    	        			 me.redoFix();
    	        		 }
    	        	 }
    	         }
    	    }
    	});
    	
    	var propertyNames = {}; 
		var propertySources = {}; 
		for(var c=0; c<columnEditor.originalCols.length; c++){
			if(columnEditor.originalCols[c].type=="flex"){
				propertyNames[c]=(c+1)+". "+lang.dashboardedit.column;
				propertySources[c]=parseInt(columnEditor.originalCols[c].width);
			}
		}
		
		this.flexColumnGrid = Ext.create('Ext.grid.property.Grid', {
	        width: 300,
	        propertyNames: propertyNames,
	        source: propertySources,
	        columnIndex : me.index,
	        listeners:{
	        	propertychange: function( source, recordId, value, oldValue, eOpts ){
		        	me.propertyChange(source, recordId, value, oldValue, eOpts)
		        }
	        }
	    });
    	
		
    	this.widthField = Ext.create('Ext.form.field.Number',{
                xtype: 'numberfield',
                name: 'width',
                fieldLabel: lang.dashboardedit.width,
                value : me.columns.current.originalCols[index].width,
                minValue: 0,
                maxValue: 5000,
                listeners: {
                	change: function(field, newValue, oldValue, eOpts){
                		me.columns.current.originalCols[index].width = newValue+"px";
                	}
                }
            });
    	
    	this.minWidthField = Ext.create('Ext.form.field.Number',{
    			 xtype: 'numberfield',
                 name: 'minWidth',
                 fieldLabel: lang.dashboardedit.minWidth,
                 value : me.columns.current.originalCols[index].minWidth,
                 minValue: 0,
                 maxValue: 5000,
                 listeners: {
                 	change: function(field, newValue, oldValue, eOpts){
                 		me.columns.current.originalCols[index].minWidth = newValue+"px";
                 	}
                 }
    	});
    	
    	this.checkField = Ext.create('Ext.form.field.Checkbox',{
    		fieldLabel: lang.dashboardedit.autoCheck,
    		name: 'autocheck', 
    		inputValue: '1', 
    		checked: true,
    		listeners:{
    			change: function(field, newValue, oldValue, eOpts ){
    				if(newValue){
    					
    					if(me.checkPercent()){
    						me.flexColumnGrid.getCellEditor = me.specPropertyGridEditFunction;
    					}else{
    						me.checkField.setValue(false);
    					}
    				}else{
    					me.flexColumnGrid.getCellEditor = me.propertyGridEditFunction;
    				}
    			}
    		}
    	});
    	
    	me.flexColumnGrid.getCellEditor = me.specPropertyGridEditFunction;
    	
    	this.formPanel = Ext.create('Ext.form.Panel', {
            frame: true,
            border:false,
            bodyBorder: false,
            header:false,
            width: 340,
            bodyPadding: 5,

            fieldDefaults: {
                labelAlign: 'left',
                labelWidth: 150,
                anchor: '100%'
            },

            items: this.items
        });

    	
    	if(type=="new"){
    		title = lang.dashboardedit.newColumn;
    		this.buttonTitle = lang.dashboardedit.add;
    	}else{
    		title =  (index+1)+". "+lang.dashboardedit.column +" "+lang.dashboardedit.properties;
    		this.buttonTitle = lang.dashboardedit.apply;	
    	}
    	
    	this.callParent([{
    		title: title,
    		buttonAlign: 'center',
    		items: [me.formPanel],
    		width: 345,
    		height: 160,
    		layout: 'fit',
    		frame: false,
    		border: false,
    		modal: true,
    		listeners:{
    			destroy: function(){
    				if(type=="new" && !me.saved){
    		    		for(var i = index; i<this.columns.original.originalCols.length; i++){			
    		    			this.columns.original.originalCols[i] = this.columns.original.originalCols[i+1];
    		    			this.columns.original.cols[i] = this.columns.original.cols[i+1];
    		    		}
    		    		this.columns.original.cols.pop();
    		    		this.columns.original.originalCols.pop();
    		    	}
    			}
    		},
    		buttons:[{ 
    			text: me.buttonTitle, 
    			handler: function() {
    				if(type=="new"){
    					
    					me.columns.current.cols = me.reparPercents(me.columns.current.originalCols);
    					columnEditor.originalCols = me.columns.current.originalCols;
    					columnEditor.cols = me.columns.current.cols;
    					
    					columnEditor.dragpanel.insertColumn(index+1);
    					
    					    					
    					columnEditor.addNewColumn(index);
    					me.saved = true;
    					me.hide();
        				me.destroy();
    				}else{
    					if(me.checkPercent()){
    						
    						me.columns.current.cols = me.reparPercents(me.columns.current.originalCols);
        					columnEditor.originalCols = me.columns.current.originalCols;
        					columnEditor.cols = me.columns.current.cols;
        					columnEditor.resizeDivs(columnEditor.cols);
        					columnEditor.refreshDivs(columnEditor.cols);
        					columnEditor.dashboard.refreshDashboard(columnEditor.originalCols, columnEditor.cols);
        					
        					me.saved = true;
        					
        					me.hide();
            				me.destroy();
    					}
    					
    				}
    			} 
    		}]
    	}]);    	
    	
    	this.formPanel.add(this.simpleCombo);
    	this.formPanel.add(this.widthField);
		this.formPanel.add(this.flexColumnGrid);
		this.formPanel.add(this.checkField);
		this.formPanel.add(this.minWidthField);
		
    	
    	if(me.columns.original.originalCols[index].type=="flex"){
    		this.refreshFlex();
	   	}else{
	   		this.refreshFix();
	   	}
    	
    },
	refreshFlex : function(){
		this.flexColumnGrid.setVisible(true);
		this.widthField.setVisible(false);
		this.minWidthField.setVisible(true);
		this.checkField.setVisible(true);
		this.setHeight(300);
	},
	refreshFix : function(){
		this.flexColumnGrid.setVisible(false);
		this.widthField.setVisible(true);
		this.minWidthField.setVisible(false);
		this.checkField.setVisible(false);
		this.setHeight(180);
	},
	
	checkPercent : function(){
		var allPercents  = 0;
		for(var i in this.columns.current.originalCols){
			if(this.columns.current.originalCols[i].type == "flex"){
				allPercents += parseInt(this.columns.current.originalCols[i].width);
			}
		}
		if(allPercents != 100){
			var text = lang.messages.allPercentError+lang.messages.currentPercent+allPercents+".";
			Ext.Msg.alert(lang.error, text);
		}
		
		
		return allPercents==100;
	},
	
	/**
	 * Eredetileg flex oszlop átváltása fix-re
	 */
	changeFlexToFix : function(){
		
		this.changePercentToPixel(this.columns.original, this.index, this.columns.current);
		
		this.widthField.setValue(this.columns.current.cols[this.index].width);
		this.columns.current.originalCols[this.index].type = "fix";
		this.columns.current.originalCols[this.index].width = this.columns.current.cols[this.index].width;
	},
	
	/**
	 * Eredetileg fix oszlop átváltása flexre.
	 * táblázatba be kell tenni ezt az elemet is, de úgy hogy előbb számoljuk át %-ra az értékét
	 */
	changeFixToFlex : function(){
		this.changePixelToPercent(this.columns.original, this.index, this.columns.current);
		
		//%-ok benne vannak a current columns-ban
		
		var propertyNames = {}; 
		var propertySources = {}; 
		for(var c=0; c<this.columns.current.originalCols.length; c++){
			if(this.columns.current.originalCols[c].type=="flex"){
				propertyNames[c] = (c+1)+". "+lang.dashboardedit.column;
				propertySources[c] = parseInt(this.columns.current.originalCols[c].width);
				this.flexColumnGrid.sourceConfig[c] = {displayName:(c+1)+". "+lang.dashboardedit.column, type:"flex"};
			}
		}
		this.flexColumnGrid.propertyNames=propertyNames;
		this.flexColumnGrid.setSource(propertySources);
		
		this.columns.current.cols = this.reparPercents(this.columns.current.originalCols);
	},
	
	/**
	 * Eredetileg flex, de azóta fix-re váltott, visszaváltás flex-re
	 */
	redoFlex: function(){
		this.changeFixToFlex();
	},
	
	
	/**
	 * Eredetileg fix, de azóta flexre váltott, visszaváltás fix-re
	 */
	redoFix: function(){
		this.changeFlexToFix();
	},
	
	propertyGridEditFunction :  function(record, column) {
        	var me = this,
                propName = record.get(me.nameField),
                val = record.get(me.valueField);
            if (Ext.isDate(val)) {
                editor = me.editors.date;
            } else if (Ext.isNumber(val)) {
                editor = me.editors.number;
            } else if (Ext.isBoolean(val)) {
                editor = me.editors['boolean'];
            } else {
                editor = me.editors.string;
            }

            // Give the editor a unique ID because the CellEditing plugin caches them
            editor.editorId = propName;
            return editor;
        
    },
    specPropertyGridEditFunction : function(record, column) {

        if(record.internalId == this.columnIndex){
        	var me = this,
                propName = record.get(me.nameField),
                val = record.get(me.valueField);
             if (Ext.isDate(val)) {
                editor = me.editors.date;
            } else if (Ext.isNumber(val)) {
                editor = me.editors.number;
               
            } else if (Ext.isBoolean(val)) {
                editor = me.editors['boolean'];
            } else {
                editor = me.editors.string;
            }

            editor.editorId = propName;
            return editor;
        }else{
        	return null;
        }
    },
	propertyChange : function(source, recordId, value, oldValue, eOpts){
		me = this;
		if(me.checkField.value){
			/*
			 * Az összes többi oszlop %-át kell változtatni úgy hogy az arányuk megmaradjon
			 */
	//		oldValue = parseInt(me.columns.original.originalCols[recordId].width);
			var diff = oldValue-value;
			
			var otherPercents = 0;
			for(var i=0; i<me.columns.original.originalCols.length; i++){
				if(me.columns.original.originalCols[i].type=="flex" && i!=recordId){
					otherPercents += parseInt(me.columns.original.originalCols[i].width);
				}
			}
			var rateArray = [];
			for(var i=0; i<me.columns.original.originalCols.length; i++){
				if(me.columns.original.originalCols[i].type=="flex" && i!=recordId){
					rateArray[i] = parseInt(me.columns.original.originalCols[i].width)/otherPercents;
				}
			}
			
			var allPercent = 0;
			for (var i in me.flexColumnGrid.source){
				if(i!=recordId){
					me.flexColumnGrid.source[i] =  Math.round((100 - value) * rateArray[i]);
			//		me.flexColumnGrid.source[i] = parseInt(me.columns.original.originalCols[i].width) + Math.round(diff*rateArray[i]);
				}
				allPercent += me.flexColumnGrid.source[i];
				me.columns.current.originalCols[i].width = me.flexColumnGrid.source[i]+"%";
			}
			
			
			var i=0;
			while(allPercent<100){
				var index = i % me.columns.current.originalCols.length;
				if(me.columns.current.originalCols[index].type=="flex"){
					me.columns.current.originalCols[index].width = parseInt(me.columns.current.originalCols[index].width)+(1)+"%";
					me.flexColumnGrid.source[i]++;
					allPercent++;
				}
				i++;
			}
			
			while(allPercent>100){
				var index = i % me.columns.current.originalCols.length;
				if(me.columns.current.originalCols[index].type=="flex"){
					me.columns.current.originalCols[index].width = parseInt(me.columns.current.originalCols[index].width)-(1)+"%";
					me.flexColumnGrid.source[index]--;
					allPercent--;
				}
				i++;
			}
			
			
			me.flexColumnGrid.setSource(me.flexColumnGrid.source);
		
		}else{
			me.columns.current.originalCols[recordId].width = value+"%";
		}
		me.columns.current.cols = me.reparPercents(me.columns.current.originalCols);
	},
	
	reparPercents : function(options){
		var pixels = 0;
		var config = {
				cols:[]
		};
		for(var i in options){
			config.cols[i]= {};
			config.cols[i].type = options[i].type;
			config.cols[i].width = options[i].width;
			config.cols[i].minWidth = options[i].minWidth;
		}
		
		for(var i in config.cols){
			if(config.cols[i].type=="fix"){
				pixels += parseInt(config.cols[i].width);
			}
		}
		
		var fullScreen = this.fullScreen;
		fullScreen -= pixels;
		
		for(var i in config.cols){
			if(config.cols[i].type=="flex"){
				config.cols[i].width = parseInt(config.cols[i].width)*fullScreen/100+"px";
				if(parseInt(config.cols[i].width)<parseInt(options[i].minWidth)){
					config.cols[i].width = options[i].minWidth;
				}
			}
		}
		
		
		
		return config.cols;
	},
	
	/**
	 * van egy aktuális oszlopunk, jelenleg px-ben
	 * a többi eredetileg %-os oszlop pixel összegéhez hozzáadjuk az aktuális oszlop pixelszámát
	 * @param options
	 * @returns
	 */
	
	changePixelToPercent : function(original, newFlexIndex, current){
		totalWidth = parseInt(current.cols[newFlexIndex].width);
		for(var i = 0; i<original.cols.length; i++){
			if(original.cols[i].type == "flex"){
				totalWidth += parseInt(original.cols[i].width);
			}
		}
		
		current.originalCols[newFlexIndex].width = Math.round(parseInt(current.cols[newFlexIndex].width)/(totalWidth/100))+"%";
		current.originalCols[newFlexIndex].minWidth = "0px";
		
		var allPercent = 0;
		for(var i = 0; i<current.originalCols.length; i++){
			if(current.originalCols[i].type == "flex"){
				current.originalCols[i].width = Math.round(parseInt(current.cols[i].width)/(totalWidth/100))+"%";
				allPercent += parseInt(current.originalCols[i].width);
			}
		}
		allPercent+=parseInt(current.originalCols[newFlexIndex].width);
		current.originalCols[newFlexIndex].type = "flex";
		
		var i=0;
		while(allPercent<100){
			var index = i % current.originalCols.length;
			if(current.originalCols[index].type=="flex"){
				current.originalCols[index].width = parseInt(current.originalCols[index].width)+(1)+"%";
				
				allPercent++;
			}
			i++;
		}
		
		while(allPercent>100){
			var index = i % current.originalCols.length;
			if(current.originalCols[index].type=="flex"){
				current.originalCols[index].width = parseInt(current.originalCols[index].width)-(1)+"%";
				
				allPercent--;
			}
			i++;
		}		
	},
	
	
	/**
	 * egye %-os oszlopból pixeles lesz.
	 * A többi %-os oszlop % értéke változik, hogy ezután is 100%-ot tehesenek ki
	 * @param original
	 * @param newFlexIndex
	 * @param current
	 */
	changePercentToPixel : function(original, newFixIndex, current){
		totalWidth = - parseInt(current.cols[newFixIndex].width);
		for(var i = 0; i<original.cols.length; i++){
			if(original.cols[i].type == "flex"){
				totalWidth += parseInt(original.cols[i].width);
			}
		}
		
		//totalWidth tartalmazza a most megváltozott oszlopon kívül a többi %-os oszlop valódi szélességét
		
		current.originalCols[newFixIndex].width = current.cols[newFixIndex].width;
		current.originalCols[newFixIndex].type = "fix";
		
		var allPercent = 0;
		for(var i = 0; i<current.originalCols.length; i++){
			if(current.originalCols[i].type == "flex"){
				current.originalCols[i].width = Math.round(parseInt(current.cols[i].width)/(totalWidth/100))+"%";
				allPercent += parseInt(current.originalCols[i].width);
			}
		}
		
		var i=0;
		while(allPercent<100){
			var index = i % current.originalCols.length;
			if(current.originalCols[index].type=="flex"){
				current.originalCols[index].width = parseInt(current.originalCols[index].width)+(1)+"%";
				
				allPercent++;
			}
			i++;
		}
		
		while(allPercent>100){
			var index = i % current.originalCols.length;
			if(current.originalCols[index].type=="flex"){
				current.originalCols[index].width = parseInt(current.originalCols[index].width)-(1)+"%";
				
				allPercent--;
			}
			i++;
		}		
	}
});

// @tag dashboard-layout
/**
 * Oszlop zörlés, tulajdonságk előhozása
 */
Ext.require('Ext.window.MessageBox');

Ext.define('NV.dashboard.layout.dashboard.panels.columnEditor.InnerColumnPanel', {
	requires:[
	         'NV.dashboard.layout.dashboard.panels.columnEditor.ColumnDialogWindow'],
	extend: 'Ext.panel.Panel',
	constructor: function(i, columnEditor){
		var myself = this;
		this.callParent([{
			cls: "columnEditorinnerDiv",
			bodyCls: "columnEditorWindow2",
			frame:true,
			title: (parseInt(i)+1) + ". "+lang.dashboardedit.column,
			header: {
				divindex: parseInt(i)+1
			},
			divindex: parseInt(i)+1,
			tools:[
			{
			    type:'gear',
			    tooltip: 'Settings',
			    handler: function(event, toolEl, panel){
			    	Ext.create('NV.dashboard.layout.dashboard.panels.columnEditor.ColumnDialogWindow', "edit",panel.divindex-1, columnEditor).show();
			    }
			},
			       {
			    type:'minus',
			    tooltip: 'Safe delete',
			    handler: function(event, toolEl, headerPanel, tool){
			    	if(!columnEditor.checkMinOneFlex(headerPanel.divindex-1)){
			    		Ext.Msg.alert(lang.error, lang.dashboardedit.minOneFlex);
			    		return;
			    	}
			    	if(columnEditor.dragpanel.checkColumn(headerPanel.divindex)){
			    		var text = lang.dashboardedit.hasContent;
						Ext.Msg.alert(lang.error, text);
						return;

			    	}else{
			    //		columnEditor.dragpanel.deleteColumn(headerPanel.divindex, false);
			    		myself.deleteColumn(columnEditor, headerPanel.divindex-1);
			    	}
			    	
			    }
			},
			{
			    type:'close',
			    tooltip: 'Force delete',
			    // hidden:true,
			    handler: function(event, toolEl, headerPanel, tool){
			    	if(!columnEditor.checkMinOneFlex(headerPanel.divindex-1)){
			    		Ext.Msg.alert(lang.error, lang.dashboardedit.minOneFlex);
			    		return;
			    	}
			//    	columnEditor.dragpanel.deleteColumn(headerPanel.divindex, true);
			        myself.deleteColumn(columnEditor, headerPanel.divindex-1);
			    }
			}
			],
			html: "<p>"+columnEditor.dragpanel.originalOptions.cols[i].width+"</p>"
		}]);
	},
	deleteColumn: function(columnEditor, divindex){
		//oszlopokat is meg kell változtatgatni az új felállás alapján
		
		columnEditor.modifiedColumns[divindex].deleted = true;
		
	}

});

// @tag dashboard-layout
/**
 * oszlopok csúszkás mozgatásának megvalósítása
 */


Ext.define('NV.dashboard.layout.dashboard.panels.columnEditor.ColumnPanel', {
	extend: 'Ext.panel.Panel',
	constructor: function(i, me){
		this.callParent([{
			divindex: i,
			header:false,
			width: parseInt(me.modifiedColumnsPx[i].width)-1,
			frame: false,
			padding: '0 2 0 2',
			margin:'20 0 0 0',
			layout: {
				type:"fit",
				align: "stretch"
			},
			border: false,
			cls: "columnEditOuterDiv",
			bodyCls: "columnEditorWindow2",
			resizable:{
				transparent:false,
			    dynamic : false,
			    listeners: {
			    	 
					resize: function(resizer, width, height, e, eOpts ){
						if(me.modifiedColumns[parseInt(resizer.target.divindex)+1].type=="fix" && me.modifiedColumns[parseInt(resizer.target.divindex)].type=="fix"){
							var diff = width-parseInt(me.modifiedColumnsPx[resizer.target.divindex].width);
							me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width = parseInt(me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width)-diff+"px";
							me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width = parseInt(me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width)+diff+"px";
							
							me.modifiedColumns[parseInt(resizer.target.divindex)+1].width = me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width;
							me.modifiedColumns[parseInt(resizer.target.divindex)].width = me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width;
							
							me.resizeDivs(me.modifiedColumnsPx);
							me.refreshDivs(me.modifiedColumnsPx);
						}
						if(me.modifiedColumns[parseInt(resizer.target.divindex)+1].type=="flex" && me.modifiedColumns[parseInt(resizer.target.divindex)].type=="flex"){
							var diff = width-parseInt(me.modifiedColumnsPx[resizer.target.divindex].width);
							me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width = parseInt(me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width)-diff+"px";
							me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width = parseInt(me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width)+diff+"px";
							
							//a 2 flex aránya változik csak, ki kell számolni a diff-et %-ban, és aszerint kell változtatni az oszlopok %-át
							var fullscreen = me.dashboard.view.width;
							var diffPercent = Math.round(diff/(parseInt(fullscreen)/100));
							
							me.modifiedColumns[parseInt(resizer.target.divindex)+1].width = parseInt(me.modifiedColumns[parseInt(resizer.target.divindex)+1].width)-diffPercent+"%";
							me.modifiedColumns[parseInt(resizer.target.divindex)].width = parseInt(me.modifiedColumns[parseInt(resizer.target.divindex)].width)+diffPercent+"%";
							
							me.resizeDivs(me.modifiedColumnsPx);
							me.refreshDivs(me.modifiedColumnsPx);
						}
						if(me.modifiedColumns[parseInt(resizer.target.divindex)].type=="fix" && me.modifiedColumns[parseInt(resizer.target.divindex)+1].type=="flex"){
							var diff = width-parseInt(me.modifiedColumnsPx[resizer.target.divindex].width);
						
							me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width = parseInt(me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width)+diff+"px";
							me.modifiedColumns[parseInt(resizer.target.divindex)].width = me.modifiedColumnsPx[parseInt(resizer.target.divindex)].width;

							/*
							 * a fix oszlop mérete annyival változott amennyivel alrébb húztuk, ez megvan
							 * végig kell menni az egymás mellett flex oszlopokon. kiszámoljuk hogy mennyi helyük lett így összesen.
							 * pl dashbord: 1400px width,  (200px, 25%,25%,25%,200px,25%) 
							 * 1) össze kell adni ajobb oldalon taláható egymás mellett flex-ek régi szélességét
							 */
							
							var flexWidth = 0;
							for(var i=parseInt(resizer.target.divindex)+1; i<me.modifiedColumnsPx.length; i++){
								if(me.modifiedColumnsPx[i].type == "flex"){
									flexWidth+=parseInt(me.modifiedColumnsPx[i].width);
								}else{
									break;
								}
							}
							flexWidth-=diff;
							
							flexTotalPercent = 0;
							for(var i=parseInt(resizer.target.divindex)+1; i<me.modifiedColumns.length; i++){
								if(me.modifiedColumns[i].type == "flex"){
									flexTotalPercent += parseInt(me.modifiedColumns[i].width);
								}else{
									break;
								}
							}
							
							var allFlexWidth = 0;
								for(var i=0; i<me.modifiedColumnsPx.length; i++){
									if(me.modifiedColumnsPx[i].type == "flex"){
										allFlexWidth+=parseInt(me.modifiedColumnsPx[i].width);
									}
								}
							allFlexWidth -=diff;
							
							for(var i=parseInt(resizer.target.divindex)+1; i<me.modifiedColumns.length; i++){
								if(me.modifiedColumns[i].type == "flex"){
									me.modifiedColumnsPx[i].width = (flexWidth/flexTotalPercent)*parseInt(me.modifiedColumns[i].width);
								
								}else{
									break;
								}
							}
							
							for(var i=0; i<me.modifiedColumns.length; i++){
								if(me.modifiedColumns[i].type == "flex"){
									
									me.modifiedColumns[i].width = Math.round(parseInt(me.modifiedColumnsPx[i].width)/(allFlexWidth/100))+"%";
								}
							}
							
							me.repairPercents(me.modifiedColumns, parseInt(me.dashboard.view.width));
							me.resizeDivs(me.modifiedColumnsPx);
							me.refreshDivs(me.modifiedColumnsPx);
						}
						if(me.modifiedColumns[parseInt(resizer.target.divindex)].type=="flex" && me.modifiedColumns[parseInt(resizer.target.divindex)+1].type=="fix"){
							var diff = width-parseInt(me.modifiedColumnsPx[resizer.target.divindex].width);
						
							me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width = parseInt(me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width)-diff+"px";
							me.modifiedColumns[parseInt(resizer.target.divindex)+1].width = me.modifiedColumnsPx[parseInt(resizer.target.divindex)+1].width;

							/*
							 * a fix oszlop mérete annyival változott amennyivel alrébb húztuk, ez megvan
							 * végig kell menni az egymás mellett flex oszlopokon. kiszámoljuk hogy mennyi helyük lett így összesen.
							 * pl dashbord: 1400px width,  (200px, 25%,25%,25%,200px,25%) 
							 * 1) össze kell adni ajobb oldalon taláható egymás mellett flex-ek régi szélességét
							 */
							
							var flexWidth = 0;
							for(var i=parseInt(resizer.target.divindex); i>=0; i--){
								if(me.modifiedColumnsPx[i].type == "flex"){
									flexWidth+=parseInt(me.modifiedColumnsPx[i].width);
								}else{
									break;
								}
							}
							flexWidth+=diff;
							
							flexTotalPercent = 0;
							for(var i=parseInt(resizer.target.divindex); i>=0; i--){
								if(me.modifiedColumns[i].type == "flex"){
									flexTotalPercent += parseInt(me.modifiedColumns[i].width);
								}else{
									break;
								}
							}
							
							var allFlexWidth = 0;
								for(var i=0; i<me.modifiedColumnsPx.length; i++){
									if(me.modifiedColumnsPx[i].type == "flex"){
										allFlexWidth+=parseInt(me.modifiedColumnsPx[i].width);
									}
								}
							allFlexWidth +=diff;
							
							for(var i=parseInt(resizer.target.divindex); i>=0; i--){
								if(me.modifiedColumns[i].type == "flex"){
									me.modifiedColumnsPx[i].width = (flexWidth/flexTotalPercent)*parseInt(me.modifiedColumns[i].width);
								
								}else{
									break;
								}
							}
							
							for(var i=0; i<me.modifiedColumns.length; i++){
								if(me.modifiedColumns[i].type == "flex"){
									
									me.modifiedColumns[i].width = Math.round(parseInt(me.modifiedColumnsPx[i].width)/(allFlexWidth/100))+"%";
								}
							}
							
							me.repairPercents(me.modifiedColumns, parseInt(me.dashboard.view.width));
							me.resizeDivs(me.modifiedColumnsPx);
							me.refreshDivs(me.modifiedColumnsPx);
						}
						me.dashboard.refreshDashboard(me.modifiedColumns, me.modifiedColumnsPx);
					}
			    }
			},
			resizeHandles : 'e'
			}]);
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.DashboardColumnEditor',{
	requires: [
	   		'NV.dashboard.layout.dashboard.panels.columnEditor.InnerColumnPanel', 
	   		'NV.dashboard.layout.dashboard.panels.columnEditor.ColumnPanel', 
	   		'NV.dashboard.layout.dashboard.panels.columnEditor.ColumnDialogWindow'
	   		
	   	],
	   	
	items:[],
//	cols: [],
//	originalCols: [],
	
	originalColumns: undefined,
	originalColumnsPx: undefined,
	
	modifiedColumns: undefined,
	modifiedColumnsPx: undefined,
	
	createColumn:function(i){
		var innerPanel = Ext.create('NV.dashboard.layout.dashboard.panels.columnEditor.InnerColumnPanel',i, this);
		var outerPanel = Ext.create('NV.dashboard.layout.dashboard.panels.columnEditor.ColumnPanel',i, this);
		outerPanel.add(innerPanel);
		return outerPanel;
	},
	
	constructor: function(dragpanel, dashboard){
		this.dashboard = dashboard;
		this.dragpanel = dragpanel;
		
		this.originalColumns = this.dragpanel.originalOptions.cols;
		this.originalColumnsPx = this.dragpanel.cols;
		
		this.modifiedColumns = Ext.clone(this.originalColumns);
		this.modifiedColumnsPx = Ext.clone(this.originalColumnsPx);
		
		var me = this;
		
		for(var i = 0; i < this.modifiedColumns.length; i++){
			this.items.push(this.createColumn(i));
		}
		
		
		this.panel = Ext.create('Ext.panel.Panel', {
	        title: "Edit columns",
			closable:true,
	        header:{
	        	cls: "columnEditorWindowHeader",
	        	listeners: {
	        		render: function(){
	        			this.el.on('mousemove',function(evt){
	        				var originalPos = evt.browserEvent.clientX + me.dashboard.columnEditorHolder.body.getScrollLeft() - me.panel.body.dom.offsetLeft;
	        				console.log(originalPos);
	        				var before = 0;
	        				var sum = 0;
	        				for(var i in me.modifiedColumns){
	        					if(sum + parseInt(me.modifiedColumns[i].width) > originalPos){
	        						if(originalPos-sum < parseInt(me.modifiedColumns[i].width) - (originalPos-sum)){
	        							before = i;
	        						}else{
	        							before = parseInt(i) + 1;
	        						}
	        						break;
	        					}else{
	        						sum+=parseInt(me.modifiedColumns[i].width);
	        					}	
	        				}
	        				
	        				var x=0;
	        				for(var i=0; i<before; i++){
	        					x += parseInt(me.modifiedColumns[i].width);
	        				}
	        				x -= me.dashboard.columnEditorHolder.body.getScrollLeft();
	        				console.log(x - 10);
	        				me.showNewcolPin(x - 10, before);
	        				}
	        			);
	        			
	        		}
	        	}
	        },
	        closeAction:'hide',
	        draggable: false,
	        flex:1,
	        resizable: false,
	        frame:false,
	        border:false,
	        layout: {
	            type: 'hbox',
	            align: 'stretch'
	        },
	        cls: "columnEditorWindow",
	        bodyCls: "columnEditorWindow",
	        listeners : {
				resize : function(panel, width, height, oldWidth, oldHeight, eOpts){
	//				panel.doLayout();
					if(width!=oldWidth){
						me.repairPercents(me.modifiedColumns, me.dashboard.view.width);
						me.resizeDivs(me.cols);
					}
				},
				/*show : function(){
					 this.setWidth(dragpanel.panel.body.dom.offsetWidth);
				     this.setHeight(dragpanel.panel.body.dom.offsetHeight-27);
				},*/
				hide : function(){
					try{
						this.dashboard.columnEditorHolder.hide();
						this.dashboard.dragpanel.show();
						Ext.get('mouseOverDiv').remove();
					}catch(e){
						
					}	
				},
				scope:this
			},
	        items: me.items
		});
	},
	show: function(){
		
	},
	
	repairPercents: function(options, width){
		var pixels = 0;
		var minWidth = 0;
		var config = {
				cols:[]
		};
		for(var i in options){
			config.cols[i]= {};
			config.cols[i].type = options[i].type;
			config.cols[i].width = options[i].width;
			config.cols[i].minWidth = options[i].minWidth;
		}
		
		for(var i in config.cols){
			if(config.cols[i].type=="fix"){
				pixels += parseInt(config.cols[i].width);
				minWidth += parseInt(config.cols[i].width);
			}else{
				minWidth += parseInt(config.cols[i].minWidth);
			}
		}
		
		
		
		var fullScreen = minWidth>width?minWidth:width;
		fullScreen -= pixels;
		
		for(var i in config.cols){
			if(config.cols[i].type=="flex"){
				config.cols[i].width = parseInt(config.cols[i].width)*fullScreen/100+"px";
				if(parseInt(config.cols[i].width)<parseInt(options[i].minWidth)){
					config.cols[i].width = options[i].minWidth;
				}
			}
		}
		
		this.cols = config.cols;
		this.panel.minWidth = minWidth;
	},
	
	resizeDivs: function(cols){
		var me = this;
		for(var i in cols){
			this.items[i].setWidth(parseInt(cols[i].width));
		}
	},
	refreshDivs: function(cols){
		var me = this;
		for(var i in cols){
			this.items[i].items.items[0].body.dom.innerHTML = "<p>"+this.modifiedColumns[i].width+"</p>";
		}
	},
	
	task: undefined,
	showNewcolPin: function(x, index){
		var me = this;
		try{
			
			Ext.get('mouseOverDiv').remove();
		}catch(e){
			
		}
		var div = {tag:'div', id:'mouseOverDiv', cls:'columnAddPin', style:{
																		top:(this.panel.body.dom.offsetTop-5)+"px", 
																		left:(x-4)+"px",
																		"z-index":20000
																	}
			};
		
		Ext.DomHelper.append(Ext.getBody(),div);
		Ext.get('mouseOverDiv').on('mouseover', function(evt){
	
			me.task.cancel();
		});
		Ext.get('mouseOverDiv').on('mouseout', function(evt){
			Ext.get('mouseOverDiv').remove();
			
		});
		
		Ext.get('mouseOverDiv').on('click', function(evt){
			
			Ext.create('NV.dashboard.layout.dashboard.panels.columnEditor.ColumnDialogWindow', "new", index, me).show();
		});
		
		
		this.task = new Ext.util.DelayedTask(function(){
			try{
				
				Ext.get('mouseOverDiv').remove();
			}catch(e){
				
			}
		});
		
		this.task.delay(5000);
	},
	
	applyModifiedColumns: function(){
		for(var i=0; i<this.modifiedColumns.length; i++){
			if(this.modifiedColumns[i].isnew){//új oszlopokat sorban hozzá kell adni egyesével
				this.addNewColumn(i);
				this.modifiedColumns[i].isnew = false;
			}
		}
		
		this.resizeDivs(this.modifiedColumns);
		this.refreshDivs(this.modifiedColumns);
	},
	
	saveConfig: function(){
		
		for(var i=0; i<this.modifiedColumns.length; i++){
			this.originalColumns[i] = this.modifiedColumns[i];
		}
		this.dashboard.refreshDashboard(this.originalColumns);
	},
	
	addNewColumn: function(index, column){

		for(var i = this.items.length; i>index; i--){			
			this.items[i] = this.items[i-1];
		}
		this.items[index] = undefined;
		this.items[index] = this.createColumn(index);
		
		//this.panel.add(this.items[index]);
		this.panel.insert(parseInt(index), this.items[index]);
		for(var i in this.items){
			if(i>index){
				this.items[i].items.items[0].header.divindex++;
				this.items[i].items.items[0].divindex++;
				this.items[i].divindex++;
				this.items[i].items.items[0].setTitle((this.items[i].items.items[0].divindex)+". "+lang.dashboardedit.column);
			}
		}

	},
	checkMinOneFlex: function(removeId){
		for(var i=0; i < this.cols.length; i ++){
			if(i != removeId && this.cols[i].type == 'flex' && this.cols[i].deleted == false){
				return true;
			}
		}
		return false;
	},
	
	deleteColumn: function(divindex){
		if(this.modifiedColumns[divindex].type == "flex"){
			minusPercent = parseInt(this.modifiedColumns[divindex].width);
			flexNumber = 0;
			for(var i = 0; i < this.modifiedColumnsPx.length; i ++){
				if(this.modifiedColumns[i].type == "flex" && i != divindex){
					flexNumber++;
				}
			}
			
			var allPercent = 0;
			for(var i = 0; i < this.modifiedColumnsPx.length; i ++){
				if(this.modifiedColumns[i].type == "flex"){
					if(i != divindex){
						this.modifiedColumns[i].width = parseInt(parseInt(this.modifiedColumns[i].width)+(minusPercent/flexNumber))+"%";
						allPercent+=parseInt(this.modifiedColumns[i].width);
					}
				}
			}	
			
			/*
			 * 100 legyen a %-ok összege
			 */
			
			var i=0;
			while(allPercent < 100 && flexNumber != 0){
				var index = i % this.modifiedColumns.length;
				if(index != divindex && this.modifiedColumns[index].type == "flex"){
					this.modifiedColumns[index].width = parseInt(this.modifiedColumns[index].width)+(1)+"%";
    				allPercent ++;
				}
				i ++;
			}
		}
		
		Ext.Array.erase(this.modifiedColumns, divindex, 1);
		Ext.Array.erase(this.modifiedColumnsPx, divindex, 1);
		this.panel.remove(divindex);
		for(var i in this.items){
			if(i > divindex){
				this.items[i].divindex --;
				this.items[i].items.items[0].header.divindex--;
				this.items[i].items.items[0].divindex--;
				this.items[i].items.items[0].setTitle((this.items[i].items.items[0].divindex)+". "+lang.dashboardedit.column);
			}
		}		
		Ext.Array.erase(this.items, divindex, 1);
		
		this.repairPercents(this.modifiedColumns, parseInt(this.dashboard.view.width));
		this.resizeDivs(this.modifiedColumnsPx);
		this.refreshDivs(this.modifiedColumnsPx);
		this.dashboard.refreshDashboard(this.modifiedColumns, this.modifiedColumnsPx);
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.resolvers.UrlParameterResolver', {
	singleton: true,
	
	resolve: function(paramName){
		var array = document.location.search.substr(document.location.search.search("/?")+1).split("&");
		var ret;
		for(var i=0; i<array.length; i++){
			if(array[i].match("=")){
				var command = array[i].split("=")[0];
				var url = array[i].split("=")[1];
				if(command.match(paramName)){
					if(command != paramName){	//csak match van, objektumba kell rendezni 
						if(!ret){
							ret = {};
						}
						ret[command.substring(command.indexOf("_")+1)] = decodeURI(url);
					}else{
						if(url == "false"){return false;}
						return decodeURI(url);
					}
					
				}
			}
		}
		if(ret){
			return ret;
		}
		return null;
	}

});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.Dashboard', {
	 requires: [
//		'NV.dashboard.layout.dashboard.panels.DragAndDropPanel', 
		'Ext.panel.Panel', 

		'NV.dashboard.layout.dashboard.panels.DashboardColumnEditor',
		'NV.dashboard.layout.dashboard.resolvers.UrlParameterResolver'
	],
	
	dragpanel: undefined,
	buttonPanel: undefined,
	columnEditor : undefined,
	model: undefined,
	view : undefined,

	/**
	 * render the view to an extjs panel
	 */
	render: function(elem){
		
		if (this.model.get('panelType') == 'panel') {
		
    		if (elem.xtype == 'window') {
    			if (elem.rendered) {
    				this.view.setWidth(elem.getWidth()-12);
    				this.view.setHeight(elem.getHeight()-32);
    			} else {
    				elem.addListener('afterrender',function(){
    					this.view.setWidth(elem.getWidth()-12);
    					this.view.setHeight(elem.getHeight()-32);
    				},{view:this.view, elem: elem});
    			}
    			
    			elem.on('resize', function (elem, w, h, e) {
                    this.view.setWidth(elem.getWidth()-12);
                    this.view.setHeight(elem.getHeight()-32);
                }, this);
    		} else {
    		    // panel?
    		}
		
		}
		
		elem.on('close', function (elem, e) {
            if (Ext.isDefined(Ext.getCmp(this.view.id+ "-floatingGear"))) {
                Ext.getCmp(this.view.id+ "-floatingGear").destroy(); // destroys floating gear on close
            }
        }, this);
		
		elem.add(this.view);
	},
	
	constructor: function(model){
		this.model = model;
		var me = this;
		this.portlets = {};
		this.containers = {};
		this.observedPortlets = {};
		this.paramUserControllsArray = [];
		
		me.originalModel = Ext.clone(model);

		var viewDashboardId = this.model.get("dashboardID");
		while(Ext.get('viewport'+viewDashboardId)){
			viewDashboardId = viewDashboardId+"1";
		}
		//unique on the page
		this.viewId = viewDashboardId;
		
		var dragpanelOptions = {
				id : viewDashboardId,
				cols : this.model.get("cols"),
				editable: this.model.get("editable"),
				row: this.model.get("row"),
				dashboard: this
				
		};
		me.dragpanel = Ext.create(this.model.get('layoutClass'), dragpanelOptions);

		if(this.model.get("panelType") == 'viewport'){
			this.view = Ext.create('NV.dashboard.layout.view.dashboard.DashboardView',{
				dashboardId:  viewDashboardId,
	//			minWidth : this.dragpanel.minWidth,
				dragpanel: me.dragpanel,
				dashboard:this,
				listeners: {
					afterrender:function(panel){
						
						this.fillMyParameters();
						
						this.orderPanels();
						
						for(var p in this.model.get("containers")){
							this.createContainer(p, this.model.get("containers")[p]);
						}
						for(var p = 0; p < this.model.get("panels").length; p++){
							this.createPortlet(this.model.get("panels")[p]);
						}
						this.insertPortlets();
						if(this.model.get("editable")){
							
							Ext.create('Ext.Component',{
								id: panel.id + "-floatingGear",
							 	cls: 'floatingGear',
								width:80,
								height:80,
								renderTo:panel.el,
								listeners: {
									render: function(component){
										component.el.on('click', function(event, target){
											this.showSettingsMenu(target, panel);
									    }, this);
									},
									scope:this
								}
							});
							
						}
					},
					scope:this
				}
			});
		}else{
			this.view = Ext.create('NV.dashboard.layout.view.dashboard.DashboardPanelView',{
				dashboardId: viewDashboardId,
				minWidth : this.dragpanel.minWidth,
				dragpanel: me.dragpanel,
				dashboard:this,
				listeners: {
					afterrender:function(panel){
						
						panel.add(this.dragpanel);
						this.fillMyParameters();
						
						this.orderPanels();
						for(var p in this.model.get("containers")){
							this.createContainer(p, this.model.get("containers")[p]);
						}
						for(var p = 0; p < this.model.get("panels").length; p++){
							this.createPortlet(this.model.get("panels")[p]);
						}
						this.insertPortlets();
						if(this.model.get("editable")){
							
							Ext.create('Ext.Component',{
								id: panel.id + "-floatingGear", 
							 	cls: 'floatingGear',
								width:80,
								height:80,
								renderTo:panel.el,
								listeners: {
									render: function(component){
										component.el.on('click', function(event, target){
											this.showSettingsMenu(target, panel);
									    }, this);
									},
									scope:this
								}
							});
							
						}
					},
					scope:this
				}
			});
		}
		
		

	},

	initDownloadForm: function(){
		this.downloadFrame = Ext.getBody().createChild({
            tag: 'iframe'
                   , cls: 'x-hidden'
                   , id: 'iframe'
                   , name: 'iframe'
        });

        this.downloadForm = Ext.getBody().createChild({
            tag: 'form'
                   , cls: 'x-hidden'
                   , id: 'form'
                   , target: 'iframe'
        });
	},
	
	showSettingsMenu : function(target, panel){
		var iconSize = 80;
		var icons = [];
		
		var image = Ext.create('Ext.Img', {
		    src: 'resource/dashboard-layout/image/save.png',
		    width: iconSize,
		    height: iconSize,
		    margin: 5,
		   	flex:0	  
		});			

		image.addListener("click", function(a,b,c,d){ 
        	this.savePanels();
			this.modalBox.hide();
			this.popupMenu.hide();
			
        }, this, {element: 'el'});
		
		icons.push(image);
		
		
		var image = Ext.create('Ext.Img', {
		    src: 'resource/dashboard-layout/image/edit.png',
		    width: iconSize,
		    height: iconSize,
		    margin: 5,
		   	flex:0	  
		});			

		image.addListener("click", function(a,b,c,d){ 
			this.editDashboard();
			this.modalBox.hide();
			this.popupMenu.hide();
			
		}, this, {element: 'el'});
		
		icons.push(image);
		
		var image = Ext.create('Ext.Img', {
		    src: 'resource/dashboard-layout/image/plus_orange.png',
		    width: iconSize,
		    height: iconSize,
		    margin: 5,
		   	flex:0	  
		});			

		image.addListener("click", function(a,b,c,d){ 
        	this.showInsertPortletDialog();
			this.modalBox.hide();
			this.popupMenu.hide();
			
        }, this, {element: 'el'});
		
		icons.push(image);
		
		var image = Ext.create('Ext.Img', {
		    src: 'resource/dashboard-layout/image/gear_blue.png',
		    width: iconSize,
		    height: iconSize,
		    margin: 5,
		   	flex:0	  
		});			

		image.addListener("click", function(a,b,c,d){ 
        	this.showAllParameter();
			this.modalBox.hide();
			this.popupMenu.hide();
			
        }, this, {element: 'el'});
		
		icons.push(image);
		
		this.modalBox = Ext.create('Ext.container.Container',{
			cls:'modalBox',
			width: 80,
			height: 80,
			renderTo:panel.el
        });
        
		
		this.modalBox.animate({
			duration: 100,
		    to: {
		        x: panel.el.getAnchorXY()[0],
		        y: panel.el.getAnchorXY()[1],
		        width: panel.el.getWidth(),
				height: panel.el.getHeight()
		    }
		});
		
		this.modalBox.el.on('click', function(event, target){
			this.modalBox.hide();
			this.popupMenu.hide();
	    }, this);
		
		this.popupMenu = Ext.create('Ext.container.Container',{
			cls: 'floatingMenu',
			width:80,
			height:80,
			renderTo:panel.el,
			items: icons,
			layout:{
				type: 'hbox',
				align: 'stretch'
			}
		});
		this.popupMenu.animate({
			duration: 1000,
		    to: {
		        x: panel.el.getWidth() / 2 - 150 + panel.el.getAnchorXY()[0],
		        y: panel.el.getHeight() / 3 + panel.el.getAnchorXY()[1],
		        height:100,
		        width:360
		    }
		});
	},
	
	showInsertPortletDialog: function(){
		if(this.insertPortletDialog==undefined){
			this.insertPortletDialog = Ext.create('NV.dashboard.layout.dashboard.panels.InsertPortletPanel', {dataUrl: this.model.get("urls").portlets});
			this.insertPortletDialog.addListener('selected', function(item){
				
				this.insertPortlet(this.createPortlet({
					originalPortletId:item.get('id'),
					preferedSize: {
						width: item.get('preferedWidth'),
						height: item.get('preferedHeight')
					}
				}));
			}, this);
		}
		this.insertPortletDialog.show();
	},
	
	getOtherPortlets: function(id){
		var portlets = [];
		for(var i in this.portlets){
			
			if(this.portlets[i]!=undefined && i!=id){
				portlets.push({
					name: i,
					label: this.portlets[i].model.get("title")
				});
			}
			
		}
		return portlets;
	},
	
	getPortletOutputs: function(portlet, type, callback, scope){
		if(this.portlets[portlet]){
			this.portlets[portlet].getOutputParameters(type, callback, scope);
		}
		
	},
	
	orderPanels: function(){
		
		var changed = true;
		while(changed){
			changed = false;
			for(var i=0; i<this.model.get("panels").length-1; i++){
				if(this.model.get("panels")[i].savedSize.top>this.model.get("panels")[i+1].savedSize.top){
					var tmp = this.model.get("panels")[i];
					this.model.get("panels")[i] = this.model.get("panels")[i+1];
					this.model.get("panels")[i+1] = tmp;
					changed = true;
				}
			}
		}
	},
	
	createContainer: function(id, config){
		config.dashboard = this;
		this.containers[id] = Ext.create('NV.dashboard.layout.dashboard.Container',config);
	},
	
	createPortlet: function(portletConfig){
		portletModel = Ext.create('NV.dashboard.layout.model.portlet.PortletModel');
		var panel = undefined;
	//	var currSize = this.portlets.length;
		var config = Ext.clone(portletConfig);
		
		portletModel.beginEdit();
		if(config.portletId == undefined){
			portletModel.set('portletId',parseInt(Math.random()*100));
		}
		else{
			portletModel.set('portletId',config.portletId);
		}
		
		portletModel.set('resolvers', portletConfig.resolvers?portletConfig.resolvers:[]);
		portletModel.set('originalPortletId', config.originalPortletId);
		portletModel.set('overridedProperties', config.properties);
		
		config.dashboard = this;
		config.model = portletModel;
		
		try{
			portletModel.set('width', portletConfig.preferedSize.width);
			portletModel.set('height', portletConfig.preferedSize.height); 
		}catch(e){
			portletModel.set('width', 100);
			portletModel.set('height', 100); 
		}
		
		portletModel.endEdit();
		panel = Ext.create('NV.dashboard.layout.dashboard.Portlet', config);
		
		
		
		if(config.visibilityGroup!=undefined && this.containers[config.visibilityGroup]){
			this.containers[config.visibilityGroup].portlets.push(panel);
			if(this.model.get('editable')){
		//		panel.view.setTitle(panel.view.title+" ( invisible ) ");
			}else{
				panel.view.setVisible(this.containers[config.visibilityGroup].visible);
			}
			panel.model.set('hidden',!this.containers[config.visibilityGroup].visible);
		}
		this.portlets[portletModel.get('portletId')] = panel;
		
		if(this.observedPortlets[portletModel.get("portletId")]){//valaki már vár erre a portletre
			for(var i=0; i<this.observedPortlets[portletModel.get("portletId")].length; i++){
				this.observedPortlets[portletModel.get("portletId")][i].portlet.initParameterObserver(portletModel.get("portletId"), this.observedPortlets[portletModel.get("portletId")][i].params);
			}
		}
		
		return panel;
	},
	
	insertPortlets: function(){
		this.dragpanel.initDashboard(this.portlets);
	},
	
	insertPortlet: function(portlet){
		this.dragpanel.addPanel(portlet.getView());
	},
	
	fillPortletParameters: function(){
		
		for(var i in this.portlets){
			this.portlets[i].fillParameters(false);			
		}
	},
	
	savePanels: function(){
		var me = this;
		var datas = {};
		datas.panels = [];
		for(var i in this.portlets){
			if(this.portlets[i]!=undefined){
				datas.panels.push({
					 preferedSize: {
						 width:this.portlets[i].view.width,
						 height:this.portlets[i].view.height
					 },
					 savedSize: this.portlets[i].view.savedPosition,
					 originalPortletId:  this.portlets[i].model.get("originalPortletId"),
					 portletId:  this.portlets[i].model.get("portletId"),
					 resolvers:  this.portlets[i].model.get("resolvers"),
					 properties: this.portlets[i].model.get("overridedProperties"),
					 visibilityGroup: this.portlets[i].model.get("containerId")
				 });
			}
		}
		
		datas.cols = this.model.get("cols");
		datas.row = this.model.get("row");
		
		datas.parameters = Ext.clone(this.model.get("parameters"));
		
		for(var i = 0; i<datas.parameters.length; i++){
			datas.parameters[i].value = datas.parameters[i].defaultValue;
		}
		
		Ext.Ajax.request({
			url :this.model.get('urls').save,
			jsonData: datas,
			success : function(response) {
				var res = Ext.decode(response.responseText);
				if(res.error==undefined){
					Ext.Msg.alert(lang.save, lang.saveSuccess);
				}else{
					Ext.Msg.alert(lang.save, lang.error);
				}
			},
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			}
		});
	},
	
	editDashboard: function(){
		
		if(!this.columnEditor){
			
			this.columnEditor = Ext.create('NV.dashboard.layout.dashboard.panels.DashboardColumnEditor',this.dragpanel,this);
		//	this.view.add(this.columnEditor.panel);
			this.columnEditorHolder = Ext.create('Ext.panel.Panel',{
				layout : {
					type:"fit"
				},
				autoScroll : true,	
				overflowY : 'scroll', 
				overflowX : 'scroll',
				items: this.columnEditor.panel,
				flex:1
			});
			this.view.add(this.columnEditorHolder);
		}
		this.dragpanel.hide();
		this.columnEditor.panel.show();
		this.columnEditorHolder.show();
		
	},
	
	refreshDashboard: function(originalCols){

		this.model.set("cols",originalCols);
		this.dragpanel.refreshBoard();
		
	},
	/**
	 */
	fillMyParameters: function(){
		Ext.Array.sort(this.model.get("parameters"), function(a, b) {
		    if((a.name.toLowerCase()=='from' || a.name.toLowerCase()=='start' || a.name.toLowerCase()=='begin') && (b.name.toLowerCase()=='to' || b.name.toLowerCase()=='end')){
		    	return -1;
		    }
		    if((b.name.toLowerCase()=='from' || b.name.toLowerCase()=='start' || b.name.toLowerCase()=='begin') && (a.name.toLowerCase()=='to' || a.name.toLowerCase()=='end')){
		    	return 1;
		    }
			
			if(a.name.toLowerCase()>b.name.toLowerCase()){
		    	return 1;
		    }else if(a.name.toLowerCase()==b.name.toLowerCase()){
		    	return 0;
		    }else return -1;
			
		});
		var unresolvedParameters = [];
		var needContainerRefresh = false;
		for(var i = 0; i<this.model.get("parameters").length; i++){
			//keressünk az url-ben,minden def value-t felülírunk ha találunk az url-ben
			

			this.model.get("parameters")[i].defaultValue = this.model.get("parameters")[i].value;

			
			var val = NV.dashboard.layout.dashboard.resolvers.UrlParameterResolver.resolve(this.model.get("parameters")[i].name);
			if(val!=undefined){
				//találtunk az url-ben
				this.model.get("parameters")[i].value = val;
				this.model.get("output")[this.model.get("parameters")[i].name] = val;
				
			}
			if(this.model.get("parameters")[i].value==undefined || this.model.get("parameters")[i].value==null){//még nincs értéke
				
				
					//nem találtunk az url-ben, fel kell dobni valami panelt
					unresolvedParameters.push(this.model.get("parameters")[i]);
				
			}else{//már van értéke, tegyük át az outputra
				if(this.model.get("parameters")[i].type=='date' || this.model.get("parameters")[i].type=='datetime'){
					var tmpDate = Ext.create('NV.ext.ux.nv.form.DateTimeField',{
						value:this.model.get("parameters")[i].value
					});
					this.model.get("output")[this.model.get("parameters")[i].name] = tmpDate.getForceLongValue();
				}else{
					this.model.get("output")[this.model.get("parameters")[i].name] = this.model.get("parameters")[i].value;
				}
				
				if(this.model.get("parameters")[i].refreshType == "container"){
					needContainerRefresh = true;
				}
				
			}
		}

		if(needContainerRefresh){
			this.refreshContainersFromServer();
		}
		
		this.showUserInteractParameters(unresolvedParameters);
		
	},
	
	getAllParameterForm: function(){
		var unresolvedParameters = [];
		
		for(var i = 0; i<this.model.get("parameters").length; i++){
			unresolvedParameters.push(this.model.get("parameters")[i]);	
		}

		
		
		this.dashboardSettingsForm = this.getUserInteractParameters(unresolvedParameters);
		return this.dashboardSettingsForm;
	},
	
	showAllParameter : function(){
		var unresolvedParameters = [];
		
		for(var i = 0; i<this.model.get("parameters").length; i++){
			var p = Ext.clone(this.model.get("parameters"))[i];
			if(this.model.get("output")[p.name]!=undefined){
				p.value = this.model.get("output")[p.name];
			}
			unresolvedParameters.push(p);	
		}

		this.showUserInteractParameters(unresolvedParameters);
	},
	
	showUserInteractParameters: function(unresolvedParameters){
		if(unresolvedParameters.length==0) return;

		var w = Ext.create('Ext.window.Window', {
			title: lang.dashboard.dashboardParams,
    		buttonAlign: 'center',
    		width: 345,
   // 		height: 160,
    		layout: 'fit',
    		modal:true,
    		frame: false,
    		border: false,
    		items:[]
		});
		
		var fp = this.getUserInteractParameters(unresolvedParameters);
		w.add(fp);

		
		if(unresolvedParameters.length>0){
			w.show();
		}
	},
	
	getUserInteractParameters: function(unresolvedParameters){
		var dashboard = this;		
		var fp = Ext.create('Ext.form.Panel', {
            frame: true,
            border:false,
            bodyBorder: false,
            header:false,
            flex:1,
            layout:{
            	type:'vbox',
            	align:'stretch'
            },
            bodyPadding: 5,

            fieldDefaults: {
                labelAlign: 'left',
                labelWidth: 90,
                anchor: '100%'
            },
			buttons:[{ 
				text: "OK", 
				handler: function(evt) {
					dashboard.model.beginEdit();
					var needContainerRefresh = false;
					var items = this.findParentByType('form').items.items;
					for(var i = 0; i<items.length; i++){
						for (var j in dashboard.model.get("parameters")){
							if(items[i].name == dashboard.model.get("parameters")[j].name){
								dashboard.model.get("parameters")[j].value = items[i].getValue();
								if(dashboard.model.get("parameters")[j].refreshType=="container"){
									needContainerRefresh = true;
								}
								var output = Ext.clone(dashboard.model.get("output"));
								output[items[i].name] =  items[i].getValue();
								dashboard.model.set("output", output);
							}
						}
						if(dashboard.dashboardSettingsForm){//dashboard settigs on portlet, need refresh!
							for(var j=0; j<dashboard.dashboardSettingsForm.items.items.length; j++){
								if(items[i].name == dashboard.dashboardSettingsForm.items.items[j].name){
									dashboard.dashboardSettingsForm.items.items[j].setValue(items[i].getValue());
								}
							}
						}
					}
					dashboard.model.endEdit();
					if(needContainerRefresh){
						dashboard.refreshContainersFromServer();
					}

					if(this.findParentByType('window')){
						this.findParentByType('window').close();
					}
					
				},
				scope:fp
			}]
        });

		this.paramUserControllsArray = [];
		for(var i in unresolvedParameters){
			var resolver = {};
			var configObject = Ext.clone(unresolvedParameters[i]);
			Ext.apply(configObject, {
				dashboard: this
			});

			if (configObject.type == "boolean") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.BooleanInput', configObject);
			} else if (configObject.type == "float" || configObject.type == "number") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.NumberInput', configObject);
			} else if (configObject.type == "string") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			} else if (configObject.type == "date") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateInput', configObject);
			}else if (configObject.type == "datetime") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateTimeInput', configObject);
			}else if (configObject.type == "list") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput', configObject);
			}else if (configObject.type == "enum") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput', configObject);
			}else if (configObject.type == "enumArray") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', configObject);
			}else if (configObject.type == "interval") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.IntervalInput', configObject);
			}else if (configObject.type == "object") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ObjectInput', configObject);
			}else{
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ComboInput', configObject);
			}
			
			fp.add(resolver.getController());
			this.paramUserControllsArray.push(resolver);
		}
		return fp;
	},
	
	/**
	 * Remove a portlet from dashboard, 
	 * @param id
	 * @param justBack if true, then we need delete only from the dashboard's portlets. (column delete)
	 */
	deletePortlet: function(id, justBack){
		this.portlets[id] = undefined;
		if(!justBack){
			this.dragpanel.deletePanel(id);
		}
	},
	
	refreshContainersFromServer: function(func){
		var parameters = {};
		for (var j in this.model.get("parameters")){
			if(this.model.get("parameters")[j].refreshType=='container'){
				parameters[this.model.get("parameters")[j].name] = this.model.get("parameters")[j].value;
			}
		}
		parameters.objectId = this.model.get("dashboardID");
		Ext.Ajax.request({
			url: this.model.get('urls').visibilityGroupUrl,
			params:parameters,
			method:'GET',
			success: function(response, opts){
				json = Ext.decode(response.responseText);
				if(json.error){
					Ext.Msg.alert("json parser eror", "visibility group refresh error!");
					return;
				}
				for(var i in json.list[0]){
					if(this.containers[i]){
						this.containers[i].setVisibility(json.list[0][i]);
					}
				}
				for(var i=0; i<this.model.get("panels").length; i++){
					this.portlets[this.model.get("panels")[i].portletId].view.savedPosition = this.model.get("panels")[i].savedSize;
					this.portlets[this.model.get("panels")[i].portletId].view.unsavedPosition = this.model.get("panels")[i].savedSize;
				}
				this.dragpanel.moveAllPanelToTop();
				this.dragpanel.refreshBoard();			
			},
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			},
			scope:this
		});
	},
	
	getModel: function(){
		return this.model;
	},
	
	handleDDPanelScroll: function(left, top){
		if(this.columnEditor!=undefined){
			this.columnEditor.panel.setX(this.dragpanel.outerPanel.x-left);				
		}
	},
	
	createNewParameter: function(paramObject){
		this.model.get("parameters").push(paramObject);
	},
	
	stopRefresh : function(){
		for(var i in this.portlets){
			try{
				this.portlets[i].stopRefresh();		
			}catch(e){}
		}
	},
	
	startRefresh: function(){
		for(var i in this.portlets){
			try{
				this.portlets[i].startRefresh();		
			}catch(e){}
		}
	},
	
	addPortletObserver: function(observedPortletId, portlet, parameters){
		if(!this.observedPortlets[observedPortletId]){
			this.observedPortlets[observedPortletId] = [];
		}
		this.observedPortlets[observedPortletId].push({portlet: portlet, params:parameters});
	},
	
	/*
	 * parameter:{key:"someParameter", value:"someValue"}
	 */
	setParameters: function(parameter){
		this.model.beginEdit();
		for(var j in parameter){
			for(var i = 0; i<this.model.get("parameters").length; i++){
				if(this.model.get("parameters")[i].name==j){
					this.model.get("parameters")[i].value=parameter[j];
					var output = Ext.clone(this.model.get("output"));
					output[j] =  parameter[j];
					this.model.set("output", output);
				}
			}
		}
		this.model.endEdit();
	}
});

// @tag dashboard-layout
Ext.require('Ext.Ajax') ;

lang = {};


Ext.define('NV.dashboard.layout.dashboard.DashboardMain',{
	serverUrls : [],
	singleton: true,
	dashboards : [],
	
	initDashboard: function(){
		var urlParams = [];
		var editable = true;
		var metas = document.getElementsByTagName('meta');
		var serverURL = ""; 
		for (var x=0,y=metas.length; x<y; x++) {
			 if (metas[x].name.toLowerCase() == "nv_url") {
			     serverURL = metas[x].content;
			     this.serverUrls['base'] = serverURL;
			 }
		}
		for (var x=0,y=metas.length; x<y; x++) {
			if (metas[x].name.toLowerCase() == "nv_save_url") {
				 this.serverUrls['save'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_lang_url") {
				 this.serverUrls['lang'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_lang_path") {
				 this.serverUrls['lang_path'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_load_url") {
				 this.serverUrls['load'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_portlets_url") {
				 this.serverUrls['portlets'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_portlet_properties") {
				 this.serverUrls['getDefaultProperties'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_image_folder_url") {
				 this.serverUrls['imageFolderUrl'] = serverURL + metas[x].content;
			}
			else if (metas[x].name.toLowerCase() == "nv_visibility_group_url") {
				 this.serverUrls['visibilityGroupUrl'] = serverURL + metas[x].content;
			}else if (metas[x].name.toLowerCase() == "nv_default_list_url") {
				 this.serverUrls['listDataUrl'] = serverURL + metas[x].content;
			}
		}

		this.serverURL = serverURL;
		
		var array = document.location.search.substr(document.location.search.search("/?")+1).split("&");
		for(var i in array){
			var command = array[i].split("=")[0];
			var url = array[i].split("=")[1];
			if(command=='id'){
				this.serverUrls['load'] = this.serverUrls['load']+url;
				this.serverUrls['save'] = this.serverUrls['save']+url;
				this.dashboardId = url;
			}else if(command=='editable'){
				if(url=="false"){
					editable=false;
				}
			} 
			else{
				urlParams[command] = url;
			}
		}
		
		Ext.Ajax.request({
			url : this.serverUrls['lang'],
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			},
			success : function(response) {
				var langs = Ext.decode(response.responseText);
				if(langs.error!=undefined){
					alert("Lang error!");
					return;
				}
				
				if(langs.list[0].match("hu_")){
					lang = "hu";
				}
				else if(langs.list[0].match("en_")){
					lang = "en";
				}

				Ext.Ajax.request({
					url : NV.dashboard.layout.dashboard.DashboardMain.serverUrls['lang_path']+"nv.lang."+lang+".json",
					failure: function(response){
						NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
					},
					success : function(response2){
						lang = Ext.decode(response2.responseText);
						var model = NV.dashboard.layout.dashboard.DashboardMain.createModel();
						model.set("editable",editable);
						
						Ext.Ajax.request({
							url :model.get('urls').load,
							failure: function(response){
								NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
							},
							success : function(response) {
								var config = Ext.decode(response.responseText);
								if(config.error){
									Ext.MessageBox.alert("error", config.error);
									return;
								}
								this.model.beginEdit();
								this.model.set("layout", config.layout?config.layout:'dashboard');
								this.model.set("cols", config.cols);
								this.model.set("row", config.row);
								this.model.set("panels", config.panels);
								this.model.set("containers", config.visibilityGroups);
								this.model.set("parameters", config.parameters==undefined?[]:config.parameters);
								if(config.urls){
									model.set("urls", NV.dashboard.layout.dashboard.DashboardMain.serverUrls);
								}
								
								this.model.endEdit();
								NV.dashboard.layout.dashboard.DashboardMain.dashboards.push(Ext.create('NV.dashboard.layout.dashboard.Dashboard', this.model));
								
								NV.dashboard.layout.dashboard.DashboardMain.renderDashboard(NV.dashboard.layout.dashboard.DashboardMain.dashboards[NV.dashboard.layout.dashboard.DashboardMain.dashboards.length-1]);
							}, 
							scope:{model:model, main:this}
						});	
					}, scope: this
				});
				
			}
		});
		
	},
	
	/**
	 * Override to insert more then one dashboard or to support special portlet types
	 * 
	 * @returns
	 */
	createModel: function(){
		var model = Ext.create('NV.dashboard.layout.model.DashboardModel');
		model.beginEdit();
		model.set("dashboardID", NV.dashboard.layout.dashboard.DashboardMain.dashboardId);
		model.set("urls", NV.dashboard.layout.dashboard.DashboardMain.serverUrls);
		model.endEdit();
		return model;
	},
	
	/**
	 * override to insert dashboard in complex panel structure
	 * @param myDashboard
	 */
	renderDashboard: function(myDashboard){
//		myDashboard.render(Ext.getBody());
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.ModelObserver',{
	refreshByModel : function(arguments){
		throw "Unimplemented method.";
	}
});

// @tag dashboard-layout
Ext
		.define(
				'NV.dashboard.layout.dashboard.Portlet',
				{
					extend : 'NV.dashboard.layout.dashboard.ModelObserver',
					config : {
						model : undefined, // portletModel
						view : undefined, // portletView
						dashboard : undefined,
						viewType : "panel",
						position : undefined, // a dnd panelnek kell hogy ne
						// szálljon el
						dashboard : undefined,
						portletId : undefined, // egyedi id
						savedSize : undefined,
						jobs : []
					},

					refreshByModel : function(what, scope) {
						if (!what) {
							if (scope.model.get('hidden')) {
								if (!scope.dashboard.getModel().get('editable')) {
									scope.view.hide();
								} else {
									scope.view.setTitle(scope.model.get('title') + " ( invisibile ) ");
								}

							} else {
								scope.view.show();
								scope.view.setTitle(scope.model.get('title'));
							}
							return;
						}

						if (what['title'] != undefined) {
							scope.view.setTitle(what.title);

						}
						if (what['headerVisible'] != undefined) {
							if (scope.dashboard != undefined && scope.dashboard.getModel().get("editable")) {
								scope.view.setHeaderVisible(true);
							} else {
								scope.view.setHeaderVisible(what.headerVisible);
							}
						}
						if (what['zoomButtonVisible'] != undefined) {
							scope.view.setButtonVisible("zoom", what.zoomButtonVisible);
							scope.view.setButtonHandler("zoom", scope, "handleZoom");

						}
						if (what['refreshButtonVisible'] != undefined) {
							if (scope.dashboard != undefined && scope.dashboard.getModel().get("editable")) {
								scope.view.setButtonVisible("refresh", true);
							} else {
								scope.view.setButtonVisible("refresh", what.refreshButtonVisible);
							}
							scope.view.setButtonHandler("refresh", scope, "handleRefresh");
						}
						if (what['settingsButtonVisible'] != undefined) {
							if (scope.dashboard != undefined && scope.dashboard.getModel().get("editable")) {
								scope.view.setButtonVisible("gear", true);
							} else {
								scope.view.setButtonVisible("gear", what.settingsButtonVisible);
							}
							scope.view.setButtonHandler("gear", scope, "configHandler");
						}
						if (what['infoButtonVisible'] != undefined) {
							scope.view.setButtonVisible("help", what.infoButtonVisible);
							scope.view.setButtonHandler("help", scope, "infoHandler");
						}
						if (what['closeButtonVisible'] != undefined) {

							if (scope.dashboard != undefined && scope.dashboard.getModel().get("editable")) {
								scope.view.setButtonVisible("close", true);
							} else {
								scope.view.setButtonVisible("close", false);
							}
							scope.view.setButtonHandler("close", scope, "handleDelete");
						}
						if (what['width'] != undefined) {
							scope.view.setWidth(what.width);
						}
						if (what['height'] != undefined) {
							scope.view.setHeight(what.height);
						}
						if (what['content'] != undefined || what['contentType'] != undefined) {
							scope.refreshContent();
						}

						if (what['borderVisible'] != undefined) {
							if (scope.dashboard != undefined && scope.dashboard.getModel().get("editable")) {
								scope.view.setHeaderVisible(true);
							} else {
								scope.view.setBordered(scope.model.get('borderVisible'));
								if (scope.model.get('borderVisible')) {

									scope.view.setBorder(scope.model.get('borderWidth'));
								} else {
									scope.view.setBorder(false);
								}
							}
						}
						if (what['cls'] != undefined) {
							scope.view.cls = what.cls;
							scope.view.addCls(what.cls);
						}

						if (what['refreshJobs'] != undefined && (what['content'] == undefined && what['contentType'] == undefined)) {
							scope.refreshTimers();
						}
						if (what['hidden'] != undefined) {
							if (what['hidden']) {
								if (!scope.dashboard.getModel().get('editable')) {
									scope.view.hide();
								} else {
									scope.view.setTitle(scope.model.get('title') + " ( invisibile ) ");
								}
							} else {
								scope.view.show();
								scope.view.setTitle(scope.model.get('title'));
							}
						}

						if (scope.dashboard != undefined && scope.dashboard.getModel().get("editable")) {
							scope.view.setButtonVisible("gear", true);
							scope.view.setButtonVisible("refresh", true);
							scope.view.setButtonVisible("close", true);
							scope.view.setButtonHandler("gear", scope, "configHandler");
							scope.view.setButtonHandler("refresh", scope, "handleRefresh");
							scope.view.setButtonHandler("close", scope, "handleDelete");
							scope.view.setHeaderVisible(true);
							scope.view.setBorder(true);
							scope.view.setBordered(true);
						}
					},

					refreshTimers : function() {
						if (this.model.get("refreshJobs")) {
							// check the application use globalAjax
							var global = false;
							if (window.globalAjaxClient) {
								// global = true;
							}
							for ( var i = 0; i < this.jobs.length; i++) {
								this.jobs[i].stop();
								this.jobs[i] = undefined;
							}
							this.jobs = [];
							for ( var i = 0; i < this.model.get("refreshJobs").length; i++) {
								if (this.model.get("refreshJobs")[i].refreshType == 'portletRefresh') {
									var params = {
										command : this.dashboard.model.get("urls").getDefaultProperties,
										arguments : {
											objectId : this.model.get('originalPortletId')
										}
									};
									for ( var j in this.model.get('parameters')) {
										params.arguments[j] = this.model.get('parameters')[j];
									}

									var job = Ext.create('NV.ajax.scheduler.RefreshJob', {
										fixParams : params,
										url : this.dashboard.model.get("urls").base,
										batchedAjaxEnabled : global,
										callback : this.refreshPortlet,
										refreshIntervall : this.model.get("refreshJobs")[i].refreshIntervall,
										scope : this
									});
									job.start();
									this.jobs.push(job);
								}
							}
							if (this.content != undefined) {
								var notEqual = false;
								if (this.model.get('refreshJobs') != undefined) {
									for ( var i = 0; i < this.model.get('refreshJobs').length; i++) {
										if (this.content.model.get("refreshJobs") == undefined || !Ext.Object.equals(this.content.model.get('refreshJobs')[i], this.model.get("refreshJobs")[i])) {
											notEqual = true;
											break;
										}
									}
									if (notEqual) {
										this.content.model.beginEdit();
										this.content.model.set('refreshJobs', this.model.get("refreshJobs"));
										this.content.model.endEdit();
									}
								}

							}
						}
					},

					/**
					 * Resolves the className for a specific portlet-content
					 * alias. Lookup order: - Try Dashboard Model contentMap
					 * with alias - Try ClassManager with the alias prefixed
					 * with "portlet-content." If no className found error is
					 * raised
					 * 
					 * @returns the className
					 */
					_resolveContentClassName : function() {
						var me = this, classAlias = me.model.get('contentType'), className;

						className = me.dashboard.getModel().get("contentMap")[classAlias];

						if (Ext.isEmpty(className)) {
							className = Ext.ClassManager.getNameByAlias('portlet-content.' + classAlias);
							if (Ext.isEmpty(className)) {
								Ext.Error.raise({
									msg : 'Cannot resolve PortletContent ClassName for Alias: ' + classAlias,
									alias : classAlias
								});
							}
						}

						return className;
					},

					refreshContent : function() {
						if (this.model.get("content") && this.model.get('contentType')) {
							if (!this.content) {// még nics is content
								var contentModel = Ext.create('NV.dashboard.layout.model.content.PortletContentModel', {
									type : this.model.get("contentType"),
									overridedProperties : this.model.get("overridedProperties").content,
									description : this.model.get("description")
								});

								this.content = Ext.create(this._resolveContentClassName(), {
									model : contentModel,
									portlet : this,
									content : this.model.get("content")
								});

								// a portlettel figyeljük a portlet content
								// output mezőjét, és ennek megfelelően
								// frissítsük amdj a saját output mezőnket!

								contentModel.addObserver(this, function(value, scope) {
									// value tartalmazza az új output értéket
									scope.model.beginEdit();
									scope.model.set("output", value);
									scope.model.endEdit();
								}, this, "output");

								this.content.model.beginEdit();
							} else {
								this.content.model.beginEdit();
								this.content.model.set('type', this.model.get("contentType"));
							}

							if (this.model.get('refreshJobs') != undefined) {
								var notEqual = false;
								for ( var i = 0; i < this.model.get('refreshJobs').length; i++) {
									if (this.content.model.get("refreshJobs") == undefined || !Ext.Object.equals(this.content.model.get('refreshJobs')[i], this.model.get("refreshJobs")[i])) {
										notEqual = true;
										break;
									}
								}
								if (notEqual) {
									this.content.model.set('refreshJobs', this.model.get("refreshJobs"));
								}
							}

							var notEqual = false;

							if (this.content.model.get("content") == undefined || !Ext.Object.equals(this.content.model.get('content'), this.model.get("content"))) {
								notEqual = true;
							}

							if (notEqual) {

								this.content.model.set('content', this.model.get("content"));

							}
							this.content.model.endEdit();
						}
					},

					constructor : function(config) {
						this.initConfig(config);
						this.model.addObserver(this, this.refreshByModel, this);
						// this.model.beginEdit();
						this.model.set('properties', []);
						this.model.set("parameters", {});
						this.model.set("storeParameters", {});
						this.model.set("hidden", config.hidden);
						this.model.set("containerId", config.visibilityGroup);
						this.model.set("url", this.dashboard.model.get("urls").getDefaultProperties);

						if (this.model.get('overridedProperties') == undefined) {
							this.model.set('overridedProperties', {
								portlet : {},
								content : {}
							});
						}
						this.model.resolvers = this.resolvers; // egy az egyben
						// a javascript
						// object-et kapja meg
						var currConfig = {
							title : this.model.get("title"),
							border : false,
							hidden : this.model.get("hidden"),
							frame : this.model.get("frame"),
							width : this.model.get("width"),
							height : this.model.get("height"),
							// closable: this.model.get("closable"),
							layout : {
								type : 'fit',
								align : 'stretch'
							},
							savedPosition : this.savedSize,
							unsavedPosition : this.savedSize,
							controller : this

						};

						if (this.viewType == "panel") {
							this.view = Ext.create('NV.dashboard.layout.view.portlet.PanelView', currConfig);
						} else if (this.viewType == "window") {
							this.view = Ext.create('NV.dashboard.layout.view.portlet.WindowView', currConfig);
						} else {
							throw "unknow portletView type!";
						}
						// this.model.endEdit();

						var properties = this.model.get("properties");

						for ( var i = 0; i < this.model.get('editableProperties').length; i++) {
							var index = Ext.Array.indexOf(this.model.fields.keys, this.model.get('editableProperties')[i].name);
							var property = {
								name : this.model.get('editableProperties')[i].name,
								type : this.model.fields.items[index].type.type,
								label : this.model.get('editableProperties')[i].label,
								overrided : false,
								scope : this
							};
							if (this.model.get('overridedProperties')) {
								if (this.model.get('overridedProperties').portlet[this.model.get('editableProperties')[i].name] != undefined) {
									property.value = this.model.get('overridedProperties').portlet[this.model.get('editableProperties')[i].name];
									property.overrided = true;
								}
							}
							properties.push(property);
						}
						this.view.setHeaderVisible(true);
						this.refreshOverriddedProperties();

						/**
						 * resolvereink vannak.(összekötések hogy milyen
						 * paramétert vár a portlet a dashboardtól vagy más
						 * portlettől)
						 */
						for ( var i in this.model.get("resolvers")) {
							if (this.model.get("resolvers")[i].refreshType == 'store') {
								this.model.get("storeParameters")[this.model.get("resolvers")[i].targetName] = this.model.get("resolvers")[i].defaultValue;
							} else {
								this.model.get("parameters")[this.model.get("resolvers")[i].targetName] = this.model.get("resolvers")[i].defaultValue;
							}
						}

						this.refreshByModel(null, this);
						this.fillParameters(true);

					},
					/**
					 * ParamAssignPanel save után fut le
					 */
					refreshAfterParamsChanged : function() {
						this.model.set("parameters", {});
						for ( var i in this.model.get("resolvers")) {
							this.model.get("parameters")[this.model.get("resolvers")[i].targetName] = this.model.get("resolvers")[i].defaultValue;
						}

						this.fillParameters();
					},

					setHeaderVisible : function(value) {
						this.model.set("headerVisible", value);
					},

					render : function(elem) {
						if (!this.view.rendered) {
							this.view.render(elem);
						} else {
							this.view.getEl().appendTo(Ext.get(elem));
						}
					},

					/**
					 * csak a model-nek kéne továbbadni A model figyelése miatt
					 * a portlet majd frissíti a view-t
					 * 
					 * @param value
					 */
					setRefreshButtonVisible : function(value) {
						this.model.set('refreshButtonVisible', value);
					},

					getView : function() {
						return this.view;
					},

					setConfigButtonVisible : function(value) {
						this.view.setButtonVisible("gear", value);
						this.view.setButtonHandler("gear", this, "configHandler");
						this.model.set('configButtonVisible', value);
					},
					/**
					 * config button click handler
					 * 
					 * @param event
					 * @param e
					 * @param panel
					 */
					configHandler : function(event, e, panel) {
						var me = this;
						var menu = Ext.create('Ext.menu.Menu', {
							width : 100,
							height : 60,
							margin : '0 0 10 0',

							autoShow : true,
							floating : true,
							items : [ {
								text : lang.params.params,
								panel : me,
								handler : function(evt) {
									this.panel.handleParamAssignment();
								}
							}, {
								text : lang.properties.properties,
								panel : me,
								handler : function(evt) {
									this.panel.handlePropertiesAssignment();
								}
							} ]
						});
						menu.alignTo(e.target);

					},

					infoHandler : function(event, e, panel) {
						Ext.Msg.alert('Portlet info', this.model.get('info'));
					},

					setCloseButtonVisible : function(value) {
						this.model.set('closable', value);
					},

					setTitle : function(text) {
						this.view.setTitle(text);
						this.model.set('title', text);
					},

					handleDelete : function(event, toolEl, owner, tool) {
						this.dashboard.deletePortlet(this.model.get("portletId"));
						this.model.removeObserver(this);
						for ( var i = 0; i < this.jobs.length; i++) {
							this.jobs[i].stop();
						}
					},

					handleZoom : function(event, toolEl, owner, tool) {
					},

					getOutputParameters : function(type, callback, scope) {
						Ext.Ajax.request({
							url : this.model.get("paramsDefUrl"),
							success : function(response, opts) {
								var json = Ext.decode(response.responseText);
								if (json.error) {

									return;
								}

								var outputParams = [];
								for ( var i in json.list[0].output) {
									if (json.list[0].output[i].type == this.type) {
										outputParams.push(json.list[0].output[i]);
									}
								}

								this.callback(outputParams, this.scope);

							},
							failure : function(response) {
								NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
							},
							scope : {
								type : type,
								callback : callback,
								scope : scope
							}
						});
					},

					handleParamAssignment : function() {
						/**
						 * kell: paraméterek (type-al együtt, mindegyiknek kell
						 * hogy mostd ashboardtól jön, vagy default, eza
						 * resolverben van),
						 */

						Ext.Ajax.request({
							url : this.model.get("paramsDefUrl"),
							success : function(response, opts) {
								var json = Ext.decode(response.responseText);
								if (json.error) {

									return;
								}

								var parameters = json.list[0].input;

								var paramModels = [];
								for ( var i in parameters) {

									parameters[i].value = parameters[i].defaultValue;
									paramModels.push(parameters[i]);
								}

								var parameters = json.list[0].output;

								var paramModels2 = [];
								for ( var i in parameters) {
									parameters[i].value = parameters[i].defaultValue;
									paramModels2.push(parameters[i]);
								}

								var assignPanel = Ext.create('NV.dashboard.layout.dashboard.panels.ParamAssignPanel', {
									inputParamsConfigs : paramModels,
									outputParamsConfig : paramModels2,
									dashboardParams : this.dashboard.model.get("parameters"),
									otherPortlets : this.dashboard.getOtherPortlets(this.model.get('portletId')),
									portlet : this,
									resolvers : this.model.get('resolvers'),
									dashboard : this.dashboard
								});
								assignPanel.show();
							},
							failure : function(response) {
								NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
							},
							scope : this,
							failed : function(response) {
								if (console) {
									console.debug("missing paramsdefUrl");
								}

							}
						});

					},

					createNewDashboardParameter : function(paramObject) {
						this.dashboard.createNewParameter(paramObject);
					},

					handlePropertiesAssignment : function() {

						var allProperties = Ext.Array.merge(this.model.get('properties'), this.content.model.get('properties'));

						var propertyPanel = Ext.create('NV.dashboard.layout.dashboard.panels.PropertyAssignPanel', {
							properties : allProperties,
							portlet : this,
							containers : Ext.Object.getKeys(this.dashboard.containers),
							container : this.model.get("containerId")
						});
						propertyPanel.show();
					},

					refreshOverriddedProperties : function() {
						this.model.get('overridedProperties').portlet = {};
						for ( var i = 0; i < this.model.get('properties').length; i++) {
							if (this.model.get('properties')[i].overrided) {
								this.model.get('overridedProperties').portlet[this.model.get('properties')[i].name] = this.model.get('properties')[i].value;
							}
						}
					},

					handlePropertyRefresh : function() {
						this.model.beginEdit();
						for ( var i = 0; i < this.model.get('properties').length; i++) {
							if (this.model.get('properties')[i].value != undefined && this.model.get('properties')[i].value != "") {
								this.model.set(this.model.get('properties')[i].name, this.model.get('properties')[i].value);
							} else if (this.model.get('properties')[i].name, this.model.get('properties')[i].defaultValue != undefined) {
								this.model.set(this.model.get('properties')[i].name, this.model.get('properties')[i].defaultValue);
							}
						}
						this.model.endEdit();
					},

					getMissingParamNames : function() {
						var missingParams = [];
						var parameters = this.model.get("parameters");

						for ( var i in parameters) {
							// if (parameters[i] == undefined || parameters[i]
							// == null) {
							missingParams.push(i);
							// }
						}
						parameters = this.model.get("storeParameters");

						for ( var i in parameters) {
							// if (parameters[i] == undefined || parameters[i]
							// == null) {
							missingParams.push(i);
							// }
						}
						return missingParams;
					},

					fillParameters : function(refresh) {

						var missingParams = this.getMissingParamNames();
						if (missingParams.length > 0) {
							this.findParameters(missingParams);
						}

						if (refresh == undefined || refresh) {
							this.handleRefresh();
						}

					},

					handleStoreRefresh : function() {
						if (this.content) { // ha nincs tartalma, akkor is
											// frissül, de akkor atartalom
											// létrehozásakor ellenőrzi a
											// paramétereket
							this.content.refreshStore();
						}
					},

					/**
					 * Refresh the full Portlet by the originalPortletId and
					 * parameters (header, buttons, content), get the full
					 * portlet definition from server
					 */
					handleRefresh : function() {
						this.view.setLoading(true);

						var params = this.model.get("parameters");

						for ( var i in params) {
							if (params[i] instanceof Array) {
								params[i] = Ext.JSON.encode(params[i]);
							} else if (params[i] instanceof Object) {
								for ( var j in params[i]) {
									if (params[i] instanceof Array || params[i] instanceof Object) {
										params[i + "_" + j] = Ext.JSON.encode(params[i][j]);
									} else {
										params[i + "_" + j] = params[i][j];
									}

								}
							}
						}
						params.objectId = this.model.get("originalPortletId");
						if (params.objectId == "dashboardSettings") {
							this.refreshPortlet({
								list : [ {
									headerVisible : true,
									settingsButtonVisible : false,

									title :  lang.params.params,
									type : 'dashboardSettings',
									content : {
										test : 'true'
									}
								} ]
							}, this);
							this.view.setLoading(false);
							return;
						}
						var conn = Ext.create('Ext.data.Connection', {
							method : 'GET'
						});
						conn.request({
							url : this.model.get('url'),
							params : params,
							extraParams : params,
							method : "GET",
							success : function(response) {
								var json = Ext.decode(response.responseText);
								/*
								 * if(json.error){
								 * Ext.Msg.alert("Error",json.error); return; }
								 */
								this.refreshPortlet(json, this);
								this.view.setLoading(false);
							},
							failure : function() {
								// this.view.setHtml("connection failed");
								this.view.setLoading(false);
							},
							scope : this
						});

					},
					addContent : function(contentView) {
						this.view.add(contentView);
					},
					refreshPortlet : function(json, scope) {
						var json = json.list[0];

						// header always visible in edit mode
						scope.model.beginEdit();
						scope.model.set("headerVisible", json.headerVisible);
						scope.model.set("refreshButtonVisible", json.refreshButtonVisible);
						scope.model.set("settingsButtonVisible", json.settingsButtonVisible);
						scope.model.set("infoButtonVisible", json.infoButtonVisible);
						scope.model.set("zoomButtonVisible", json.zoomButtonVisible);
						scope.model.set("description", json.description);
						if (json.borderVisible != undefined) {
							scope.model.set("borderVisible", json.borderVisible);
						}

						scope.model.set("title", json.title);
						scope.model.set("info", json.info);
						scope.model.set("cls", json.css);
						scope.model.set("paramsDefUrl", json.paramsDefUrl);
						scope.model.set("contentType", json.type);
						scope.model.set("content", json.content);
						scope.model.set("refreshJobs", json.refreshJobs);

						for ( var i = 0; i < scope.model.get('properties').length; i++) {
							scope.model.get('properties')[i].defaultValue = scope.model.get(scope.model.get('properties')[i].name);
							if (scope.model.get('properties')[i].value != undefined && scope.model.get('properties')[i].value != "") {
								scope.model.set(scope.model.get('properties')[i].name, scope.model.get('properties')[i].value);
							}
						}
						scope.model.endEdit();
					},

					/**
					 * missingParameters: pl: [service1, service2] egy
					 * felsorolás a saját paraméter nevünkkel
					 * 
					 * @param missingParameters
					 *            hiányzó paraméterek
					 */
					findParameters : function(missingParameters) {
						var parametersFromPortlets = {};
						var parametersWaitFromPortlets = {};
						var parametersFromDashboard = [];
						for ( var j in this.model.get("resolvers")) {
							for ( var i in missingParameters) {
								if (missingParameters[i] == this.model.get("resolvers")[j].targetName) {
									for ( var k in this.model.get("resolvers")[j].sources) {
										if (this.model.get("resolvers")[j].sources[k].sourceContainer == null || this.model.get("resolvers")[j].sources[k].sourceContainer == "null" || this.model
												.get("resolvers")[j].sources[k].sourceContainer == undefined) {
											parametersFromDashboard.push({
												myParamName : this.model.get("resolvers")[j].targetName,
												refreshType : this.model.get("resolvers")[j].refreshType,
												sourceParamName : this.model.get("resolvers")[j].sources[k].sourceName
											});

											try {
												var value = this.dashboard.model.get("output")[this.model.get("resolvers")[j].sources[k].sourceName];
												if (value != undefined) {
													if (this.model.get("resolvers")[j].refreshType == 'store') {
														this.model.get("storeParameters")[this.model.get("resolvers")[j].targetName] = value;
													} else {
														this.model.get("parameters")[this.model.get("resolvers")[j].targetName] = value;
													}
												}
											} catch (e) {

											}

										} else {
											// másik portlet kimenő
											// paraméterével akar valamit
											// kezdeni
											var portletId = this.model.get("resolvers")[j].sources[k].sourceContainer;

											var datas = {
												myParamName : this.model.get("resolvers")[j].targetName,
												refreshType : this.model.get("resolvers")[j].refreshType,
												sourceParamName : this.model.get("resolvers")[j].sources[k].sourceName
											};
											if (this.dashboard.portlets[portletId] != null) {
												if (!parametersFromPortlets[portletId]) {
													parametersFromPortlets[portletId] = [];
												}
												parametersFromPortlets[portletId].push(datas);
											} else {
												if (!parametersWaitFromPortlets[portletId]) {
													parametersWaitFromPortlets[portletId] = [];
												}
												parametersWaitFromPortlets[portletId].push(datas);
												// még nem létezik a portlet
												// (lehet hogy soha nem is fog)
												// figyelni kell hogy létrejön-e
												// ilyen id-jú portlet és ha
												// igen, akkor rátenni a
												// figyelést

											}
											try {
												// get the parameters if they
												// already exist
												var value = this.dashboard.portlets[this.model.get("resolvers")[j].sources[k].sourceContainer].model.get("output")[this.model.get("resolvers")[j].sources[k].sourceName];
												if (value != undefined) {
													if (this.model.get("resolvers")[j].refreshType == 'store') {
														this.model.get("storeParameters")[this.model.get("resolvers")[j].targetName] = value;
													} else {
														this.model.get("parameters")[this.model.get("resolvers")[j].targetName] = value;
													}
												}
											} catch (e) {

											}
										}
									}
								}
							}
						}

						this.dashboard.model.addObserver(
							this,
							function(value, scope) {
								// value tartalmazza az új output
								// értéket
								var needPortletRefresh = false;
								var needStoreRefresh = false;
								for ( var i = 0; i < scope.parameters.length; i++) {
									if (value[scope.parameters[i].sourceParamName] != undefined && (scope.portlet.model.get("parameters")[scope.parameters[i].myParamName] == undefined || scope.portlet.model
											.get("parameters")[scope.parameters[i].myParamName] != value[scope.parameters[i].sourceParamName])) {
										if (scope.parameters[i].refreshType == 'store') {
											needStoreRefresh = true;
											scope.portlet.model.get("storeParameters")[scope.parameters[i].myParamName] = value[scope.parameters[i].sourceParamName];

										} else {
											needPortletRefresh = true;
											scope.portlet.model.get("parameters")[scope.parameters[i].myParamName] = value[scope.parameters[i].sourceParamName];
										}
									}
								}
								if (needPortletRefresh) {
									scope.portlet.handleRefresh();
								} else if (needStoreRefresh) {
									scope.portlet.handleStoreRefresh();
								}
							}, {
								parameters : parametersFromDashboard,
								portlet : this
							}, "output");

						for ( var i in parametersFromPortlets) {
							this.initParameterObserver(i, parametersFromPortlets[i]);
						}
						for ( var i in parametersWaitFromPortlets) {
							this.dashboard.addPortletObserver(i, this, parametersWaitFromPortlets[i]);

						}
					},
					resize : function(width, height) {
						this.view.innerResize(width, height);
					},

					stopRefresh : function() {
						for ( var i = 0; i < this.jobs.length; i++) {
							this.jobs[i].stop();
						}
						this.content.stopRefresh();
					},
					startRefresh : function() {
						for ( var i = 0; i < this.jobs.length; i++) {
							this.jobs[i].start();
						}
						this.content.startRefresh();
					},

					setVisible : function(visible) {
						this.model.beginEdit();
						if (visible) {
							this.model.set('hidden', false);
						} else {
							this.model.set('hidden', true);
						}
						this.model.endEdit();
					},

					initParameterObserver : function(id, obj) {
						this.dashboard.portlets[id].model.addObserver(
							this,
							function(value, scope) {
								// value tartalmazza az új output
								// értéket
								var needPortletRefresh = false;
								var needStoreRefresh = false;
								for ( var i = 0; i < scope.parameters.length; i++) {
									if (value[scope.parameters[i].sourceParamName] != undefined && (scope.portlet.model.get("parameters")[scope.parameters[i].myParamName] == undefined || scope.portlet.model
											.get("parameters")[scope.parameters[i].myParamName] != value[scope.parameters[i].sourceParamName])) {
										if (scope.parameters[i].refreshType == 'store') {
											needStoreRefresh = true;

											scope.portlet.model.get("storeParameters")[scope.parameters[i].myParamName] = value[scope.parameters[i].sourceParamName];

										} else {
											needPortletRefresh = true;

											scope.portlet.model.get("parameters")[scope.parameters[i].myParamName] = value[scope.parameters[i].sourceParamName];

										}

									}
								}
								if (needPortletRefresh) {
									scope.portlet.handleRefresh();
								} else if (needStoreRefresh) {
									scope.portlet.handleStoreRefresh();
								}
							}, {
								parameters : obj,
								portlet : this
							}, "output");
					}
				});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.components.EditForm', {
	require:'NV.ext.ux.DataTip',
	extend : 'Ext.panel.Panel',
	alias: "BasicEditForm",
	config : {
		fieldDefinitions : undefined,
		containerDefinitions: undefined,
		values : undefined,
		formValuesUrl: undefined,
		saveUrl: "..",
		deleteUrl: "..",
		parentGrid : undefined,
		readonly:false,
		deletable:true,
		hasHelp:false,
		uniqueId: undefined,
		labelWidth: 120,
		uniqueIdField: undefined,
		columnNumber : 2
	},

	addControllers: function(){
		this.fields = [];
		this.fieldHash = {};
		this.containers = {};
		if(this.containerDefinitions){
			for(var i=0; i<this.containerDefinitions.length; i++){
				this.containers[this.containerDefinitions[i].id] = (Ext.create('Ext.form.FieldSet',{
			        // Fieldset in Column 1 - collapsible via toggle button
			        columnWidth: 1,
			        title: this.containerDefinitions[i].name,
			        margin:'5',
			        collapsible: this.containerDefinitions[i].collapsible,
			        layout: this.containerDefinitions[i].layout==undefined?'anchor':this.containerDefinitions[i].layout
			       
			    }));
				this.form.add(this.containers[this.containerDefinitions[i].id]);
			}
		}
		
		
		for ( var i = 0; i < this.fieldDefinitions.length; i++) {
			var resolver = undefined;
			//maradjon így, azért nem apply, mert midnenféle szemét belekerülne a kofigba (ha grid column-s alapján van felépítve)
			var configObject = {							
				name : this.fieldDefinitions[i].dataIndex,
				label : this.fieldDefinitions[i].text,
				type : this.fieldDefinitions[i].type,
				editable: this.fieldDefinitions[i].editable==undefined?true:this.fieldDefinitions[i].editable,
				required: this.fieldDefinitions[i].required,
				labelWidth: this.labelWidth
			};
			if(this.parentGrid){
				configObject.dashboard = this.parentGrid.dashboard;
			}
			
			if(this.values){
				configObject.value = this.values[this.fieldDefinitions[i].dataIndex];
			}

			if(this.fieldDefinitions[i].readonlynew == undefined){
		//		this.fieldDefinitions[i].readonlynew = this.fieldDefinitions[i].readonly;
			}
			
		//	if(this.fieldDefinitions[i].readonlynew && this.uniqueId==0){ continue; }
			
			if(configObject.type == undefined ||  this.fieldDefinitions[i].onForm==false){ continue; }//selection model checkbox
			
			if (configObject.type == "boolean") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.BooleanInput', configObject);
			} else if (configObject.type == "float" || configObject.type == "number") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.NumberInput', configObject);
			} else if (configObject.type == "string") {
				configObject.regexp = this.fieldDefinitions[i].regexp;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			} else if (configObject.type == "date") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateInput', configObject);
			}else if (configObject.type == "datetime" || configObject.type == "datecolumn") {
				configObject.process = this.fieldDefinitions[i].process;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateTimeInput', configObject);
			}else if (configObject.type == "list") {
				configObject.url  =  this.fieldDefinitions[i].url;
				configObject.queryMode  =  this.fieldDefinitions[i].queryMode;
				configObject.forceSelection  =  this.fieldDefinitions[i].forceSelection;
				configObject.searchValueFromUrl  =  this.fieldDefinitions[i].searchValueFromUrl;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput', configObject);
			}else if (configObject.type == "enum") {
				configObject.enumValues =  this.fieldDefinitions[i].enums;
				configObject.forceSelection  =  this.fieldDefinitions[i].forceSelection;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput', configObject);
			}else if (configObject.type == "enumarray") {
				configObject.enumValues =  this.fieldDefinitions[i].enums;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', configObject);
			}else if (configObject.type == "interval") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.IntervalInput', configObject);
			
			}else if (configObject.type == "button"){
				if(this.gotoButtonMenu){
					this.gotoButtonMenu.add(Ext.create('Ext.menu.Item',{
						text: configObject.label,
						name: configObject.name,
						icon: 'resource/dashboard-layout/image/tools/goto.png',
						handler:function(){
							if(this.value!=undefined){
								window.open(this.value);
							}
						},
						scope: configObject
					}));
					this.gotoButton.setVisible(true);
				}
			} 
			else {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			}
			if (resolver != undefined) {
				resolver.getController().columnWidth = 1/this.columnNumber;
				resolver.getController().margin = '2 10 2 10';
				if(this.fieldDefinitions[i].tooltip){
					resolver.getController().tooltip = this.fieldDefinitions[i].tooltip;					
				}
				resolver.setReadOnly(this.readonly?this.readonly:((this.uniqueId==0 && this.fieldDefinitions[i].readonlynew) || (this.uniqueId!=0 && this.fieldDefinitions[i].readonly)));
				
				var containerToAdd;
				if(this.fieldDefinitions[i].containerId && this.containers[this.fieldDefinitions[i].containerId]){
					containerToAdd = this.containers[this.fieldDefinitions[i].containerId];
				}else{
					containerToAdd = this.form;
				}
				
				
				if(this.fieldDefinitions[i].help!=undefined){
					resolver.getController().columnWidth = 1;
					resolver.getController().margin = '0';
					resolver.getController().flex = 1;
					containerToAdd.add(Ext.create('Ext.form.FieldContainer',{
						layout: {
							type:'hbox',
							align:"top"
						},
						columnWidth:"0.5",
						margin:'2 10 2 10',
						items: [
						        resolver.getController(), 
						        {
						        	xtype:"image", 
						        	src: "resource/dashboard-layout/image/tools/help-icon.png",
						        	width: 16,
						        	margin:'3',
						        	title: this.fieldDefinitions[i].help
						        	
						        }
						 ]
					}));
				}else{
					containerToAdd.add(resolver.getController());
				}

				this.fields.push(resolver);
				this.fieldHash[this.fieldDefinitions[i].dataIndex] = resolver;
			}

		}

		if(this.formValuesUrl){
			this.refreshValuesFromUrl();
		}
	},
	
	refreshValuesFromUrl: function(){
		if(this.formValuesUrl){
			Ext.Ajax.request({
				url: this.formValuesUrl,
				method:'GET',
				params: {objectId: this.uniqueId},
				success: function(response){
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if(!json){
						return;
					}
					
					for(var i=0; i<this.fields.length; i++){
						this.fields[i].setValue(json[this.fields[i].name]);
					}
					
					for(var i=0; i<this.gotoButtonMenu.items.items.length; i++){
						if(this.gotoButtonMenu.items.items[i].name){
							this.gotoButtonMenu.items.items[i].handler = function(){
								if(this != undefined && this instanceof(String)){
									window.open(this);
								}else{
									Ext.Msg.alert("Link unavailable!");
								}
							}
							this.gotoButtonMenu.items.items[i].scope = json[this.gotoButtonMenu.items.items[i].name];
						}
					}
				},
				failure: function(response){
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope:this
			});
		}
	},
	
	showHelp: function(){
		
	},
	
	createForm : function(){
		
		var helpImage = Ext.create('Ext.panel.Tool', {
		    type:'help',
		    style:{
		    	position: 'absolute',
		    	right: '0px',
		    	top: '0px'
		    },
		    hidden: !this.hasHelp,
		    handler: function(){
		    	this.showHelp();
		    },
		    scope:this
		});
		
		this.gotoButtonMenu =  new Ext.menu.Menu({
	        items: []});
		 
		 this.gotoButton = Ext.create('Ext.button.Button',{
				text : "Goto",
				icon: 'resource/dashboard-layout/image/tools/goto.png',
			//	xtype: "splitbutton",
				menu: this.gotoButtonMenu,
				scope:this,
				hidden:true
			});
			
		var buttons = [];
		if(!this.readonly){
			
			buttons.push({
				text : "Save",
				icon: 'resource/dashboard-layout/image/tools/save.png',
				handler : function(btn, evt) {
					this.save();
					
				},
				scope:this
			});
			buttons.push({
				text : "Cancel",
				icon: 'resource/dashboard-layout/image/tools/cancel.png',
				handler: function(evt){
					this.close();
					
				},
				scope:this
			});
			if(this.uniqueId!=0 && this.deletable){
				
				buttons.push({
					text : "Delete",
					icon: 'resource/dashboard-layout/image/tools/delete.png',
					handler: function(evt){
						this.doDelete();
						this.close();
					},
					scope:this
				});
			}
		}else{
			 buttons.push({
					text : "Close",
					icon: 'resource/dashboard-layout/image/tools/cancel.png',
					handler: function(evt){
						this.close();
					},
					scope:this
			});
		}
		
		buttons.push(this.gotoButton);
		
		var fp = Ext.create('Ext.form.Panel', {
			frame : true,
			border : true,
			bodyBorder : false,
			header : false,
			flex:1,
			margin: 5,
			bodyPadding: '5 5 0',
			layout:{
				type:'vbox',
				align:'stretch'
			},
			fieldDefaults : {
				labelAlign : 'left',
				labelWidth : 140,
				anchor : '100%'
			},plugins: {
	            ptype: 'datatip'
	        },
			buttons : buttons,
			items: [helpImage]
		});
		this.form = fp;
		return fp;
	},
	
	constructor : function(config) {
		//this.initConfig(config);
		
		this.callParent([ config ]);
		if(!this.items){this.items = [];}
		var form = this.createForm();
		this.add(form);

		this.addControllers();
		
		this.border = false;
		this.bodyBorder = false;
//		this.layout = 'fit';
		
		
	},
	
	save: function(){
		var values = {};
		if(!this.form.isValid()){
			return;
		}else{
			for(var i=0; i<this.fields.length; i++){
				if(this.fields[i].getValue()!=undefined){
					values[this.fields[i].name] = this.fields[i].getValue();
				}		
			}
		}
		if(!values[this.uniqueIdField]){
			if(this.parentGrid){
				values[this.parentGrid.uniqueId] = this.uniqueId;
			}else{
				values[this.uniqueIdField] = this.uniqueId;
			}
		}
		
		
		this.lastSavedValues = values;
		Ext.Ajax.request({
			url: this.saveUrl,
			jsonData : values,
			method:'POST',
			success: function(response){
				var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
				if(!json){
					return;
				}
				if(json.id!=undefined){
					this.uniqueId = json.id;
				}
				Ext.Msg.alert("Status", "Save success!");
				this.close();
				if(this.parentGrid){
					this.parentGrid.store.load();
				}
			},
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			},
			scope:this
		});
	},
	
	close: function(){
		this.up('window').close();
		this.callParent();
	},
	
	doDelete: function(){
		Ext.Ajax.request({
			url: this.deleteUrl,
			params:{objectId:this.uniqueId},
			method:'GET',
			success: function(response){
				var value = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
				if(!value){
					return;
				}
			
				Ext.Msg.alert("Status", "Delete success!");
				if(this.parentGrid){
					this.parentGrid.store.load();
				}
				
			},
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			},
			scope:this
		});
	},
	
	searchField: function(name){
		for(var i=0; i<this.fields.length; i++){
			if(this.fields[i].name == name){
				return this.fields[i];
			}
		}
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.components.FilterForm', {
	require : 'NV.ext.ux.DataTip',
	extend : 'Ext.panel.Panel',
	alias : "BasicFilterForm",
	config:{
		grid:undefined,
		filters:undefined
	},
	constructor : function(config) {
		var items = [];
		this.fields = {};
		for(var i in config.filters){
			var resolver;
			var configObject = {							
					name : i,
					label : config.filters[i].text,
					type : config.filters[i].type
				};
			if (configObject.type == "boolean") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.BooleanInput', configObject);
			} else if (configObject.type == "float" || configObject.type == "number") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.NumberInput', configObject);
			} else if (configObject.type == "string") {
				configObject.regexp =  config.filters[i].regexp;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			} else if (configObject.type == "date") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateInput', configObject);
			}else if (configObject.type == "datetime" || configObject.type == "datecolumn") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateTimeInput', configObject);
			}else if (configObject.type == "list") {
				configObject.url  =   config.filters[i].url;
				configObject.queryMode  =   config.filters[i].queryMode;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput', configObject);
			}else if (configObject.type == "enum") {
				configObject.enumValues =   config.filters[i].enums;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput', configObject);
			}else if (configObject.type == "enumarray") {
				configObject.enumValues =   config.filters[i].enums;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', configObject);
			}else if (configObject.type == "interval") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.IntervalInput', configObject);
			
			}else if (configObject.type == "button"){
				if(this.gotoButtonMenu){
					this.gotoButtonMenu.add(Ext.create('Ext.menu.Item',{
						text: configObject.label,
						name: configObject.name,
						icon: 'resource/dashboard-layout/image/tools/goto.png',
						handler:function(){
							if(this.value!=undefined){
								window.open(this.value);
							}
						},
						scope: configObject
					}));
					this.gotoButton.setVisible(true);
				}
			} 
			else {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			}
			
			this.fields[i] = resolver;
			
			items.push({
				xtype : 'fieldset',
				style : {
					fontWeight : 'bold !important'
				},
				title : config.filters[i].text, // title or checkboxToggle creates fieldset
								// header
				checkboxToggle : true,
				collapsed : true, // fieldset initially collapsed
				layout : {
					type:'vbox',
					align:'stretch'
				},
				items : [
				         resolver.getController()
				         ]
			});
		}
		
		this.callParent([ Ext.apply(config, {
			title : 'Filters',
			labelWidth : 75, // label settings here cascade unless overridden
			frame : false,
			bodyStyle: 'padding:5px 5px 0',
			width : 300,
			layout : {
				type : 'vbox',
				align : 'stretch'
			},
			buttons : [ {
				text : "Filter",
				icon : 'resource/dashboard-layout/image/grid/filter-old.png',
				tooltip : 'Clear filters',
				tooltipType: "title",
				handler: function(){
					this.doFilter();
				},
				scope:this
			}, {
				text : "Clear",
				icon : 'resource/dashboard-layout/image/tools/cancel.png',
				tooltip : 'Clear filters',
				tooltipType: "title",
				handler: function(){
					this.doClear();
				},
				scope:this
			} ],
			items : items
		}) ]);
	},
	
	doFilter: function(){
		
	},
	
	doClear: function(){
		for (var i in this.fields){
			this.fields[i].clear();
		}
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.components.FilterForm2', {
	require : 'NV.ext.ux.DataTip',
	extend : 'Ext.panel.Panel',
	alias : "BasicFilterForm2",
	config:{
		grid : undefined,
		filters : undefined,
		defaultFilters : undefined
	},
	constructor : function(config) {
		var me = this;
		var items = [];
		this.fields = {};
		this.containers = {};
		for(var i in config.filters){
			var resolver;
			var configObject = {							
					name : i,
					label : config.filters[i].text,
					type : config.filters[i].type,
					value :  config.defaultFilters?config.defaultFilters[i]:""
				};
			if (configObject.type == "boolean") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.BooleanInput', configObject);
			} else if (configObject.type == "float" || configObject.type == "number") {
				configObject.listeners = {
						specialkey: function(field, e){
		                    if (e.getKey() == e.ENTER) {
		                        me.doFilter();
		                    }
		                }
				};
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.NumberInput', configObject);
			} else if (configObject.type == "string") {
				configObject.listeners = {
						specialkey: function(field, e){
		                    if (e.getKey() == e.ENTER) {
		                        me.doFilter();
		                    }
		                }
				};
				configObject.regexp =  config.filters[i].regexp;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			} else if (configObject.type == "date") {
				configObject.listeners = {
						specialkey: function(field, e){
		                    if (e.getKey() == e.ENTER) {
		                        me.doFilter();
		                    }
		                }
				};
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateInput', configObject);
			}else if (configObject.type == "datetime" || configObject.type == "datecolumn") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateTimeInput', configObject);
			}else if (configObject.type == "list") {
				configObject.url  =   config.filters[i].url;
				configObject.queryMode  =   config.filters[i].queryMode;
				configObject.listeners = {
						specialkey: function(field, e){
		                    if (e.getKey() == e.ENTER) {
		                        me.doFilter();
		                    }
		                }
				};
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput', configObject);
				
			}else if (configObject.type == "enum") {
				configObject.listeners = {
						specialkey: function(field, e){
		                    if (e.getKey() == e.ENTER) {
		                        me.doFilter();
		                    }
		                }
				};
				configObject.enumValues =   config.filters[i].enums;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput', configObject);
			}else if (configObject.type == "enumarray") {
				configObject.enumValues =   config.filters[i].enums;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', configObject);
			}else if (configObject.type == "interval") {
				configObject.listeners = {
						specialkey: function(field, e){
		                    if (e.getKey() == e.ENTER) {
		                        me.doFilter();
		                    }
		                }
				};
				configObject.fieldPosition = config.position=='top'?'horizontal':'vertical';
				configObject.processFirstValue=false;
				configObject.process = 'client';
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.IntervalInput', configObject);
			}else if (configObject.type == "object") {
				configObject.serviceType = config.filters[i].serviceType;
				configObject.objectType = config.filters[i].objectType;
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ObjectInput', configObject);
			}
			else {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			}
			
			
			
			this.fields[i] = resolver;
			var currentIndex = i;
			this.containers[i] = Ext.create('Ext.form.FieldContainer',{
				layout: {
					type:'hbox',
					align:"middle"
				},
				hidden : !config.defaultFilters || config.defaultFilters[currentIndex]==undefined,
				items: [
				        resolver.getController(), 
				        {
				        	xtype: "image", 
				        	
				        	src: "resource/dashboard-layout/image/tools/filter-delete-icon.png",
				        	width: 16,
				        	height:16,
				        	margin: '3',
				        	title: "remove filter",
				        	listeners:{
				        		click: {
				        			fn:function(a, b, c){
				        				this.me.containers[this.dataIndex].hide();
				        				this.me.refreshEnabledFilters();

				        			},
					        		element:'el',
					        		scope:{me:this, dataIndex:i}
				        		}
				        	}
				        }
				 ]
			});
			resolver.getController().flex = 1;
			items.push(this.containers[i]);
			
		}
		
		
		this.addFilterCombo = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput',{
			text:"",
			enumValues:Ext.Object.getKeys(this.containers),
			hidden:true,
			forceSelection:false
		});
		
		this.addFilterButton = Ext.create('Ext.button.Button',{
			text:lang.search.addFilter,
			handler:function(){
				
				this.addFilterCombo.show();
				this.addFilterButton.hide();
				this.addFilterCombo.getController().expand();
			},
			scope:this
		});
		
		this.addFilterCombo.addSelectionListener(function(combo, values){
			
			this.addFilterButton.show();

			this.containers[values[0].get('id')].show();
			
			this.refreshEnabledFilters();
			this.addFilterCombo.hide();
			this.addFilterCombo.reset();
			this.fields[values[0].get('id')].getController().focus();
		},this);

		this.addFilterCombo.getController().addListener("blur",function(){
			this.addFilterCombo.hide();
			this.addFilterButton.show();
		}, this);
		
		
		this.filterContainer = Ext.create('Ext.container.Container',{
			xtype:"container",
	       	layout:{
	       		 type:"vbox",
	       		 align:"stretch"
	       	},
	       	items:items
		});
		
		this.callParent([ Ext.apply(config, {
	       	autoScroll:true,
	       	overflowY:true,
			header:config.position == "popup"|| config.position == "top" ? false : undefined,
			title:lang.search.filters,
			labelWidth : 75, // label settings here cascade unless overridden
			frame : false,
			
			bodyStyle: 'padding:5px 5px 0',
			width : 320,
			layout : {
				type : 'vbox',
				align : config.position=='top'?'left':'stretch'
			},
			buttons : [ 
			             {
				text : lang.search.clearFilters,
				icon : 'resource/dashboard-layout/image/tools/cancel.png',
				tooltip : 'Clear filters',
				tooltipType: "title",
				handler: function(){
					this.doClear();
				},
				scope:this
			}, {
				text : lang.search.doFilter,
				icon : 'resource/dashboard-layout/image/grid/filter-old.png',
				tooltip : 'Filter',
				tooltipType: "title",
				handler: function(){
					this.doFilter();
				},
				scope:this
			}],
			items : [
			         this.filterContainer,
			         this.addFilterCombo.getController(),
			         this.addFilterButton
			    ],
			listeners: {
				afterrender: function(){
					this.refreshEnabledFilters();
				},
				scope:this
			}    
			
		}) ]);
	},
	
	refreshEnabledFilters: function(){
		var ret = [];
		var array = Ext.Object.getKeys(this.containers);
		for(var i = 0; i< array.length; i++){
			if(this.containers[array[i]].hidden){
				ret.push({
					id:array[i], 
					label:this.fields[array[i]].label
				});
				
			}
		}
		this.addFilterCombo.store.removeAll();
		this.addFilterCombo.store.add(ret);
		
		if(ret.length==0){
			this.addFilterButton.hide();
			
		}else{
			this.addFilterButton.show();
		}
	},
	
	getFilters: function(){
		var values = {};
		for(var i in this.containers){
			if(!this.containers[i].hidden){
				values[i] = this.fields[i].getValue();
			}
		}
		return values;
	},
	
	doFilter: function(){
		
		
		this.grid.setFilters(this.getFilters());
	},
	
	
	
	doClear: function(){
		for (var i in this.fields){
			this.containers[i].hide();
			this.fields[i].reset();
		}
		this.refreshEnabledFilters();
		this.doFilter();
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.components.Grid', {
	extend:'Ext.panel.Panel',
	config : {
		showChannels : false,
		fields : undefined,
		local : true,
		pageSize : 50,
		dataUrl : undefined,
		measurementData: undefined,
		originalDataUrl: "",
		deleteUrl : "",
		uniqueId : 'id',
		refreshIntervall : 300,
		rules : {},
		actions : {},
		editable : false,
		selectable : false,
		deletable : false,
		readonly : true,
		gridPlugins : undefined,
		dateFormat : 'Y.m.d H:i',
		features : undefined,
		groupField : undefined,
		saveUrl : undefined,
		formValuesUrl: undefined,
		objectType: undefined,
		filterable:true,
		filterConfig:undefined,
		maxHeight:undefined,
		defaultFilters:undefined,
		defaultSorters:undefined,
		enableDownload:false,
		enableUpload:false,
		enableSaveSettings:false,
		downloadUrl:undefined,
		uploadUrl:undefined,
		saveSettingsUrl:undefined,
		enableRefreshInfo:true,
		toolbarVisible:true,
		portletContentObject:undefined,
		askDelete:true
	},

	defRefreshText : "Last refreshed: ",
	id : undefined,

	createRenderers : function() {
		for ( var r = 0; r < this.fields.length; r++) {
			//TODO boolean ra nem megy: this.rules ures 
			if(!this.fields[r]){
				continue;
			}
			if(this.fields[r].type  && 'boolean'==this.fields[r].type)
				continue;
			if (this.rules[this.fields[r].dataIndex] || this.rules["#row#"]) {
				this.rulesFunctions[this.fields[r].dataIndex] = function(val, data, record, rowIndex, colIndex, store) {
					if(val.length>10){
						data.tdAttr = 'data-qtip="' + val + '"';
					}
					try{
						// var parent = findParentByType('Ext.grid.Panel');
						if (data.column != undefined && this.rules[data.column.dataIndex]) {
							for ( var i = 0; i < this.rules[data.column.dataIndex].length; i++) {
								// nézzük meg hogy igaz-e a feltétel
								try {
									var condition = this.rules[data.column.dataIndex][i].condition;
									condition = condition.replace('${', 'record.get("').replace('}', '")').replace('=', '==').replace('===', '==').replace('>==', '>=').replace('<==', '<=');
									condition = eval(condition);
									if (condition) {
										if (this.rules[data.column.dataIndex][i].background) {
											data.style += 'background-color: ' + this.rules[data.column.dataIndex][i].background + ';';
										}
										if (this.rules[data.column.dataIndex][i].foreground) {
											data.style += 'color: ' + this.rules[data.column.dataIndex][i].foreground + ';';
										}
									}
								} catch (ex) {
	
								}
							}
						}
						if (data.column != undefined && this.rules["#row#"]) {
							for ( var i = 0; i < this.rules["#row#"].length; i++) {
								try {
									var condition = this.rules["#row#"][i].condition;
									condition = condition.replace('${', 'record.get("').replace('}', '")').replace('=', '==').replace('===', '==').replace('>==', '>=').replace('<==', '<=');
									condition = eval(condition);
									if (condition) {
										if (this.rules["#row#"][i].background) {
											data.style += 'background-color: ' + this.rules["#row#"][i].background + ';';
										}
										if (this.rules["#row#"][i].foreground) {
											data.style += 'color: ' + this.rules["#row#"][i].foreground + ';';
										}
									}
								} catch (ex) {
	
								}
	
							}
						}
					} catch (ex) {
	
					}
					if(data.column.type=="date" || data.column.type=="datetime"){
						val = Ext.util.Format.date(val, data.column.format);
					}
					if(data.column.type=="enum"){
						for(var i = 0; i < data.column.enums.length; i ++){
							if(data.column.enums[i].id == val){
								return data.column.enums[i].label;
							}
						}
					}
					return val;
				};
			}else{
				this.rulesFunctions[this.fields[r].dataIndex] = function(val, data, record, rowIndex, colIndex, store) {

					if(data.column.type=="date" || data.column.type=="datetime"){
						val = Ext.util.Format.date(val, data.column.format);
					}
					if(data.column.type=="enum"){
						for(var i = 0; i < data.column.enums.length; i ++){
							if(!data.column.enums[i]){
								continue;
							}
							if(data.column.enums[i].id == val){
								return data.column.enums[i].label;
							}
						}
						
					}else if(val.length>10){
						data.tdAttr = 'data-qtip="' + val + '"';
					}
					
					return val;
				}
			}
		}
	},
	
	createStore: function(){
		var store, proxy;
		if(this.dataUrl){
			this.extraParams = {};
			if(!this.local){
				for(var i in this.defaultFilters){
					
					var isObject = false;
					if(this.defaultFilters[i].before){
						this.extraParams[i+"_before"] = this.defaultFilters[i].before;
						isObject = true;
					}
					if(this.defaultFilters[i].after){
						this.extraParams[i+"_after"] = this.defaultFilters[i].after;
						isObject=true;
					}
					if(!isObject){
						this.extraParams[i] = this.defaultFilters[i];
					}
				}
			}
			
			store = Ext.create('Ext.data.Store', {
				model : 'GridModel',
				remoteSort : !this.local,
				remoteFilter : !this.local,
				sorters: this.defaultSorters,
				groupField : this.groupField,
				proxy : {
					type : 'ajax',
					url : this.dataUrl,
					extraParams: this.extraParams,
					reader : {
						type : 'json',
						root : 'list',
						useSimpleAccessors:false
					}
				},
				autoLoad : true,
				pageSize : this.local?500:this.pageSize,

				listeners : {	/** listeners for filter string refresh on top */
					
					refresh : function(store, records, successful, eOpts) {
						this.storeRefreshFunction(store, records, successful, eOpts);
					},

					beforeload: function(store, operation, eOpts){
						if(!this.firstLoaded && this.local){
							this.firstLoaded = true;
							this.setDefaultFilterss();
						}
						else if(this.filterable && this.filterPanel && this.needFilterRefresh){
							this.needFilterRefresh = false;
							this.refreshFilterValues();
						}
						this.needFilterRefresh=true;
					},
					
					scope : this
				}
			});
		}else{			
			store = Ext.create('Ext.data.Store', {
				model : 'GridModel',
				data: this.measurementData,
				

				listeners : {	/** listeners for filter string refresh on top */
					
					refresh : function(store, records, successful, eOpts) {
					//	if(!this.gridFilter.filterClearProgress){
		//					this.storeRefreshFunction(store, records, successful, eOpts);
					//	}
						
					},

					scope : this
				}
			});
		}

		return store;
	},
	
	storeRefreshFunction: function(store, records, successful, eOpts){
		if(this.toolbarVisible){
			this.pagingToolbar.updateInfo();
		}
		
		this.doExtraRefreshAction();
	},
	
	createFieldConfig: function(){
		var fieldConfig = [];
		this.modelFields = [];
		this.fieldNames = {};

		this.createExtraFieldsBefore(fieldConfig);
		
		for ( var i = 0; i < this.fields.length; i++) {
			if(!this.fields[i]){
				continue;
			}
			var modelField = {
				name : this.fields[i].dataIndex,
				type : this.fields[i].type,
				mapping:'["'+this.fields[i].dataIndex+'"]'
			};
			if (modelField.type == "datetimefield" || modelField.type == "datetime" || modelField.type == "date") {
				modelField.convert = function(value, record) {
					
					dateFormat = 'Y-m-d h:i';
					if (value == undefined || value == null || value == 0 || value=="") {
						return "";
					}
					if (value instanceof Date) {
						return value;
					}
					if (!isNaN(value)) {// ha szám, akkor timetsamp és
						
						return new Date(parseInt(value));
					} else {
						value = value.replace(/\./g," ");
						value = value.replace(/-/g," ");
						return new Date(value);
					}

				};
			}
			this.modelFields.push(modelField);

			if (this.fields[i].onTable == false) {
				continue;
			}// ha nincs benne a táblázatban akkor végeztünk

			this.fieldNames[this.fields[i].dataIndex] = this.fields[i].text;
	
			var fconf = this.fields[i];
			fconf.hidden = this.fields[i].visible==false?true:false;
			if (this.rulesFunctions[this.fields[i].dataIndex] != undefined) {
				fconf.renderer = this.rulesFunctions[this.fields[i].dataIndex];
			}

			if (fconf.type == 'date') {
				fconf.xtype = "datecolumn";
				fconf.format = this.dateFormat;
				if (!fconf.readonly) {
					fconf.editor = {
						xtype : 'nvdatefield',
						format : this.dateFormat
					};	
				}
				
			} else if (fconf.type == 'datetime') {
				fconf.xtype = "datecolumn";
				fconf.format = 'Y.m.d H:i:s';
				if (!fconf.readonly) {
					fconf.editor = {
						xtype : 'datetimefield',
						enableDynamic:fconf.enableDynamic
					};
				}
				
			} else if (fconf.type == 'time') {
				fconf.xtype = "gridcolumn";
				if (!fconf.readonly) {
					fconf.editor = {
						xtype : 'nvtimefield2',
						allowBlank : true

					};
				}
			} else if (fconf.type == 'float' || fconf.type == 'number') {
				
				fconf.xtype = "numbercolumn";
				fconf.format = fconf.type == 'float' ?'0,000.00':'0';
				if (!fconf.readonly) {
					fconf.editor = {
						xtype : 'numberfield',
						allowBlank : false,
						minValue: 0
						
					};
				}
				
			} else if (fconf.type == 'boolean') {
				fconf.type= 'boolean',
				fconf.xtype = 'checkcolumn';
				fconf.stopSelection = false;
				fconf.disabled = true;
				fconf.disabledCls = '';
				fconf.maskOnDisable = false;
				if (!fconf.readonly) {
					fconf.editor = {
						xtype : 'checkbox',
						editable : false,
						readonly : true,
						cls : 'x-grid-checkheader-editor'
					};
				} 
			} else if (fconf.type == 'enum') {
				fconf.enums = this.fields[i].enums;
				if (!fconf.readonly) {
					fconf.editor = Ext.create('Ext.form.field.ComboBox', {
						typeAhead : true,
						triggerAction : 'all',
						selectOnTab : true,
						store : this.fields[i].enums,
						lazyRender : true,
						listClass : 'x-combo-list-small'
					});
				}

			} else if (fconf.type == 'list') {
				fconf.url = this.fields[i].url;
				if (!fconf.readonly) {
					Ext.define('BaseList', {
						extend : 'Ext.data.Model',
						fields : [ {
							name : "label",
							type : 'string'
						}, {
							name : "id",
							type : 'string'
						} ]
					});

					var store = Ext.create('Ext.data.Store', {
						model : 'BaseList',
						autoLoad : true,
						proxy : {
							type : 'ajax',
							url : fconf.url,
							reader: {
					            type: 'json',
					            root: 'list',
				            	readRecords: function(data) {
				                    var root = this.root;
				                    
				                    var list = [];
				                    
				    				for(var i = 0; i<data[root].length; i++){
				    					if(!Ext.isObject(data[root][i])){
				    						list.push({id:data[root][i], label:data[root][i]});
				    					}else{
				    						list.push(data[root][i]);
				    					}
				    					
				    				}
				    				
				                    return this.superclass.readRecords.call(this, list);
				                }
					        }
						}
					});

					fconf.editor = Ext.create('Ext.form.field.ComboBox', {
						typeAhead : true,
						triggerAction : 'all',
						selectOnTab : true,
						store : store,
						displayField : "label",
						valueField : "id",
						lazyRender : true,
						listClass : 'x-combo-list-small'
					});
				}

			} else {
				if (!fconf.readonly) {
					fconf.editor = {

					};
				}
			}

			if (this.fields[i].width) {
				if(!isNaN(this.fields[i].width)){
					fconf.width += "px";
				}
				if (this.fields[i].width.match("[%]")) {
					fconf.flex = parseInt(this.fields[i].width);
				} else if (this.fields[i].width.match("px")) {
					fconf.width = parseInt(this.fields[i].width);
				} else {
					fconf.flex = 100;
				}

			} else if(!this.fields[i].columns){//its not a group column
				fconf.flex = 100;
			}

			fieldConfig.push(fconf);
		}
		return fieldConfig;
	},
	
	validate: function(config){
		if(config.local && (config.filterConfig && config.filterConfig.filters)){
			Ext.Msg.alert("Grid configuration error", "Local filtering do not support custom filters!<br>Modify to local=false, or delete the filterConfig.filters.");
			return false;
		} 
	/*	if redef the save method, url doesn't need
	 * if(config.enableSave && !config.saveUrl){
			Ext.Msg.alert("Grid configuration error", "Grid settings save enabled, but no saveUrl found!");
			return false;
		}*/
		if(!config.local && config.enableDownload && !config.downloadUrl){
			Ext.Msg.alert("Grid configuration error", "Downloading is enabled, but no downloadUrl found!");
			return false;
		}
		if( config.enableUpload && !config.uploadUrl){
			Ext.Msg.alert("Grid configuration error", "Uploading is enabled, but no uploadUrl found!");
			return false;
		}
		return true;
	},
	
	constructor : function(config) {
		this.firstConfig = Ext.clone(config);
		this.defRefreshText = lang.grid.refreshText;
		if(this.firstConfig){
			//ez mi?
			delete this.firstConfig.portletContentObject;
		}
		
		if(!this.validate(config)){
			this.callParent();
			return;
		}
		if(!this.gridPlugins){
			this.gridPlugins = [];
		}
		if(!this.features){
			this.features = [];
		}
		this.extraFilters = [];
		
		this.rules = {},
		this.rulesFunctions = {},
		this.actions = {},
		
		this.initConfig(config);
		if(this.enableSaveSettings){
			this.mergeUserDefinedSettings(config.userDefinedSettings);
		}
		if(this.defaultSorters){
			this.lastSort = this.defaultSorters[0];
		}
		
		
		this.originalDataUrl = this.dataUrl;
		
		this.createRenderers();

	//	this.portletContentObject = portletContentObject;

		/**
		 * create fields
		 */
		
		var fieldConfig = this.createFieldConfig();
		

		/**
		 * create extra fields
		 */
		this.createExtraFieldsAfter(fieldConfig);
		
		Ext.define('GridModel', {
			extend : 'Ext.data.Model',
			fields : this.modelFields
		});

		/**
		 * create store
		 */
		
		this.store = this.createStore();

		/**
		 * create the filter panel
		 */
		
		if(this.filterable){
			this.createFilterPanel();
		}
		
		
		var dockedItems = [];
		
		this.createDockedItems(dockedItems);
		
		if(this.toolbarVisible && this.dataUrl){
			this.pagingToolbar = Ext.create('NV.dashboard.layout.dashboard.components.tools.GridPagingToolbar',{
				store : this.store,
				dock : 'bottom',
				displayInfo : true,
				displayMsg : '{0} - {1} / {2}',
				emptyMsg : "No data to display",
				lastRefreshedText: this.defRefreshText,
				showRefreshTime: this.enableRefreshInfo
			});
			dockedItems.push(this.pagingToolbar);
		}
		

		/**
		 * create the grid
		 */		
		var columns = fieldConfig;
		var selectionType = this.selectable ? 'checkboxmodel' : 'rowmodel';
		this.grid = Ext.create('Ext.grid.Panel', {
			// title: this.config.title,
			rules : this.rules,
			header : false,
			frame : false,
			border:false,
			bodyBorder:false,
			padding:'0',
			margin: '0',
			features : this.features,
			store : this.store,
			columns : columns,
			flex : 1,
			selType : selectionType,
			selModel:{
				toggleOnClick:false,
				mode:selectionType=='rowmodel'?'SINGLE':'SIMPLE',
				pruneRemoved: false
			},
			maxHeight:this.maxHeight,
			viewConfig:{
				enableTextSelection: true 
				},
			listeners : {
				viewready: function(grid){
			      if(this.filterable){
				      this.storeRefreshFunction();
		//		      this.store.getProxy().extraParams = {};
			      }
			    },
			   
				sortchange : function(ct, column, direction, eOpts) {					
					this.lastSort = {
							property:column.dataIndex,
							direction:direction.toLowerCase()
					};
				},
				cellclick : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {
					if ((this.editable && cellIndex > 0) || !this.editable) {

						this.handleAction(this, record.get(this.uniqueId), grid, record, e, cellIndex);
					}

				},
				celldblclick : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {
					if ((this.editable && cellIndex > 0) || !this.editable) { 

						this.handleDBClickAction(this, record.get(this.uniqueId), grid, record, e);
					}

				},						  
				cellcontextmenu: function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {
					if ((this.editable && cellIndex > 0) || !this.editable) { 
						this.handleRightClickAction(this, record.get(this.uniqueId), grid, record, e);
					}
					return false;
				}, 
				selectionchange: function(grid, selected, eOpts ){
					this.selectionChange(grid, selected, eOpts);
				},
				select: function(grid, record, index, eOpts ){
					this.select(grid, record, index, eOpts);
				},
				deselect: function(grid, record, index, eOpts ){
					this.deselect(grid, record, index, eOpts);
				},
				
				scope : this
			},
			plugins : this.gridPlugins,
			
			dockedItems : dockedItems
		});
		
		
		
		if (this.config.refreshIntervall) {
			this.refreshIntervall = this.config.refreshIntervall;
		} else {
			this.refreshIntervall = 30;
		}
		
		
		this.innerContainer = Ext.create('Ext.panel.Panel',{
			dockedItems : [this.topItems],
			layout:{
				type:'hbox',
				align:'stretch'
			},
			border:false,
			bodyBorder:false,
			region:'center',
			items: this.grid
		});
		var items;
		
		if(this.filterPanel && this.filterConfig.position != "popup"){
			items = [this.innerContainer, this.filterPanel];
		}else{
			items = [this.innerContainer];
		}
		
		
		this.callParent([Ext.apply(config,
				{
				layout: {
					type:'border'
				},
				items: items,
				flex: 1,
				cls: "noPaddingToolbar"
			})]);
	},

	createFilterPanel : function(){
		
		if(!this.filterConfig){
			
			this.filterConfig = {
				position:"left",
				collapseMode:'header'
			};
		}
		if(!this.filterConfig.filters){
			this.filterConfig.filters = {};
			for(var i=0; i<this.fields.length; i++){
				if(this.fields[i]){
					var filterObject =  Ext.clone(this.fields[i]);
					if(filterObject.type == "datetime"){
						filterObject.type = "interval";
					}
					if(filterObject.filterable != false){
						this.filterConfig.filters[this.fields[i].dataIndex] = filterObject;
					}
				}
			}
		}
		
		var region = "west";
		if(this.filterConfig.position=="left"){
			region = "west";
		}else if(this.filterConfig.position=="right"){
			region = "east";
		}else if(this.filterConfig.position=="top"){
			region = "north";
		}else if(this.filterConfig.position=="bottom"){
			region = "south";
		}
		
		if(this.filterConfig.position!="popup"){
			this.filterPanel = Ext.create('NV.dashboard.layout.dashboard.components.FilterForm2',Ext.apply(this.filterConfig,{
				collapsible: true,
				collapsed:Ext.Object.isEmpty(this.defaultFilters),
				split: true,
				region:region,
				defaultFilters: this.defaultFilters,
				grid: this,
				collapseMode:this.filterConfig.collapseMode?this.filterConfig.collapseMode:undefined
			}));
		}else{
			this.filterPanel = Ext.create('NV.dashboard.layout.dashboard.components.FilterForm2',Ext.apply(this.filterConfig,{
				defaultFilters: this.defaultFilters,
				grid: this
			}));
			this.filterWindow = Ext.create("Ext.window.Window",{
				title:"Filter settings",
				items: this.filterPanel,
				layout:'fit',
				width:"300px",
				height:"400px",
				closeAction:"hide",
				modal:true
			});
		}
		
	},
	
	createDockedItems : function(dockedItems) {
		
		if(!(this.selectable || !this.readonly || this.deletable || (this.filterable && this.filterConfig.position=="popup"))) return;
		var deletButton;
		
		var needToolbar = false;
		
		if (this.deletable) {
			needToolbar = true;
			deletButton = {
				xtype : 'button',
				icon : 'resource/dashboard-layout/image/grid/delete.png',
				tooltip : 'Delete selected rows',
				tooltipType: "title",
				listeners : {
					click : function() {
						if(this.askDelete){
							this.doAskDelete();
						}else{
							this.doDeleteRow();
						}
						
					},
					scope : this
				}
			};
		}

		this.newButton = undefined;
		if (!this.readonly) {
			needToolbar = true;
			this.newButton = {
				xtype : 'button',
				icon : 'resource/dashboard-layout/image/grid/add.png',
				tooltip : 'New item',
				tooltipType: "title",
				width:24,
				height:24,
				listeners : {
					click : function() {
						this.showNewForm();
					},
					scope : this
				}
			};
		}
		
		if(this.enableDownload){
			needToolbar = true;
			this.downloadButton = {
					xtype : 'button',
					icon : 'resource/dashboard-layout/image/grid/download.png',
					tooltip : 'Download data in CSV',
					tooltipType: "title",
					width:24,
					height:24,
					listeners : {
						click : function() {
							this.downloadData();
						},
						scope : this
					}
				};
		}
		if(this.enableUpload){
			needToolbar = true;
			this.uploadButton = {
					xtype : 'button',
					icon : 'resource/dashboard-layout/image/grid/upload.png',
					tooltip : 'Upload CSV data',
					tooltipType: "title",
					width:24,
					height:24,
					listeners : {
						click : function() {
							this.uploadData();
						},
						scope : this
					}
				};
		}
		if(this.enableSaveSettings){
			needToolbar = true;
			this.saveButton = {
					xtype : 'button',
					icon : 'resource/dashboard-layout/image/tools/save.png',
					tooltip : 'Save grid settings',
					tooltipType: "title",
					width:24,
					height:24,
					listeners : {
						click : function() {
							this.saveGridSettings();
						},
						scope : this
					}
				};
		}
		
		if(this.filterConfig && this.filterConfig.position=="popup"){
			needToolbar = true;
			this.filterButton = {
					xtype : 'button',
					icon : 'resource/dashboard-layout/image/grid/filter.png',
					tooltip : 'Open filter dialog',
					tooltipType: "title",
					width:24,
					height:24,
					listeners : {
						click : function() {
							this.filterWindow.show();
						},
						scope : this
					}
				};
		}
		
		if(needToolbar){
			this.topItems = {
					xtype : 'toolbar',
					dock : 'top',
					items : [ this.newButton, deletButton, this.downloadButton, this.uploadButton, this.saveButton, this.filterButton]
				};
		}
		
		

		if (this.local) {
			this.store.remoteSort = false;
		}
		
	},

	createExtraFieldsBefore : function(fieldConfig) {
		if (this.editable) {
			fieldConfig.push({
				menuDisabled : true,
				sortable : false,
				xtype : 'actioncolumn',
				width : 30,
				items : [ {
			//		icon : 'resource/sencha-extjs/resources/themes/images/default/tree/folder-open.gif', 
					icon: 'resource/dashboard-layout/image/grid/edit.png',
					tooltip : 'Edit',
					handler : function(grid, rowIndex, colIndex) {
						var rec = grid.getStore().getAt(rowIndex);
						this.handleEdit(rec, grid);
					},
					scope : this
				} ]
			});
		}
	},

	showNewForm : function() {
		var editForm = Ext.create('NV.dashboard.layout.dashboard.components.EditForm', {
			fieldDefinitions : this.grid.view.getGridColumns(),
			saveUrl : this.saveUrl,
			deleteUrl : this.deleteUrl,
			values : {},
			uniqueId : 0,
			parentGrid : this

		});

		this.editWindow = Ext.create('Ext.window.Window', {
			closable : true,
			modal : true,
			title : "New item",
			items : editForm,
			width: 700
		});
		this.editWindow.show();
	},

	createExtraFieldsAfter : function(fieldConfig) {
		
	},

	handleEdit : function(rec, grid) {

		var editForm = Ext.create('NV.dashboard.layout.dashboard.components.EditForm', {
			fieldDefinitions : grid.getGridColumns(),
			saveUrl : this.saveUrl,
			deleteUrl : this.deleteUrl,
			values : rec.data,
			deletable: this.deletable,
			
			uniqueId : rec.get(this.uniqueId),
			parentGrid : this

		});

		this.editWindow = Ext.create('Ext.window.Window', {
			closable : true,
			modal : true,
			title : this.uniqueId + " - " + rec.get(this.uniqueId),
			items : editForm,
			bodyBorder: false,
			layout: 'fit'
		});
		this.editWindow.show();

	},
	                     
	handleAction : function(scope, id, grid, record,e, cellIndex) {
		if(Ext.Object.isEmpty(scope.actions)){ return; }
		if(scope.actions){
			if (scope.actions['#row#']) {
				for ( var a = 0; a < scope.actions['#row#'].length; a++) {
					if(scope.actions['#row#'][a].eventType==undefined || scope.actions['#row#'][a].eventType=="click"){
						var action = Ext.create('NV.dashboard.actionhandler.ActionHandler',{
							portletContentObject: scope.portletContentObject,
							action: scope.actions['#row#'][a],
							isModel:true,
							context: "this.scope.get",
							scope: record,
							event: e
							
						});
						action.doAction();
					}				
				}
			}
			if(scope.actions[scope.grid.columns[cellIndex].dataIndex]){
				for ( var a = 0; a < scope.actions[scope.grid.columns[cellIndex].dataIndex].length; a++) {
					if(scope.actions[scope.grid.columns[cellIndex].dataIndex][a].eventType==undefined || scope.actions[scope.grid.columns[cellIndex].dataIndex][a].eventType=="click"){
						var action = Ext.create('NV.dashboard.actionhandler.ActionHandler',{
							portletContentObject: scope.portletContentObject,
							action: scope.actions[scope.grid.columns[cellIndex].dataIndex][a],
							isModel:true,
							context: "this.scope.get",
							scope: record,
							event: e
							
						});
						action.doAction();
					}				
				}
			}
		}
		
	},

	handleDBClickAction : function(scope, id, grid, record,e){
		var hasAction = false;
		if (scope.actions['#row#']) {
			for ( var a = 0; a < scope.actions['#row#'].length; a++) {
				if(scope.actions['#row#'][a].eventType=="dblclick"){
					hasAction = true;
					var action = Ext.create('NV.dashboard.actionhandler.ActionHandler',{
						portletContentObject: scope.portletContentObject,
						action: scope.actions['#row#'][a],
						isModel:true,
						context: "this.scope.get",
						scope: record,
						event: e
						
					});
					action.doAction();
				}				
			}
		}
		if(!hasAction && this.editable){
			this.handleEdit(record, grid);
		}
	},
	
	handleRightClickAction : function(scope, id, grid, record,e) {
		if (scope.actions['#row#']) {

			for ( var a = 0; a < scope.actions['#row#'].length; a++) {
				if(scope.actions['#row#'][a].eventType=="rightclick"){
					var action = Ext.create('NV.dashboard.actionhandler.ActionHandler',{
						portletContentObject: scope.portletContentObject,
						action: scope.actions['#row#'][a],
						isModel:true,
						context: "this.scope.get",
						scope: record,
						event:e
					});
					action.doAction();
				}				
			}
		}
	},

	refreshFunction : function() {
		if(this.refreshIntervall!=undefined && this.refreshIntervall>0){
			if (this.task) {
				this.task.cancel();
			}
			this.task = new Ext.util.DelayedTask(function() {
				try {
					this.doRefresh();
					this.refreshFunction();
				} catch (e) {

				}
			}, this);

			this.task.delay(this.refreshIntervall * 1000);
		}
		
	},

	addExtraParamsToStoreUrl: function(params){
		this.dataUrl = Ext.String.urlAppend(this.originalDataUrl, params);
		this.store.proxy.url = this.dataUrl;
	},
	
	
	doRefresh : function() {
		try{
			this.store.load();
		}catch(e){}
		
	},

	enableAutoRefresh : function() {
		this.doRefresh();
		this.refreshFunction();
	},
	disableAutoRefresh : function() {
		if (this.task) {
			this.task.cancel();
		}
	},

	/**
	 * run after every store refresh (by timer or by click on refresh button)
	 */
	doExtraRefreshAction : function() {

	},

	/**
	 * run after selection changed
	 */
	selectionChange: function(grid, selected, eOpts){
		
	},
	
	select: function( grid, record, index, eOpts){
		
	},
	
	deselect: function( grid, record, index, eOpts){
		
	},
	
	doAskDelete: function(){
		
		Ext.Msg.show({
		    title: lang.messages.confirmDelete,
		    msg: lang.messages.confirmDeleteMessage,
		    width: 300,
		    buttons: Ext.Msg.YESNO,
		    icon: Ext.Msg.QUESTION,
		    fn:function(buttonId, text, opt){
		    	if(buttonId == 'yes'){
		    		this.doDeleteRow();
		    	}
		    },
		    scope:this
		});
	},
	
	doDeleteRow : function() {
		if (this.deleteUrl == undefined) {
			Ext.Msg.alert('Config error', 'No delete URL specified');
			return;
		}
		var ids = [];
		for ( var i = 0; i < this.grid.selModel.selected.items.length; i++) {
			ids.push(this.grid.selModel.selected.items[i].get(this.uniqueId));
		}

		
		
		Ext.Ajax.request({
			url : this.deleteUrl,
			scope : this,
			jsonData : {
				objectIds : ids
			},
			success : function(response) {
				if (response.responseText.match('error') || response.responseText.match('Error')) {
					Ext.Msg.alert('Status', 'Delete error');
				} else {
					
					this.doRefresh();
					this.grid.selModel.deselectAll();
				}
			},
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			}
		});
	},

	getDataRow : function(id) {
		return this.store.findRecord(this.uniqueId, id);
	},

	setDefaultFilterss: function(){
		this.lastFilterValues = this.defaultFilters;
		if(this.filterable){
			if(this.local){
				this.setFilters(this.defaultFilters);
				if(this.defaultSorters){
					for(var i = 0; i<this.defaultSorters.length; i++){
						this.store.sort(this.defaultSorters[i].property, this.defaultSorters[i].direction);
					}	
				}
			}else{	//set when the store is created, nothing need now (just one data load)
				
			}
		}
	},
	
	setFilters: function(filterVals, noLoad){
		this.lastFilterValues = filterVals;
		if(this.filterable){
			if(this.local){
				if(filterVals){
					this.store.clearFilter();
					for(var i in filterVals){
						var type="string";
						for(var j=0; j<this.config.fields.length; j++){
							if(this.config.fields[j].dataIndex == i){
								type = this.config.fields[j].type;
							}
						}
						
						if(type=="date" || type=="datetime"){
							var filterVal = filterVals[i];
							var index = i;
							this.store.filterBy(function(record){
								if (record.get(index)){
									if(filterVal.after && !filterVal.before){
										return record.get(index).getTime()>=filterVal.after;
									}else if(!filterVal.after && filterVal.before){
										return record.get(index).getTime()<=filterVal.before;
									}
									else if(filterVal.after && filterVal.before){
										return record.get(index).getTime()>=filterVal.after && record.get(index).getTime()<=filterVal.before;
									}
									return false;
								}
								return false;
							});
						}else{
							this.store.filter(i, filterVals[i]);
						}
						
					}	
				}
			}else{
				if(filterVals){
					this.store.getProxy().extraParams = {};
					for(var i in filterVals){	
						var isObject = false;
						if(filterVals[i].before){
							this.store.getProxy().extraParams[i+"_before"] = filterVals[i].before;
							isObject = true;
						}
						if(filterVals[i].after){
							this.store.getProxy().extraParams[i+"_after"] = filterVals[i].after;
							isObject=true;
						}
						if(!isObject){
							this.store.getProxy().extraParams[i] = filterVals[i];
						}
					}
					if(!noLoad)this.store.load();
				}
			}
		}
	},
	
	refreshFilterValues: function(){
		this.setFilters(this.filterPanel.getFilters(), true);
	},
	
	downloadData: function(){
		if(!this.downloadUrl){
			
			var records = this.store.getRange();
			var firstline = '';
			var str = '';
			for (var i = 0; i < records.length; i++) {
	            var datai = records[i].data;
	            var line = '';
	            for(var index in datai){
	            	if(i==0){
	            		if (firstline != '') firstline += ';';
	            		firstline += index ;
	            	}
	            	if (line != '') line += ';';
	                 line += datai[index];
	            }
	            str += line + '\r\n';
	        }
			str = firstline + '\r\n' + str;			
			download(str, 'data.csv', 'application/csv');
			
			
		}else if(this.downloadUrl){
			var paramstring = "";
			
			for(var i in this.store.getProxy().extraParams){
				if(paramstring != '') paramstring += "&";
				paramstring += i + "=" + this.store.getProxy().extraParams[i];
			}
			window.open(this.downloadUrl+"?objectId="+this.uniqueId);
			window.open(this.downloadUrl+"?"+paramstring);
			/**
			 * the server need set:
			 *  HttpContext.Current.Response.ContentType = "application/octet-stream";
  				HttpContext.Current.Response.AddHeader("Content-Disposition", 
                    "attachment; filename=" + SaveAsThisFileName);
			 */
		}else{
			Ext.Msg.alert("configuration error","No download url specified!");
		}
	},
	
	//file upload window
	uploadData: function(){
		this.uploadForm = Ext.create('Ext.form.Panel', {
		    bodyPadding: 10,
		    frame: true,
		    items: [{
		        xtype: 'filefield',
		        name: 'file',
		        fieldLabel: 'File',
		        labelWidth: 50,
		        msgTarget: 'side',
		        allowBlank: false,
		        anchor: '100%',
		        buttonText: 'Browse'
		    }],

		    buttons: [{
		        text: 'Upload',
		        handler: function() {
		            var form = this.uploadForm;
		            if(form.isValid()){
		                form.submit({
		                    url: this.uploadUrl,
		                    waitMsg: 'Uploading file....',
		                    success: function(fp, o) {
		                        Ext.Msg.show('Success', 'File "' + o.result.file + '" has been uploaded.');
		                        this.uploadForm.up('window').hide();
		                    },
		                    failure: function(fp, o){
		                    	var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(o.response.responseText);
		        				if(!json){
		        					return;
		        				}	
		                    }
		                });
		            }
		        },
		        scope:this
		    }]
		});
		var w = Ext.create('Ext.window.Window',{
			title: 'Upload a file',
			layout:'fit',
			modal:true,
			width:300,
			items: [this.uploadForm]
		});
		w.show();
	},
	
	
	collectUserdefinedSettings: function(){
		var settings={};
		if(this.filterPanel){
			settings.defaultFilters = this.filterPanel.getFilters();
		}
		if(this.lastSort){
			settings.defaultSorters = [this.lastSort];
		}
		
		settings.columns = {};
		var cols = this.grid.getView().getGridColumns();
		for(var i=0; i<cols.length; i++){
			if(cols[i].dataIndex && cols[i].dataIndex!=""){
				settings.columns[cols[i].dataIndex]={
					dataIndex: cols[i].dataIndex,
					index: i,
					width: cols[i].width,
					visible:true
				};
			}
		}
		
		for(var i=0; i<this.fields.length; i++){
			if(!settings.columns[this.fields[i].dataIndex]){
				settings.columns[this.fields[i].dataIndex] = {
					dataIndex: this.fields[i].dataIndex,
					width: this.fields[i].width,
					visible: false
				};
			}
		}
		
		return settings;
	},
	
	/*
	 * save the current user specified settings.
	 * Can save: the columns order, columns size, sorters, filters
	 */
	saveGridSettings: function(){
		
		var settings = this.collectUserdefinedSettings();
		
		Ext.Ajax.request({
			url:this.saveSettingsUrl,
			params: Ext.encode(settings),
			success:function(response){
				var value = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
				if(!value){
					return;
				}
				Ext.Msg.show("Settings saved","User specified settings successfully saved!");
				
			},
			scope:this,
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			}
		});
	},
	/*
	 * load the grid user specified settings, call in the constructor before the grid was maded
	 */
	mergeUserDefinedSettings: function(settings){
		if(settings && !Ext.Object.isEmpty(settings)){
			this.defaultFilters = settings.defaultFilters;
			this.defaultSorters = settings.defaultSorters;
			if(settings.columns){
				for(var i = 0; i < this.fields.length; i ++){
					if(settings.columns[this.fields[i].dataIndex]){
						this.fields[i].columnIndex = settings.columns[this.fields[i].dataIndex].index;
						this.fields[i].width = settings.columns[this.fields[i].dataIndex].width;
						this.fields[i].visible = settings.columns[this.fields[i].dataIndex].visible==undefined?true: settings.columns[this.fields[i].dataIndex].visible;
					}
				}
				Ext.Array.sort(this.fields, function(a,b){
					if(a.index < b.index){return true;}
					else {return false;}
				});
			}
		}
	}
});

// @tag dashboard-layout

Ext.define('NV.dashboard.layout.dashboard.components.tools.GridFilter',{
	require: 'NV.ext.ux.grid.FiltersFeature',
	extend: 'NV.ext.ux.grid.FiltersFeature',
	
	config:{
		filterCls:"filteredColumn"
	},
	
	clearFilters : function () {
        this.filterClearProgress = true;
		this.filters.each(function (filter) {
            filter.setActive(false,true);
        });
		this.filterClearProgress = false;
    },
	
	 buildQuery : function (filters) {
	        var p = {}, i, f, root, dataPrefix, key, tmp,
	            len = filters.length;

	        if (!this.encode){
	            for (i = 0; i < len; i++) {
	                f = filters[i];
	                root = [this.paramPrefix, '[', i, ']'].join('');
	                p[root + '[field]'] = f.field;

	                dataPrefix = root + '[data]';
	                for (key in f.data) {
	                    p[[dataPrefix, '[', key, ']'].join('')] = f.data[key];
	                }
	            }
	        } else {
	            tmp = [];
	            for (i = 0; i < len; i++) {
	                f = filters[i];
	                if(f.data.type=="datetime" || f.data.type=="date"){
						var val = f.data.value;
	                	if(f.data.value instanceof Date){
							val = val.getTime();
						}  
	                	if(f.data.comparison=="lt"){
							  p[f.field+'_before'] = val;
						  }else if(f.data.comparison=="gt"){
							  p[f.field+'_after'] = val;
						  }else {
							  p[f.field+'_before'] = val;
							  p[f.field+'_after'] = val;
						  }
					}else if(f.data.type=="list" && f.field=='severity'){
						p[f.field] = f.data.value[0].substring(2);
					}else if(f.data.type=="list" ){
						p[f.field] = f.data.value[0];
					}
	                else{
						  p[f.field] = f.data.value;
					  }
	            }
	        }
	        return p;
	    }
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.components.tools.GridPagingToolbar',{
	extend: 'Ext.toolbar.Paging',
	config:{
		lastRefreshedText: "Last refreshed: ",
		dateFormat: "H:i:s",
		showRefreshTime:true
	},
	
	constructor: function(config){
		config.lastRefreshedText += "{0}";
		this.callParent([config]);
	},
	
	getPagingItems: function(){
		var items = this.callParent();
		if(this.showRefreshTime){
			items.push({
		
	            xtype: 'tbtext',
	            itemId: 'lastRefreshTimeTextItem',
	            text: Ext.String.format(this.lastRefreshedText, new Date())
	        });
		}
		return items;
	},
	
	updateInfo : function(){
		this.callParent();
		var item = this.child('#lastRefreshTimeTextItem');
		if(item){
			item.setText(Ext.String.format(this.lastRefreshedText, Ext.Date.format(new Date(), this.dateFormat)));
		}
		
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.PortletContent',{
	extend: 'NV.dashboard.layout.dashboard.ModelObserver',
	originalUrl : "",
	getParameterTryCount : 0,
	maxTryNumber: 2,
	config:{
		model: undefined,
		view: undefined,
		portlet: undefined,
		content: undefined,
		type:undefined,
		layout:"fit"
	},
	
	constructor: function(config){
		
		this.initConfig(config);
		var c = Ext.create('Ext.container.Container',{
			layout:this.layout,
			flex:1
		});
		var layout = 'fit';
		var items = [c];
		this.contentContainer = c;
		var description = this.model.get('description');
		if( description && description.text){

			var descriptionPanel = {
					xtype: 'panel',
					header:false,
					border:false,
					margin:'0 0 0 0',
					bodyBorder:false,
					html : description.text};
			if(description.align == 'top'){
				layout = {
						type : 'vbox',
						align : 'stretch'
					};
				items = [descriptionPanel, c];
			}else if(description.align == 'left'){
				layout = {
						type : 'hbox',
						align : 'stretch'
					};
				items = [descriptionPanel, c];
			}else if(description.align == 'right'){
				layout = {
						type : 'hbox',
						align : 'stretch'
					};
				items = [c, descriptionPanel];
			}else if(description.align == 'bottom'){
				layout = {
						type : 'vbox',
						align : 'stretch'
					};
				items = [c, descriptionPanel];
			}
			
		}
		
		this.view = Ext.create('Ext.container.Container',{
			header : false,
			border:false,
			bodyBorder:false,
			flex:1,
			layout:layout,
			items:items
		});
		this.portlet.addContent(this.view);
		this.model.addObserver(this, this.refreshByModel, this);
	},
	
	stopRefresh: function(){
		
	},
	/**
	 * refresh the store, every content has a different store refresher
	 */
	refreshStore: function(){
		
	},
	
	startRefresh: function(){
		
	},
	/**
	 * refresh the full content
	 */
	refresh: function(){
		if(this.model.get("content")){
			if(!this.view.rendered){
				this.view.addListener("render", function(){
					this.doOnRender();
				}, this);
			}else{
				this.doOnRender();
			}
		}else{
			this.view.html = "Missing content!";
		}
	},
	
	doOnRender: function(){
		var json = this.model.get('content');
		if(json.error==undefined){
			this.contentContainer.removeAll();
			this.contentContainer.add(this.createContent(json));
			this.contentContainer.doLayout();
		}else{
			this.contentContainer.InnerHTML = json.error;
		}
		this.contentContainer.setLoading(false);			

	},
	
	
	/**
	 * call when the portlet model change
	 * @param what
	 * @param scope
	 */
	refreshByModel: function(what, scope){
        if(what!=undefined){
        	if(what.content){
        		scope.refresh();
        	}
        	if(what.refreshJobs){
        		scope.refreshSchedulers(scope.model.get('refreshJobs'));
        	}
            
        }
	},
	
	refreshSchedulers : function(refreshJobs) {
		
	}
	
});

// @tag dashboard-layout
Ext.require('NV.chart.library.ChartDrawer');
Ext.define('NV.dashboard.layout.dashboard.content.ChartContent', {
	
	extend : 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.chart' ],
	
	config : {
		model : undefined,
		view : undefined,
		portlet : undefined,
		jobs:undefined
	},

	constructor : function(config) {
		Ext.require('NV.chart.library.ChartDrawer');
		this.callParent([Ext.apply(config, {
			jobs:[],
			type:'chart',
			layout:{ 
				type:'hbox',
				align:'stretch'
			}
		})]);
		
		this.view.addListener('resize',function(){
			if(this.chartArray){
				for(var i = 0; i < this.chartArray.length; i ++){
					if(this.chartArray[i].drawAMChart)
					this.chartArray[i].drawAMChart();
				}
			}
		}, this);
	},

	doOnRender: function(){
		var json = this.model.get("content");
		if(json.error==undefined){
			this.drawCharts(json);
			this.contentContainer.removeAll();
			for ( var i in this.chartArray) {
				this.contentContainer.add(this.chartArray[i].chartContent);
			}
			this.contentContainer.doLayout();
		}else{
			this.contentContainer.InnerHTML = json.error;
		}
		this.contentContainer.setLoading(false);
		this.refreshSchedulers(this.model.get("refreshJobs"));
		
	},
	
	drawCharts : function(json, type) {
		Ext.require('NV.chart.library.ChartDrawer');
		NV.chart.library.ChartDrawer.serverUrls = this.portlet.dashboard.model.get("urls");
		this.chartArray = [];
		for ( var i = 0; i < json.measurements.length; i++) {
			
			for(var j=0; j<this.model.get("properties").length; j++){
				if(this.model.get("properties")[j].name=='colorList'){
					this.model.get("properties")[j].defaultValue = json.measurements[i].colors;
				}
			}
			json.measurements[i].standAlone = false;
			var chart = NV.chart.library.ChartDrawer.drawChartFromJson(json.measurements[i], this);
			
			if(json.layout && json.layout.flexes){
				chart.chartContent.flex=json.layout.flexes[i];
			}else{
				chart.chartContent.flex=1;
			}
			
			this.chartArray.push(chart);

		}
		return this.chartArray;

	},

	/**
	 * csak a dataUrl-t kell frissítenia  chartokon belűl
	 */
	refreshStore: function(){
		this.refreshSchedulers(this.model.get("refreshJobs"));
	},
	
	addExtraParamsToRefresh: function(extraParams){
		this.extraDataParams = extraParams;
		this.refreshSchedulers(this.model.get("refreshJobs"));
	},
/*	
	propagateParams: function(params){
		this.portlet.model.beginEdit();
		this.portlet.model.set('output', params);
		this.portlet.model.endEdit();
	},
	*/
	createExtraParams : function(){
		var ret =  {};
		Ext.apply(ret, this.extraDataParams);
		if(this.chartArray[0].resolutionBySize){
			Ext.apply(ret,{resolution:this.chartArray[0].getPlotSize()});
		}
		return ret;
		
	},
	
	refreshSchedulers : function(refreshJobs) {
		for(var i=0 ; i<this.jobs.length; i++){
			this.jobs[i].stop();
		}
		this.jobs = [];		
		for ( var i = 0; i < refreshJobs.length; i++) {
			if (refreshJobs[i].refreshType == 'storeRefresh') {
				if(this.chartArray!=undefined){
					for ( var j = 0; j < this.chartArray.length; j++) {
						var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
						
						for(var k in params1){
							if(params1[k] instanceof Array){
								params1[k] = Ext.JSON.encode(params1[k]);
							}else if(params1[k] instanceof Object){
								for(var l in params1[k]){
									if(params1[k] instanceof Array || params1[k] instanceof Object){
										params1[k+"_"+l] =  Ext.JSON.encode(params1[k][l]);
									}else{
										params1[k+"_"+l] = params[k][l];
									}
								}
							}
						}
						
						if(this.createExtraParams()){
							Ext.apply(params1, this.createExtraParams());
						}
						
						var params = {
							command : this.chartArray[j].dataUrl,
							arguments : params1
						};

						var job = Ext.create('NV.ajax.scheduler.RefreshJob', {
							fixParams : params,
							url : this.portlet.dashboard.model.get("urls").base,
							batchedAjaxEnabled : window.globalAjaxClient!=undefined,
							callback : this.chartArray[j].refreshData,
							scope : this.chartArray[j],
							refreshIntervall : refreshJobs[i].refreshIntervall,
							doOnFirstTime:true
						});
						job.start();
						this.jobs.push(job);
					}	
				}
			}
		}
		if(this.jobs.length==0){//nincs beállítva store refresh, 1x mindenképp be kell tölteni
			if(this.chartArray!=undefined){
				for ( var j = 0; j < this.chartArray.length; j++) {
					var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
					for(var k in params1){
						if(params1[k] instanceof Array){
							params1[k] = Ext.JSON.encode(params1[k]);
						}else if(params1[k] instanceof Object){
							for(var l in params1[k]){
								if(params1[k] instanceof Array || params1[k] instanceof Object){
									params1[k+"_"+l] =  Ext.JSON.encode(params1[k][l]);
								}else{
									params1[k+"_"+l] = params1[k][l];
								}
							}
							params1[k] = undefined;
						}
					}
					if(this.createExtraParams()){
						Ext.apply(params1, this.createExtraParams());
					}
					
					var params = {
						command : this.chartArray[j].dataUrl,
						arguments : params1
					};

					var job = Ext.create('NV.ajax.scheduler.RefreshJob', {
						fixParams : params,
						url : this.portlet.dashboard.model.get("urls").base,
						batchedAjaxEnabled : window.globalAjaxClient!=undefined,
						callback : this.chartArray[j].refreshData,
						scope : this.chartArray[j],
						refreshIntervall : 0,	//don't repeat, never use this argument
						doOnFirstTime:true,
						justOne:true
					});
					job.start();
					this.jobs.push(job);
				}	
			}
		}
	},
	
	stopRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
			this.jobs[i].stop();
		}
	},
	
	startRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
			this.jobs[i].doOnFirstTime = true;
			this.jobs[i].start();
		}
	},
	
	refreshByModel: function(what, scope){
        if(what!=undefined){
        	if(what.content){
        		scope.refresh();
        	}
        	else if(what.refreshJobs){
        		scope.refreshSchedulers(scope.model.get('refreshJobs'));
        	}
            
        }
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.DashboardSettingsContent',{
	
	extend: 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.dashboardsettings' ],

	constructor: function(config){
		this.callParent([Ext.apply(config, {
			type:'dashboardsettings',
			fields:[],
			layout:undefined
		})]);
		
		if(config.content.layout){
			this.layout = config.content.layout;
		}else{
			this.layout = 'vbox';
		}

	},
	
	createContent: function(json){
		if(this.portlet.dashboard.getModel().get("editable")){
			this.portlet.view.setButtonVisible("close", true);
			this.portlet.view.setButtonHandler("close", this.portlet, "handleDelete");
		}
		this.contentContainer.add(this.portlet.dashboard.getAllParameterForm());

	},
	
	refreshByModel: function(what, scope){
        if(what!=undefined){
        	if(what.content){
        		scope.refresh();
        	}
        }
	}
});

// @tag dashboard-layout

Ext.define('NV.dashboard.layout.dashboard.content.GraphContent', {

	extend : 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.graph' ],
	
	config : {
		jobs: undefined
	},

	constructor : function(config) {
		
		Ext.require('NV.canvas.gui.raphael.Topology');
		Ext.require('NV.canvas.gui.model.TopologyModel');
		
		this.callParent([Ext.apply(config, {type:'graph', jobs:[]})]);
		
		
	},

	
	createContent: function(json){
		var model = Ext.create('NV.canvas.gui.model.TopologyModel',json);
		this.topology = Ext.create('NV.canvas.gui.raphael.Topology', model, this);
		this.contentContainer.removeAll();
		this.contentContainer.add(this.topology.getContainer());
		this.refreshSchedulers(this.model.get("refreshJobs"));
	},
	
	refreshSchedulers : function(refreshJobs) {
		
		for(var i=0 ; i<this.jobs.length; i++){
			this.jobs[i].stop();
		}
		
		for ( var i = 0; i < refreshJobs.length; i++) {
			var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
			if (refreshJobs[i].refreshType == 'storeRefresh') {
				var params = {
						command : this.topology.model.get("url"),
						arguments : params1
				};

				var job = Ext.create('NV.ajax.scheduler.RefreshJob', {
					fixParams : params,
					url : this.portlet.dashboard.model.get("urls").base,
					batchedAjaxEnabled : window.globalAjaxClient!=undefined,
					callback : function(json){
						this.clearGraph();
						this.drawGraph(json);
					},
					scope : this.topology,
					refreshIntervall : refreshJobs[i].refreshIntervall,
					doOnFirstTime:false
				});
				job.start();
				this.jobs.push(job);
				
			}else if (refreshJobs[i].refreshType == 'partialRefresh') {
				
				var params = {
						command : this.topology.model.get("extraDataUrl"),
						arguments : params1
				};

				var job = Ext.create('NV.ajax.scheduler.RefreshJob', {
					fixParams : params,
					url : this.portlet.dashboard.model.get("urls").base,
					batchedAjaxEnabled : window.globalAjaxClient!=undefined,
					callback : this.topology.graph.refreshGraph,
					scope : this.topology.graph,
					refreshIntervall : refreshJobs[i].refreshIntervall,
					doOnFirstTime:true
				});
				job.start();
				this.jobs.push(job);
			}
		}
	},
	
	refreshStore: function(){
		this.refreshSchedulers(this.model.get("refreshJobs"));

		if(this.topology){
			if(this.jobs.length==0){
				var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
				var params = {
						command : this.topology.model.get("extraDataUrl"),
						arguments : params1
				};

				var job = Ext.create('NV.ajax.scheduler.RefreshJob', {
					fixParams : params,
					url : this.portlet.dashboard.model.get("urls").base,
					batchedAjaxEnabled : window.globalAjaxClient!=undefined,
					callback : this.topology.graph.refreshGraph,
					scope : this.topology.graph,
					refreshIntervall : 0,
					doOnFirstTime:true,
					justOne:true
				});
				job.start();
			}
		}
		
	},
	
	stopRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
			this.jobs[i].stop();
		}
	},
	
	startRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
		/* ??	this.jobs[i].doOnFirstTime = true;*/
			this.jobs[i].start();
		}
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.GridContent',{
	
	extend: 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.grid' ],
	
	config:{
		model: undefined,
		view: undefined,
		portlet: undefined,
		jobs:undefined
	},
	
	constructor: function(config){
		this.callParent([Ext.apply(config, {
			jobs:[],
			type:'grid'
		})]);
		
	},
	
	/**
	 * a portletnek vannak paraméterei a parameters tömbben, ami nincs benne a modeljében
	 * a portlet kezeli az egész paraméter újratöltést, mindent
	 * ha útközben, pl frissítés hatására megváltozott a html, vagyis a content tartalma, akkor hív a portlet egy frissítést,
	 * de előtte átadja a kapott paramétereket?
	 * paraméter pl: service type 
	 */
	
	createContent: function(json){
		json.config.portletContentObject = this;
		this.grid = Ext.create('NV.dashboard.layout.dashboard.components.Grid',json.config, this);

		this.grid.addListener('afterlayout', function(panel){
			if(panel.getHeight()-50>this.view.getHeight()){
				this.portlet.resize(panel.getWidth(), panel.getHeight());
			}
		}, this);
		return this.grid;
		
	},
	
	/**
	 * csak a dataUrl-t kell frissítenia griden belűl
	 */
	refreshStore: function(){
		this.refreshSchedulers(this.model.get("refreshJobs"));
	},
	
	addExtraParamsToRefresh: function(extraParams){
		this.extraDataParams = extraParams;
		this.refreshSchedulers(this.model.get("refreshJobs"));
	},
	
	refreshSchedulers : function(refreshJobs) {
		
		for ( var i = 0; i < refreshJobs.length; i++) {
			if (refreshJobs[i].refreshType == 'storeRefresh') {
				var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
				for(var k in params1){
					if(params1[k] instanceof Array){
						params1[k] = Ext.JSON.encode(params1[k]);
					}else if(params1[k] instanceof Object){
						for(var l in params1[k]){
							if(params1[k] instanceof Array || params1[k] instanceof Object){
								params1[k+"_"+l] =  Ext.JSON.encode(params1[k][l]);
							}else{
								params1[k+"_"+l] = params1[k][l];
							}
						}
						params1[k] = undefined;
					}
				}

				
				
				var str = "";
				for(var j in params1){
					str +=j+"="+params1[j]+"&"; 
				}
				str = str.substring(0,str.length-1);
				this.grid.addExtraParamsToStoreUrl(str);
				this.grid.refreshIntervall = refreshJobs[i].refreshIntervall;
				this.grid.enableAutoRefresh();				
				
			}	
		}
		if(refreshJobs.length==0){//nincs beállítva store refresh, 1x mindenképp be kell tölteni
			
			var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
			for(var k in params1){
				if(params1[k] instanceof Array){
					params1[k] = Ext.JSON.encode(params1[k]);
				}else if(params1[k] instanceof Object){
					for(var l in params1[k]){
						if(params1[k] instanceof Array || params1[k] instanceof Object){
							params1[k+"_"+l] =  Ext.JSON.encode(params1[k][l]);
						}else{
							params1[k+"_"+l] = params1[k][l];
						}
					}
					params1[k] = undefined;
				}
			}

			var str = "";
			for(var j in params1){
				str +=j+"="+params1[j]+"&"; 
			}
			str = str.substring(0,str.length-1);
			this.grid.addExtraParamsToStoreUrl(str);
			this.grid.doRefresh();

		}	
			
	},
	
	stopRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
			this.jobs[i].stop();
		}
		this.grid.disableAutoRefresh();
	},
	
	startRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
			this.jobs[i].doOnFirstTime = true;
			this.jobs[i].start();
		}
		this.grid.enableAutoRefresh();
	},
	
	refreshByModel: function(what, scope){
        if(what!=undefined){
        	if(what.content){
        		scope.refresh();
        	}
        	else if(what.refreshJobs){
        		scope.refreshSchedulers(scope.model.get('refreshJobs'));
        	}
            
        }
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.HtmlContent',{
	
	extend: 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.grid' ],
	
	
	
	createContent: function(json){
		var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
		for(var i in params1){
			json.html = json.html.replace("${"+i+"}", params1[i]);
		}
		return(Ext.create('Ext.container.Container', {html:json.html, flex:1}));
	},
	
	doOnRender: function(){
		this.callParent();
		try{
			Ext.require('NV.chart.library.ReportChartDrawer');
			NV.chart.library.ReportChartDrawer.initChartDrawer(); 
		}catch(e){
			
		}
	},
	
	refreshStore: function(){
		var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
		for(var i in params1){
			this.contentContainer.replace("${"+i+"}", params1[i]);
		}
		
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.IframeContent',{
	
	extend: 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.iframe' ],

	createContent: function(json){
		return(Ext.create('Ext.Component', {
			html:'<iframe id=iframe-'+this.portlet.dashboard.viewId+this.portlet.portletId+' style="overflow:auto; border:none; width:100%; height:100%;" frameborder="0"  src="'+json.url+'"></iframe>', 
			height:"100%",
			border:false
		}));
		
	},
	
	doOnRender: function(){
		var json = Ext.clone(this.model.get('content'));
		var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
		
		if(params1){
			for(var i in params1){
				json.url = Ext.String.urlAppend(json.url, i+"="+params1[i]);
			}
		}
		
		if(json.error==undefined){
			this.contentContainer.removeAll();
			this.contentContainer.add(this.createContent(json));
			this.contentContainer.doLayout();
		}else{
			this.contentContainer.InnerHTML = json.error;
		}
		this.contentContainer.setLoading(false);			

	},
	
	refreshSchedulers : function(refreshJobs) {
		
		for ( var i = 0; i < refreshJobs.length; i++) {
			var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
			if (refreshJobs[i].refreshType == 'storeRefresh') {
				this.jobs[0] = new Ext.util.DelayedTask(function(){
				    alert(Ext.getDom('myInputField').value.length);
				});
				
			}
		}
	},
	
	stopRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
			this.jobs[i].stop();
		}
	},
	
	startRefresh: function(){
		for ( var i = 0; i < this.jobs.length; i++) {
		/* ??	this.jobs[i].doOnFirstTime = true;*/
			this.jobs[i].start();
		}
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.SettingsContent',{
	
	extend: 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.settings' ],
	
	config:{
		fields: undefined,
		layout: 'vbox',
		labelWidth: 120,
		firstTime:true
	},
	
	constructor: function(config){
		this.callParent([Ext.apply(config, {
			type:'settings',
			fields:[],
			layout:undefined
		})]);
		
		if(config.content.layout){
			this.layout = config.content.layout;
		}else{
			this.layout = 'vbox';
		}
	},
	
	createContent: function(json){
		
		this.panel = Ext.create('Ext.form.Panel',{
			border:false,
			bodyBorder:false,
			bodyPadding: 5,
			flex:1,
			layout:'anchor',
			
			buttons: [
			    { 
			    	text: json.buttonLabel,
			    	scope:this,
			    	handler: function(){
			    		
			    		var output = Ext.clone(this.portlet.model.get('output'));
			    		for(var i=0; i<this.fields.length; i++){
			    			output[this.fields[i].name] = this.fields[i].getValue();
			    		}
			    		this.portlet.model.beginEdit();
			    		this.portlet.model.set('output', output);
			    		this.portlet.model.endEdit();
			    	}
			    }
			]
		});
		this.contentContainer.add(this.panel);
		this.fields = [];
		for(var i in json.parameters){
			var resolver = {};
			
			var configObject = Ext.apply(json.parameters[i],{
					labelWidth: json.parameters[i].labelWidth?json.parameters[i].labelWidth:this.labelWidth,
					labelAlign: 'left',
					padding: json.parameters[i].padding ? json.parameters[i].padding : 0,
					dashboard: this.portlet.dashboard
            });
			if (configObject.type == "boolean") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.BooleanInput', configObject);
			} else if (configObject.type == "float" || configObject.type == "number") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.NumberInput', configObject);
			} else if (configObject.type == "string") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			} else if (configObject.type == "date") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateInput', configObject);
			}else if (configObject.type == "datetime") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateTimeInput', configObject);
			}else if (configObject.type == "list") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput', configObject);
			}else if (configObject.type == "enum") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput', configObject);
			}else if (configObject.type == "enumArray") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', configObject);
			}else if (configObject.type == "interval") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.IntervalInput', configObject);
			}else{
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ComboInput', configObject);
			}
			this.fields.push(resolver);			
			this.panel.add(resolver.getController());
		}
		
		this.refreshStore();
		
		if(this.firstTime){
			
			this.firstTime = false;
			var output = Ext.clone(this.portlet.model.get('output'));
			for(var i=0; i<this.fields.length; i++){
				try{
					output[this.fields[i].name] = this.fields[i].getValue();
				}catch(e){
					
				}
			}
			this.portlet.model.beginEdit();
			this.portlet.model.set('output', output);
			this.portlet.model.endEdit();
		}
		
	},
	
	/**
	 * params can come from dashboard, or from other portlet
	 */
	refreshStore: function(){
		var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
		for(var i = 0; i < this.fields.length; i ++){
			if(params1[this.fields[i].name]){
				this.fields[i].setValue(params1[this.fields[i].name]);
			}
		}

	},
	
	refreshByModel: function(what, scope){
        if(what!=undefined){
        	if(what.content){
        		scope.refresh();
        	}
        	else if(what.refreshJobs){
        		scope.refreshSchedulers(scope.model.get('refreshJobs'));
        	}
            
        }
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.content.TreeContent',{
	
	extend: 'NV.dashboard.layout.dashboard.content.PortletContent',
	
	alias : [ 'portlet-content.tree' ],
	
	
	constructor: function(config){
		this.callParent([Ext.apply(config, {
			type:'tree'
		})]);
	},
	
	doOnRender: function(){
		this.store = Ext.create('Ext.data.TreeStore', {
			root:{}});
		

		this.treePanel = Ext.create('Ext.tree.Panel',{
		        width: 300,
		        height: 200,
		        rootVisible: this.model.get("content").rootVisible!=undefined?this.model.get("content").rootVisible:true,
		        store: this.store
		        
		});		
		this.contentContainer.removeAll();
		this.contentContainer.add(this.treePanel);
		
		this.createActionHandlers();
		
		this.refreshStore();
	},
	
	createActionHandlers: function(){
		var json = this.model.get("content");
		for(var i = 0; i<json.actions.length; i++){
			var	callback = function(tree, record, item, index, evt, eOpts){
				
				this.eventType = evt.type;
				if(evt.type=="contextmenu" ){
					this.eventType = 'rightclick'; 
				}	
				if(this.action.eventType==this.eventType || (this.action.eventType==undefined && this.eventType=='click')){
					
					var action = Ext.create('NV.dashboard.actionhandler.ActionHandler',{
						action: this.action,
						context:"this.scope",
						scope: record.raw,
						portletContentObject: this.portletContent,
						event:evt
					});
					action.doAction();
					if(this.portletContent){
						this.portletContent.model.endEdit();
					}
				}									
			};
			if(json.actions[i].eventType==undefined || json.actions[i].eventType=='click'){
				this.treePanel.addListener('itemclick',callback, {
					action: json.actions[i],
					portletContent: this,
					eventType:"click"
				});
			}
			if(json.actions[i].eventType=='rightclick'){
				this.treePanel.addListener('itemcontextmenu',callback, {
					action: json.actions[i],
					portletContent: this,
					eventType:"rightclick"
				});
			}
		}
		
	},
	
	/**
	 * params can come from dashboard, or from other portlet
	 */
	refreshStore: function(){
		var params1 = Ext.clone(this.portlet.model.get('storeParameters'));
		var json = this.model.get("content");
		if(json.dataUrl){//url-ből jön az adat
			Ext.Ajax.request({
				url: json.dataUrl,
				method:'GET',
				params:params1,
				success: function(response){
					var json = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
					if(!json){
						return;
					}
					this.treePanel.setRootNode(json.root);
				},
				failure: function(response){
					NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
				},
				scope:this
			});
		}
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.BaseController',{
	config:{
		label: "",
		name: "",
		value: undefined,
//		padding: 0,
		labelWidth: 120,
        labelAlign: 'left',
        required:false,
        readOnlyCls: 'NvReadonlyField'
	},
	
	constructor: function(config){
		this.initConfig(config);
		
		this.createController(Ext.apply(this.config));
		
		if(this.value!=undefined){
			this.setValue(this.value);
		}
	},

	createController: function(config){
		
	},
	
	
	getController : function(){
		return this.controller;
	},
	
	getValue: function(){
		if(this.controller && this.controller.getValue()!=null){
			return this.controller.getValue();
		}
		else{
			return this.value;
		}
	},
	
	setValue: function(value){
		this.value = value;
		if(value!=undefined && this.controller!=undefined){
			this.controller.setValue(value);
		}
	},
	
	setReadOnly: function(value){
		this.controller.setReadOnly(value);
	},
	
	enable: function(value){
		if(!value){
			this.controller.disable();
		}else{
			this.controller.enable();
		}
	},
	
	validate: function(){
		return this.controller.validate();
	},
	
	show: function(){
		this.controller.show();
	},
	
	hide: function(){
		this.controller.hide();
	},
	
	reset: function(){
		this.controller.reset();
	}

});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.BooleanInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	
	createController: function(config){
		this.checkbox = Ext.create('Ext.form.field.Checkbox',{
			boxLabel  : '',
            name      : config.name,
            inputValue: true,
            padding:0
		});
		
		this.controller = Ext.create('Ext.form.FieldContainer',Ext.apply(config,
			{
	            fieldLabel: this.label,
	            defaultType: 'checkboxfield',
	            items: [
	                this.checkbox
	            ]
	        }));
	},
	
	getValue: function(){
		return this.checkbox.getValue();
	},
	
	setValue: function(value){
		this.value = value;
		if(value!=undefined && this.controller!=undefined){
			this.controller.items.items[0].setValue(value);
		}
	},
	
	setReadOnly: function(value){
		this.controller.items.items[0].setReadOnly(value);
	},
	
	enable: function(value){
		if(!value){
			this.controller.items.items[0].disable();
		}else{
			this.controller.items.items[0].enable();
		}
	},

	/**
	 * fn params: this, newValue, oldValue, eOpts
	 * @param fn
	 * @param scope
	 */
	addCheckListener: function(fn, scope){
		this.checkbox.addListener('change',fn, scope);
	},
	
	validate: function(){
		return true;
	},
	
	reset: function(){
		this.setValue(false);
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.ColorInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	createController: function(config){
		this.controller = Ext.create('Ext.ux.nv.form.ColorField',Ext.apply(config, {
            allowBlank: !this.required,
            fieldLabel: this.label,
            decimalPrecision:this.decimals}));
	}
});

// @tag dashboard-layout
//Ext.define('Test.controller.ComboBox',{
Ext.define('NV.dashboard.layout.dashboard.controllers.ComboBox',{
	config:{
		model: undefined,
		view: undefined
	},
	
	constructor: function(model/*, customConfig*/){
		this.model = model;
		this.model.addOwner(this);
		this.view = Ext.create('Test.view.ComboBoxView',{
		    
			fieldLabel: model.get('label'),
	    	name: model.get('name'),
	    	
	    	controller: this,
	    	
	    	settings: model.get('settings'), 
	    	
            itemsShow: model.get('itemsShow'),
            lineHeight: model.get('lineHeight'),
            disabled: model.get('disabled'),
            scrolling: model.get('scrolling'),
            
            id: (this.model.countOwners() < 1) ? model.get('id') : undefined,
            // undefined: ext generates id
            name: model.get('name'),
            
            store: model.get('store'),
            value: model.get('value')
	    	
	    	/* 'store', 'value', 'disabled', 'label', 'name', 'id', 'itemsShow', 'lineHeight', 'scrolling', 'settings' */
    
            // listeners: customConfig.listeners
		});
		
	},
	
// render to elem
	
	render: function(elem){
	    
        if(!this.view.rendered){
            this.view.render(elem);
        }else{
            this.view.appendTo(Ext.get(elem));
        }
    },
	
// get/set
	
	getView: function(){
        return this.view;
    },
	
	getModel: function(){
        return this.model;
    },
    
    refreshField: function (what) {
        if (!what) {
            this.view.setStore(this.model.get('store'));
            
            this.view.setItemsShow(this.model.get('itemsShow'));
            this.view.setLineHeight(this.model.get('lineHeight'));
            this.view.setScroll(this.model.get('scrolling'));
            
            this.view.setFieldLabel(this.model.get('label'));
            this.view.setName(this.model.get('name'));
            
            if (this.model.countOwners() < 2) {
                this.view.setId(this.model.get('id'));
            }
            
            this.view.toggleDisable(this.model.get('disabled'));
            this.view.setSettingsShow(this.model.get('settings'));
            
            this.view.setValue(this.model.get('value'));
            
            return;
        }
        
        switch (what[0]){
            case 'store':
              this.view.setStore(this.model.get('store'));
              break;
            case 'itemsShow':
              this.view.setItemsShow(this.model.get('itemsShow'));
              break;
            case 'lineHeight':
              this.view.setLineHeight(this.model.get('lineHeight'));
              break;
            case 'scrolling':
              this.view.setScroll(this.model.get('scrolling'));
              break;
            case 'label':
              this.view.setFieldLabel(this.model.get('label'));
              break;
            case 'name':
              this.view.setName(this.model.get('name'));
              break;
            case 'disabled':
              this.view.toggleDisable(this.model.get('disabled'));
              break;
            case 'settings':
              this.view.setSettingsShow(this.model.get('settings'));
              break;
            case 'value':
              this.view.setValue(this.model.get('value'));
              break;
        }
        
        if (what[0] === 'id' && this.model.countOwners() < 2) {
            this.view.setId(this.model.get('id'));
        }
        
    },
    
	setModel: function(model){
        // todo
        // get from old model owners
        this.model = model;
        // push to new model owners
        this.refreshField(false);
        
    },
	
	getValue: function(){
        return this.view.getValue();
    },
    setValue: function(value){
        this.view.setValue(value);
        this.model.set('value', value);
    },
    
    getStore: function () {
        return this.getView().getStore();
    },
    setStore: function (s) {
        this.view.setStore(s);
        this.model.set('store', s);
    },
    
// get/set behavior
        
    /* integer */
    getItemShow: function () {
        return this.getView().getItemShow();
    },
    setItemsShow: function (newShow) {
        // number of items to show
        this.view.setItemsShow(newShow);
        this.model.set('itemsShow', newShow);
    },
    
    /* integer */
    getLineHeight: function () {
        return this.getView().getLineHeight();
    },
    setLineHeight: function (newHeight) {
        this.view.setLineHeight(newHeight);
        this.model.set('lineHeight', newHeight);
        // number in pixels, height of an item line 
    },
    
    /* boolean */
    getScroll: function () {
        return this.getView().getScroll();
    },
    setScroll: function (newScroll) {
        this.view.setScroll(newScroll);
        this.model.set('scrolling', newScroll);
        // show scroll
    },
    
    /* string */
    getLabel: function () {
        return this.getView().getFieldLabel(); //?
    },
    setLabel: function (l) {
        this.view.setFieldLabel(l);
        this.model.set('label', l);
    },
    
    /* string */
    getName: function () {
        return this.getView().getName(); //?
    },
    setName: function (n) {
        this.view.setName(n);
        this.model.set('name', n);
    },
    
    /* string */
    getId: function () {
        return this.getView().getId(); //?
    },
    setId: function (id) {
        
        var ids = this.model.getOwnerIds();
        var found = false;
        
        for (var i = 0; i < ids.length; i++) {
            if (ids[i] === id) found = true;
        }
        if (!found) {
            this.view.setId(id);
            if (this.model.countOwners() < 2) {
                this.model.set('id', id);
            }
            return;
        }
        console.info('ID must be unique');
    },
    
    /* boolean */
    isDisabled: function () {
        return this.getView().getIsDisabled();
    },
    disable: function (d) {
        // disable field
        this.view.toggleDisable(d);
        this.model.set('disabled', d);
    },
    
    /* boolean */
    getSettingsShow: function () {
        return this.getView().getSettingsShow();
    },
    setSettingsShow: function (newShow) {
        // TODO 
        this.view.setSettingsShow(newShow);
        this.model.set('settings', newShow);
    }  
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.ListInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	config:{
		url: "",
		dataKey: "id",
		dataValue: "label",
        queryMode:'remote',
        pageSize:0,
        editable:false,
        forceSelection:true,
        searchValueFromUrl:false	//set true to search the value when setted up on constructor
	},
	
	createController: function(config){
		Ext.define('BaseList', {
		    extend:  'Ext.data.Model' ,
		    fields: [
		        {name: this.dataKey, type: 'string'},
		        {name: this.dataValue,  type: 'string'}
		    ]
		});
		if(this.url){
			this.store = Ext.create('Ext.data.Store', {
			    model: 'BaseList',
			    autoLoad: true,
			    proxy: {
			        type: 'ajax',
			        url: this.url,
			        reader: {
			            type: 'json',
			            root: 'list',
		            	readRecords: function(data) {
		                    var root = this.root;
		                    var list = [];
		    				for(var i = 0; i<data[root].length; i++){
		    					if(!Ext.isObject(data[root][i])){
		    						list.push({id:data[root][i], label:data[root][i]});
		    					}else{
		    						list.push(data[root][i]);
		    					}	
		    				}
		                    return this.superclass.readRecords.call(this, list);
		                }
			        }
			    }
			});
		}
		
		this.controller = Ext.create('Ext.form.field.ComboBox', Ext.apply(config, {
	    	fieldLabel: this.label,
    	    displayField: this.dataValue,
    	    valueField: this.dataKey,
    	    store: this.store,
    	    queryMode: 'remote',
    	    typeAhead: this.typeAhead,
    	    allowBlank: !this.required,
    	    forceSelection: this.forceSelection,
    	    minChars:1
    	}));
		
		if(this.value && this.searchValueFromUrl){
			Ext.Ajax.request({
				url : Ext.String.urlAppend(this.url, "id="+this.value),
				success: function(response){
					var json = Ext.decode(response.responseText);
					this.controller.setValue({id:json.list[0].id, label:json.list[0].label});
				},
				scope: this 
			});
		}
	},
	
	setValue: function(value){
		this.value = value;
		
		if(value!=undefined && this.controller!=undefined){
			if(this.searchValueFromUrl){
				Ext.Ajax.request({
					url : Ext.String.urlAppend(this.url, "id="+this.value),
					success: function(response){
						var json = Ext.decode(response.responseText);
						if(!this.controller.getStore().findRecord(this.dataKey,json.list[0].id)){
							this.controller.getStore().add({id:json.list[0].id, label:json.list[0].label});	
						}
						
						this.controller.setValue(this.controller.getStore().findRecord(this.dataKey,json.list[0].id));
						
					},
					scope: this 
				});
			}else{
				this.newValue=true;
				if(this.controller.getStore().find(this.dataKey,value)==-1){
					this.controller.getStore().addListener('load', function( store, records, successful, eOpts){
						if(this.comboInput.newValue){
							if(store.find(this.comboInput.dataKey,value)==-1){
								this.comboInput.controller.setValue(this.value);
							}else{
								this.comboInput.controller.setValue(store.findRecord(this.comboInput.dataKey,this.value));
							}
							
							this.comboInput.newValue = false;
						}
						
					}, {
						comboInput:this, 
						value:value
					});
				}else{
					this.controller.setValue(this.controller.getStore().findRecord(this.dataKey,value));
				}
			}
		}
	},
	
	/**
	 * fn parameters: combo, records, eopts
	 * @param fn
	 * @param scope
	 */
	addSelectionListener: function(fn, scope){
		this.controller.addListener("select", fn, scope);
	},
	
	setStoreUrl: function(url){
		this.url = url;
	    this.store.proxy.url = this.url;
		this.store.reload();
	}
});

// @tag dashboard-layout
/**
 * SLA Suite szereti használni, ha objektumokat listáz ki.
 * combobox, plusz egy kereső a jobb oldalon, aminek hatására kereső abalk jön be
 * Ha 1 érték van, akkor rögtön visszaadja azt az 1-et
 * 
 */
Ext.define('NV.dashboard.layout.dashboard.controllers.ComboInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.ListInput',
	
	config:{
		type:undefined
	},
	
	constructor: function(config){
		var urlPref = config.dashboard.model.get('urls').listDataUrl;
		if(urlPref == undefined){
			urlPref = "config?";
		}		
		config.url = urlPref+"REQUESTTYPE=GETOBJECTIDLIST&"+config.type;
		config.editable=true;
		config.forceSelection=true;

		this.callParent([config]);
		Ext.Ajax.request({
			url:this.url,
			success: function(response){
				var value = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
				if(!value){
					return;
				}
				if(value.list.length == 1){
					this.onlyOneElement = value.list[0][this.dataKey];
				}
			},
			scope:this,
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			}
		});
	},

	getController : function(){
		if(this.onlyOneElement){return null;}
		return this.controller;
	},
	
	getValue: function(){
	 	if(this.onlyOneElement!=undefined){
			return this.onlyOneElement;
		}
		return this.controller.getValue();
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.DateInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',

	createController: function(config){
		this.controller = Ext.create('Ext.form.field.Date',Ext.apply(config,{
			fieldLabel: this.label,
			format: 'Y m d'
		}));
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.DateTimeInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	config:{
        enableDynamic:true,
        process:"server",
        processFirstValue:false,
        dateTimeFormat: 'Y.m.d H:i:s'
	},
	
	createController: function(config){
		
		this.controller = Ext.create('NV.ext.ux.nv.form.DateTimeField',Ext.apply(config, {
			fieldLabel: this.label
		}));
		
		if(this.processFirstValue && this.value){
			this.setValue(this.getLongValue());
		}
	},
	
	setValue: function(value){
		if(this.controller){
			this.controller.setValue(value);
			if(this.processFirstValue){
				this.controller.setValue(this.getLongValue());
			}
		}else{
			this.value=value;
		}
	},
	
	getValue: function(){
		if(this.process=='server'){
			return this.controller.getValue();
		}else{
			return this.controller.getForceLongValue();
		}
	},
	
	getLongValue: function(){
		return this.controller.getForceLongValue();
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',	
	config:{
		dataKey: "id",
		dataValue: "label",
		type: ""
	},
	
	createController: function(config){

		this.store = Ext.create('Ext.data.Store', {
		    fields: [this.dataKey, this.dataValue],
		    data : []
		});

		for(var i=0; i<config.enumValues.length; i++){
			if(config.enumValues[i] instanceof Object){
				this.store.add(config.enumValues[i]);
			}else{
				var t = {};
				t[this.dataKey] = config.enumValues[i];
				t[this.dataValue] = config.enumValues[i];
				
				this.store.add(t);
			}
		}
		
		this.controller = Ext.create('NV.ext.ux.form.ItemSelector', {
          //  anchor: '100%',
            appendOnly: true,
            fieldLabel: this.label,
	    	name: this.name,
    	    displayField: this.dataValue,
    	    valueField: this.dataKey,
    	    labelWidth: this.labelWidth,
            labelAlign: this.labelAlign,
    	    store: this.store,
    	   
           // msgTarget: 'side',
            height: 200,
            flex:1,
            allowblank: !this.required
        });
		
		
		if(this.value!=undefined){
			this.setValue(this.value);
		}
	},

	setValue: function(value){
		this.value = value;
		if(value!=undefined && this.controller!=undefined){
			
			this.controller.setValue(value);
			
		}
	},
	
	setReadOnly: function(value){
//		this.controller.setReadOnly(value);
	},
	
	addSelectionListener: function(fn, scope){
		this.controller.addListener("select",fn, scope);
	}
	
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.EnumInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',	
	
	config:{
		forceSelection:true
	},
	
	createController: function(config){
		this.store = Ext.create('Ext.data.Store', {
		    fields: ['id', 'label'],
		    data : []
		});

		for(var i=0; i<config.enumValues.length; i++){
			if(config.enumValues[i] instanceof Object){
				this.store.add(config.enumValues[i]);
			}else{
				this.store.add({
					id: config.enumValues[i],
					label: config.enumValues[i]
				});
			}
		}
		this.controller = Ext.create('Ext.form.ComboBox', Ext.apply(config,{
		    fieldLabel: this.label,
		    store: this.store,
		    queryMode: 'local',
		    displayField: 'label',
		    valueField: 'id',
    	    typeAhead: false,
    	    allowBlank: !this.required,
    	    forceSelection: this.forceSelection,
    	    editable:true
		}));
		
		if(this.required && !this.value){
			this.setValue(this.store.getAt(0));
		}
	},
	/**
	 * fn parameters: combo, records, eopts
	 * @param fn
	 * @param scope
	 */
	addSelectionListener: function(fn, scope){
		this.controller.addListener("select", fn, scope);
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.IntervalInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	config:{
        fieldPosition:'vertical',
        process:"server",
        processFirstValue:true,
        dateTimeFormat: 'Y.m.d H:i:s'
	},
	
	createController: function(config){
		this.controller = Ext.create('NV.ext.ux.nv.form.DateTimeIntervalField',Ext.apply(config, {
			fieldLabel: this.label
		}));
		
		if(this.processFirstValue){
			this.setValue(this.getLongValue());
		}
	},
	
	
	getValue: function(){
		if(this.process=='server'){
			return this.controller.getValue();
		}else{
			return this.controller.getForceLongValue();
		}
	},
	
	getLongValue: function(){
		return this.controller.getForceLongValue();
	},
	reset: function(){
		this.controller.reset();
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.NumberInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	
	config:{
		decimals:0
	},
	
	createController: function(config){
		this.controller = Ext.create('Ext.form.field.Number',Ext.apply(config, {
            allowBlank: !this.required,
            fieldLabel: this.label,
            decimalPrecision:this.decimals
        }));
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.ObjectArrayInput', {
	config:{
		label: "",
		name: "",
		value: undefined,
		url: "",
		dataKey: "id",
		dataValue: "label",
		type: "",
		onlyOneElement: undefined,
		labelWidth: 120,
        labelAlign: 'left'
	},
	
	constructor: function(config){
		this.initConfig(config);
		this.dataKey = "id";
		this.dataValue = "label";

		var me = this;
		
		
		Ext.define('BaseList', {
		    extend:  'Ext.data.Model' ,
		    fields: [
		        {name: me.dataKey, type: 'string'},
		        {name: me.dataValue,  type: 'string'}
		    ]
		});
		
		me.store = Ext.create('Ext.data.Store', {
		    model: 'BaseList',
		    autoLoad: true,
		    proxy: {
		        type: 'ajax',
		        url: me.url,
		        reader: {
		            type: 'json',
		            root: 'list',
	            	readRecords: function(data) {
	                    var root = this.root;
	                    
	                    var list = [];
	                    
	    				for(var i = 0; i<data[root].length; i++){
	    					if(!Ext.isObject(data[root][i])){
	    						list.push({id:data[root][i], label:data[root][i]});
	    					}else{
	    						list.push(data[root][i]);
	    					}
	    					
	    				}
	    				
	                    return this.superclass.readRecords.call(this, list);
	                }
		        }
		    }
		});
		
		this.controller = Ext.create('NV.ext.ux.form.ItemSelector', {
            anchor: '100%',
            appendOnly: true,
            fieldLabel: me.label,
	    	name: me.name,
    	    displayField: me.dataValue,
    	    valueField: me.dataKey,
    	    labelWidth: this.labelWidth,
            labelAlign: this.labelAlign,
    	    store: me.store,
            msgTarget: 'side',
            height: 150,
            allowblank: !me.required
        });
		
		
		if(this.value!=undefined){
			this.setValue(this.value);
		}
	},

	getController : function(){
		return this.controller;
	},
	
	getValue: function(){
	 	
		return this.controller.getValue();
	},

	setValue: function(value){
		this.value = value;
		if(value!=undefined && this.controller!=undefined){
			if(this.controller.getStore().find(this.dataKey,value)==-1){
				this.controller.getStore().addListener('load', function( store, records, successful, eOpts){
					this.comboInput.controller.setValue(store.findRecord(this.comboInput.dataKey,this.value));
				}, {
					comboInput:this, 
					value:value
				});
			}else{
				this.controller.setValue(this.controller.getStore().findRecord(this.dataKey,value));
			}
		}
	},
	
	setReadOnly: function(value){
		this.controller.setReadOnly(value);
	},
	
	enable: function(value){
		if(!value){
			this.controller.disable();
		}else{
			this.controller.enable();
		}
	},
	
	addSelectionListener: function(fn, scope){
		this.controller.addListener("select",fn, scope);
	},
	
	setStoreUrl: function(url){
		this.url = url;
		this.store.setProxy(Ext.create('Ext.data.proxy.Proxy',{
	        type: 'ajax',
	        url: this.url,
	        reader: {
	            type: 'json',
	            root: 'list'
	        }
	    }));
		
	}
});

// @tag dashboard-layout
/**
 * SLA Suite szereti használni, ha objektumokat listáz ki.
 * combobox, plusz egy kereső a jobb oldalon, aminek hatására kereső abalk jön be
 * Ha 1 érték van, akkor rögtön visszaadja azt az 1-et
 * 
 */
Ext.define('NV.dashboard.layout.dashboard.controllers.ObjectInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	
	config:{
		dashboard:undefined, 
		type:undefined, 
		editable:true, 
		forceSelection:true,
        pageSize:0,
        editable:false,
        forceSelection:true,
        searchValueFromUrl:true,
        objectType:""
	},
	
	constructor: function(config){
		var urlPref;
		if(config.dashboard){
			urlPref = config.dashboard.model.get('urls').listDataUrl;
		}
		
		if(urlPref == undefined){
			urlPref = "config?";
		}		
		this.listUrl = urlPref+"REQUESTTYPE=GETOBJECTIDLIST&OBJECTTYPE="+config.objectType;//+"&serviceType="+config.serviceType;
		this.gridConfigUrl = urlPref+"REQUESTTYPE=GETOBJECTCOLUMNS&OBJECTTYPE="+config.objectType;//+"&serviceType="+config.serviceType;

		
		this.callParent([config]);
		Ext.Ajax.request({
			url: this.gridConfigUrl,
			success:function(response){
				var value = NV.ext.ux.nv.GlobalErrorHandler.jsonResponseErrorHandler(response);
				if(!value){
					return;
				}
				value.config.dataUrl = urlPref+"REQUESTTYPE=GETOBJECTLIST&OBJECTTYPE="+this.objectType;//+"&serviceType="+config.serviceType;
				value.config.local = false;
				this.grid = Ext.create('NV.dashboard.layout.dashboard.components.Grid',value.config);
				this.grid.parent = this;
				this.grid.handleDBClickAction = function(scope, id, grid, record,e){
					this.parent.setValue(record.get(this.uniqueId));
					this.parent.searchWindow.hide();				
				};
			},
			scope:this,
			failure: function(response){
				NV.ext.ux.nv.GlobalErrorHandler.requestFailedErrorHandler(response);
			}
		});
		
	},

	createController: function(){
		this.combo = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput',{
			url: this.listUrl,
	        pageSize:0,
	        editable:true,
	        forceSelection:true,
	        searchValueFromUrl:this.searchValueFromUrl,
	        flex:1
		});
		
		var me = this;
		
		this.controller = Ext.create('Ext.form.FieldContainer',{
			fieldLabel:this.label,
			flex:1,
			labelWidth:this.labelWidth,
	        name: this.name,
			layout:{
				type:"hbox",
				align:"stretch"
			},
			items:[
			       this.combo.getController(),
			       {
			    	    xtype:"button",
			    	    icon: "resource/dashboard-layout/image/tools/search.png",
			    		handler: function(){
			    			this.openSearchWindow();
			    		},
			    		flex:0,
			    		width:24,
			    		height:24,
			    		scope:this
			       }
			],
			getValue: function(){
				return me.getValue();
			}
		});
		
	},
	
	openSearchWindow: function(){
		if(!this.searchWindow){
			this.searchWindow = Ext.create('Ext.window.Window',{
				modal: true,
				width:"700px",
				height:"400px",
				items:[
				       this.grid
				       ],
				layout: 'fit',
				closeAction: 'hide',
				title: this.label
			});
		}
		this.searchWindow.show();
	},
	
	getController : function(){
		if(this.onlyOneElement){return null;}
		return this.controller;
	},
	
	getValue: function(){
	 	if(this.onlyOneElement!=undefined){
			return this.onlyOneElement;
		}
		return this.combo.getValue();
	},
	
	setValue: function(value){
		this.value = value;
		if(value && this.combo){
			this.combo.setValue(value);
		}
	},
	
	reset: function(){
		this.combo.reset();
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.controllers.StringInput', {
	extend:'NV.dashboard.layout.dashboard.controllers.BaseController',
	config:{
		regex : undefined,
		regexp : undefined,
		regexText : 'Invalid value'		
	},
	
	
	createController: function(config){
		if(config.regexp){
			config.regex = new RegExp(config.regexp);
		}
		this.controller = Ext.create('Ext.form.field.Text',Ext.apply(config, {
            allowBlank: !this.required,
            fieldLabel: this.label
		}));
	}

});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.CustomLayout',{
	extend: "Ext.panel.Panel",
	
	config:{
		realPanels:undefined
	},
	
	constructor: function(config){
		this.initConfig(config);
		this.flex = 1;
		this.layout = {
				type:"fit"
		};
		this.cls="DDPanel2",
		this.callParent([this]);
		this.panel = Ext.create('Ext.panel.Panel', {
			id : 'mainPanel'+this.id,
			framed:false,
			header:false,
			border:false,	
			bodyBorder:false,	
			flex:1,
			layout:'border'
		});
		this.add(this.panel);
		
		this.realPanels = [];
	},
	
	initDashboard: function(portlets){
		for(var i in portlets){
			var panel = portlets[i].getView();
			this.realPanels.push(panel);			
		}
		if(this.rendered){
			this.refreshBoard();
		}else{
			this.addListener('afterrender', function(){
				this.refreshBoard();
			}, this);
		}
	},
	
	refreshBoard: function(){
		this.panel.removeAll();
		for(var i= 0; i<this.realPanels.length; i++){
			this.panel.add(this.realPanels[i]);	
		}
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.DashboardParameterPopup',{
		extend: 'Ext.window.Window',
		config:{
			paramAssingPanel:{},
			type:"",
			label:"",
			name:"",
			index:-1
				
		},
		constructor: function(config){
			this.initConfig(config);
			
			var items = [];
			
			this.labelField = Ext.create('Ext.form.field.Text',{
				//			width:300,
				//			labelWidth:70,
							fieldLabel:lang.params.label
							
						});
			items.push(this.labelField);
			
			this.nameField = Ext.create('Ext.form.field.Text',{
				//			width:300,
				//			labelWidth:70,
							fieldLabel:lang.params.name

						});
			items.push(this.nameField);
			
			this.typeField = Ext.create('Ext.form.field.Text',{
				//			width:300,
				//			labelWidth:70,
							fieldLabel:lang.params.type,
							value: this.type,
							disabled:true,
							editable:false,
							visible:true
						});
			
			items.push(this.typeField);
			
			this.callParent([{
				title: lang.params.params,
	    		buttonAlign: 'center',
	    		items:items,
	    		bodyPadding: 5,
	    		width:400,
	    		modal:true,
	    		border:false,
	    		frame:false,
	    		buttons:[{ 
	    			text: lang.params.save, 
	    			handler: function() {
	    				this.save();
	    				this.hide();
	    				this.destroy();
	    			},
	    			scope:this
	    		},
	    		{
	    			text: lang.params.cancel, 
	    			handler:function(){
	    				this.hide();
	    				this.destroy();
	    			},
	    			scope:this
	    		}]
			}]);
			
			this.fillValues();
		},
		
		fillValues : function(){
			this.labelField.setValue(this.label);
			this.typeField.setValue(this.type);
			this.nameField.setValue(this.name);
			
		},
		
		save: function(){
			this.name = this.nameField.getValue();
			this.label = this.labelField.getValue();
			this.paramAssingPanel.createNewDashboardParameter({name:this.name, label:this.label, type:this.type}, this.index);
		}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.DragAndDropPanel2',{
	extend: "Ext.panel.Panel",
	config:{
		out:false,
		defaultWidth : 100,
		defaultHeight : 100,
		defaultPadding : 10,
		cols : 5,
		id: 0,
		editable: false,
		rows : 5,
		panels:undefined,
		
		dragable: true,
		resizablePanels: true,
		hideOnMove: true,
		cellStyle: "backendTableTd",
		tableModel: undefined,
		dashboard: undefined	
	},		
	
	constructor: function(config){
		config.resizablePanels = config.editable;
		config.resizable = false;
		this.initConfig(config);
		
		this.dragable = this.editable;
		
		this.tableModel = [];
		this.panels = [];
		this.dummyPanels = [];
		this.realPanels = [];
		this.panels = this.realPanels;
		this.cellStyle = this.cellStyle+this.editable;
		this.defaultHeight = parseInt(config.row.height);
		
		var minwidth = 0;
		for(var i in this.cols){
			if(this.cols[i].type=="fix"){
				minwidth += parseInt(this.cols[i].width);
			}else{
				minwidth += parseInt(this.cols[i].minWidth);
			}
		}
		this.panelMinWidth = minwidth;
		this.minHeight = 50;
		this.flex = 1;
		this.layout = {
				type:"fit"
		};

		this.cls="DDPanel2",
		this.border = false,	
		this.bodyBorder = false,	

		this.callParent([this]);

		this.autoScroll = true;	
		this.overflowY = 'scroll'; 
		this.overflowX = 'scroll';
		
		this.originalOptions = config;
		
		this.panel = Ext.create('Ext.panel.Panel', {
			id : 'mainPanel'+this.id,
			framed:false,
			header:false,
			border:false,	
			bodyBorder:false,	
			minWidth:this.panelMinWidth,
			minHeight: this.minHeight,
			flex:1,
			listeners : {
				afterrender : function(panel){
					this.initTable();
					this.initializeDropTarget(panel);
				},	
				resize : function(panel, width, height, oldWidth, oldHeight, eOpts){
				
					if(width!=oldWidth){
						
						this.repairPercents(this.originalOptions, width);
						this.resizeTable();
					}
				},
				scope:this
			},
		
			layout : {
				type : 'table',
				cls: 'ddtable',
				columns : this.cols.length
			}
		});
		this.add(this.panel);
		
	},
	isExist : function(top, left, moved){
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p]==this.movedPanel && !moved){
				continue;
			}
			if(!this.panels[p].isOnBoard || this.panels[p].hidden){
				continue;
			}
			var pos = this.panels[p].unsavedPosition;
			if(pos.left<=left && pos.left+pos.width-1>=left &&
				pos.top<=top && pos.top+pos.height-1>=top){
				if(left==pos.left && top==pos.top){
					return true;
				}else{
					return false;
				}
			}
		}
		return true;
	},
	drawDottedArea : function(left, top, width, height, test) {
		console.log(left+","+top+","+width+","+height);
		var t1 = (new Date()).getTime();
		if(left+width-1>this.cols){
			left = this.cols-width+1;
		}
		if(top+height>this.rows){
			this.addRows(1);
		}
		
		var originalLeft = left;
		
		this.moveAllPanelToTop(false);


		var plusx = this.getPlusX(top, left);
		left = left + plusx;


		var elem;
		if(this.isExist(top, originalLeft, false) && !this.hasContent(top, originalLeft, width, height)){
			
			/**
			 * Teljesen elfér ide az elemünk, próbáljuk meg minél feljebb tolni
			 */
			var exist = this.isExist(top, originalLeft);
			var hasContent = false;
			
			if(exist){
				hasContent = this.hasContent(top, originalLeft, width, height);
			}
			
			while(top>=1 && exist && !hasContent){
			
				top--;
				exist = this.isExist(top, originalLeft);
				
				if(exist){
					hasContent = this.hasContent(top, originalLeft, width, height);
				}
			}

			top++;
			left = originalLeft+this.getPlusX(top, originalLeft);
			elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" + left + ")")[0];
			
			this.currentCellPosition = {top:top, left:originalLeft, width:width, height:height};
			
			
			
			this.movedPanel.unsavedPosition = this.currentCellPosition;
		}else{
			
			/**
			 * nem fér el teljesen, vagy nemis létezik a hely ahova be akarunk szúrni
			 */
			for(var j=0; j<height; j++){
				for(var i=0; i<width; i++){
					
					var exist = this.isExist(top+j, originalLeft+i);
					var empty = false;
					
					if(exist){
						empty =  this.findPanel(top+j, originalLeft+i) == null;
						
					}
					
					if(!exist || !empty){
						this.copyDownCellContent((top+j), originalLeft+i, height-j);
					
					}					
				}
			}
		
			
			//próbáljuk feljebb vinni a kijelölést
			
			while(top-1>=1 && this.isExist(top-1, originalLeft) && !this.hasSavedContent(top-1, originalLeft, width, height)){
				top--;
			}

			left = originalLeft+this.getPlusX(top, originalLeft);
		
			elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" + left + ")")[0];
			this.currentCellPosition = {top:top, left:originalLeft, width:width, height:height};
			
			
			this.movedPanel.unsavedPosition = this.currentCellPosition;
			this.moveAllPanelToTop(true);
		}
		
		this.refreshBoard();
	},
	
	getLeftPos: function(left){
		var aktSum=0;
		var index = 0;
		while(left>aktSum && index < this.cols.length){
			aktSum += parseInt(this.cols[index].width);
			if(aktSum<left){
				index++;
			}
		}
		return ++index;
	},
	getColspan: function(col, width){
		
		width += this.defaultPadding;
		var availableWidth = 0;
		var index = col-1;
		colspan = 0;
		while (availableWidth<width && index < this.cols.length){
			if(width-availableWidth >= availableWidth + parseInt(this.cols[index].width) -width){
				availableWidth += parseInt(this.cols[index].width);
				index++;
				colspan++;
			}else break;
		}
		if(colspan<=0){
			colspan=1;
		}
		return colspan;
	},
	initializeDropTarget: function(targetPanel) {
	
		var dropTarget = Ext.create('Ext.dd.DDTarget',targetPanel,"ddgroup");
		dropTarget.addToGroup('ddgroup');
	},
	
	addRows: function(rowsNumber, tableDomElement){
		if(!tableDomElement){
			tableDomElement = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
		}
		var cols = this.cols;
		var defaultHeight = this.defaultHeight;
		for ( var i = 0; i < rowsNumber; i++) {
			var children = [];
			
			for (var j in cols) {
				var td = {
						tag : 'td',
						id : 'td' + i + "" + j,
						cls : this.cellStyle,
						style : {
							width : cols[j].width,
							height : defaultHeight
							
						}
					};
				children.push(td);
			}			
			Ext.DomHelper.append(tableDomElement, {
				tag : 'tr',
				style : {
					height : defaultHeight
				},
				children : children
			});
			var modelRow = [];
			for(var j=0; j<children.length; j++){
				modelRow[j] = {
						empty:true,
						exist: true,
						colSpan:1,
						rowspan:1,
						domElement:Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child(" + (i+1)+ ") > td:nth-child(" + (j+1) + ")")[0]
				};
			}
			this.tableModel.push(modelRow);
		}
		this.rows = this.tableModel.length;
	},
	
	initTable: function (){
		
		this.repairPercents(this.originalOptions);		
		this.rows = 1;
		this.tableModel = [];
		this.addRows(1);

	},
	
	repairPercents: function(options){
		var pixels = 0;
		var config = {
				cols:[]
		};
		for(var i in options.cols){
			config.cols[i]= {};
			config.cols[i].type = options.cols[i].type;
			config.cols[i].width = options.cols[i].width;
			config.cols[i].minWidth = options.cols[i].minWidth;
		}
		
		for(var i in config.cols){
			if(config.cols[i].type=="fix"){
				pixels += parseInt(config.cols[i].width);
			}
		}
		
		var fullScreen = this.panel.getWidth();
		fullScreen -= pixels;
		
		for(var i in config.cols){
			if(config.cols[i].type=="flex"){
				config.cols[i].width = parseInt(config.cols[i].width)*fullScreen/100+"px";
				if(parseInt(config.cols[i].width)<parseInt(options.cols[i].minWidth)){
					config.cols[i].width = options.cols[i].minWidth;
				}
			}
		}
		
		this.cols = config.cols;
		
	},
	
	resizeTable: function(cols){
		var me = this;
			for ( var i = 0; i < this.rows; i++) {
				for ( var j = 0; j < this.cols.length; j++) {
					try{
						if(this.tableModel[i][j] && this.tableModel[i][j].exist){
							var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (i+1) + ") > td:nth-child(" + ((j+1) + this.getPlusX(i+1,j+1)) + ")")[0];
							Ext.DomHelper.applyStyles(elem, {
								width : me.getWidth((j+1), this.tableModel[i][j].colSpan) + "px",
								height : this.defaultHeight + "px"
							});
						}
					}catch(ex){
						break;
					}
				}
			}
			
			for(var p=0; p<this.panels.length; p++){
				if(this.panels[p].hidden){
					continue;
				}
				this.panels[p].setWidth(parseInt(this.getWidth(this.panels[p].unsavedPosition.left, this.panels[p].unsavedPosition.width)-this.defaultPadding));
			}
			this.setHeight();
	},
	
	getWidth: function(left,width){
		newWidth = 0;
		for(var i=left-1; i<left-1+width; i++){
			newWidth += parseInt(this.cols[i].width);
		}
		return newWidth;
	},
	addPanel: function(panel){
		
		var width = parseInt(panel.width);
		var height = parseInt(panel.height);
		
		mod = height%this.defaultHeight;
		if(mod>(this.defaultHeight/2)){
			height = ((parseInt(height/this.defaultHeight)+1)*this.defaultHeight)-this.defaultPadding;
		}else{
			height = (parseInt(height/this.defaultHeight)*this.defaultHeight)-this.defaultPadding;
		}
		if(height<this.defaultHeight){
			height = this.defaultHeight - this.defaultPadding;
		}
		panel.height = height;
		
		
		var h = parseInt((parseInt(height) + this.defaultPadding) / this.defaultHeight);
		
		var colnumber;
		var rownumber;
		if(this.isExist(this.rows, 1) && (this.tableModel[this.rows]!=undefined && this.tableModel[this.rows][0].empty)){
			rownumber = this.rows;
			colnumber = 1;
		}else{
		
			this.addRows(1);
			rownumber = this.rows;
			colnumber = 1;
		}

		panel.savedPosition = {
			top: rownumber,
			left: colnumber,
			width: this.getColspan(colnumber, width),
			height: h
		};
		
		panel.unsavedPosition = {
			top: rownumber,
			left: colnumber,
			width: this.getColspan(colnumber, width),
			height: h
		};

		var me = this;
		var resizable;
		panel.resizerFn = function(panel, width, height){
			var mod = height%parseInt(me.defaultHeight);
			if(mod>(parseInt(me.defaultHeight)/2)){
				panel.height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
				height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
			}else{
				panel.height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
				height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
			}
			if(panel.height<parseInt(me.defaultHeight)){
				panel.height = parseInt(me.defaultHeight) - me.defaultPadding;
				height = parseInt(me.defaultHeight) - me.defaultPadding;
			}
			
			var actpanel = panel;
		
			if(panel.ghostPanel){
				panel.ghostPanel.setSize(width, height);
			}
			
			var w = me.getColspan(actpanel.unsavedPosition.left, width);
			var h = parseInt((parseInt(height) + me.defaultPadding) / parseInt(me.defaultHeight));
			me.resizePanel(actpanel.unsavedPosition, {top:actpanel.unsavedPosition.top, left:actpanel.unsavedPosition.left, width:w, height:h}, actpanel);

			me.setHeight();
			
		};
		
		if(this.resizablePanels){
			resizable = {
				     transparent:true,
				     dynamic : false,
				    
				     listeners: {
				    	
						resize: function( resizer, width, height, e, eOpts ){
							
							var panel = resizer.target;								
							panel.resizerFn(resizer.target, width, height);							
							e.stopEvent();
							
						}
						
				     }
				};
		}
		else{
			resizable = false;
		}
		var cls = (panel.cls && panel.cls.match(" centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
		if(panel.rendered){
			panel.addListener('afterrender',function(panel){
				this.addPortletDragHandler(panel);
			}, this);
		}else{
			this.addPortletDragHandler(panel);
		}
		
		panel.cls = cls;
		panel.resizable = resizable;
		panel.resizeHandles = 's e se';

		this.realPanels.push(panel);			
		
		this.moveAllPanelToTop(true);
		this.saveAllPanelPosition();
		this.refreshBoard();
		this.removeUnusedRows();
	},
	
	initDashboard: function(portlets){
		for(var i in portlets){
			var panel = portlets[i].getView();
				var me = this;
				var resizable;
				
				panel.resizerFn = function(panel, width, height){
					var mod = height%parseInt(me.defaultHeight);
					if(mod>(parseInt(me.defaultHeight)/2)){
						panel.height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
						height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
					}else{
						panel.height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
						height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
					}
					if(panel.height<parseInt(me.defaultHeight)){
						panel.height = parseInt(me.defaultHeight) - me.defaultPadding;
						height = parseInt(me.defaultHeight) - me.defaultPadding;
					}
					
					if(panel.ghostPanel){
						panel.ghostPanel.setSize(width, height);
					}
					
					
					var actpanel = panel;
				
					var w = me.getColspan(actpanel.unsavedPosition.left, width);
					var h = parseInt((parseInt(height) + me.defaultPadding) / parseInt(me.defaultHeight));
					me.resizePanel(actpanel.unsavedPosition, {top:actpanel.unsavedPosition.top, left:actpanel.unsavedPosition.left, width:w, height:h}, actpanel);

					me.setHeight();
					
				};
				
				if(this.resizablePanels){
					resizable = {
						     transparent:true,
						     dynamic : false,
						    
						     listeners: {
						    	
								resize: function( resizer, width, height, e, eOpts ){
									
									var panel = resizer.target;								
									panel.resizerFn(resizer.target, width, height);
									e.stopEvent();
									
								}
								
						     }
						};
				}
				else{
					resizable = false;
				}
				var cls = (panel.cls && panel.cls.match(" centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
				panel.addListener('afterrender',function(panel){
					this.addPortletDragHandler(panel);
				}, this);

				panel.cls = cls;
				panel.resizable = resizable;
				panel.resizeHandles = 's e se';
		
				this.realPanels.push(panel);	
//			}
					
		}
		if(this.rendered){
			this.moveAllPanelToTop(true);
			this.saveAllPanelPosition();
			this.refreshBoard();
			this.removeUnusedRows();
		}else{
			this.addListener('afterrender', function(){
				this.moveAllPanelToTop(true);
				this.saveAllPanelPosition();
				this.refreshBoard();
				this.removeUnusedRows();
			}, this);
		}
		
	},
	addPortletDragHandler: function(panel){
		var me = this;
		if(me.dragable){
			var panelDD = Ext.create('Ext.dd.DDProxy',panel, "ddgroup");
			Ext.apply(panelDD,{

				onDrag: function(evt){
					var data = Ext.getCmp(this.id);
					me.movedPanel.ghostPanel.setWidth(me.movedPanel.width);
					me.movedPanel.ghostPanel.setHeight(me.movedPanel.height);
					me.movedPanel.ghostPanel.setPosition(evt.getPageX(), evt.getPageY());
					var x = me.getLeftPos(evt.browserEvent.clientX + Ext.getBody().getScrollLeft() - me.panel.body.dom.offsetLeft);
					var y= parseInt(((evt.browserEvent.clientY + Ext.getBody().getScrollTop()) - (me.panel.body.dom.offsetTop+me.panel.el.dom.offsetTop)) / parseInt(me.defaultHeight) + 1);
					
					
					var w = me.getColspan(x, data.width);
					var h = data.unsavedPosition.height; 

					//autoscroll y
					if(evt.browserEvent.clientY<=20){
						me.scrollBy(0,-30);
					}
					
					if(evt.browserEvent.clientY>=Ext.getBody().getViewSize().height-20){
						me.scrollBy(0,+30);
					}
					
					//autoscroll x
					if(evt.browserEvent.clientX<=20){
						me.scrollBy(-30,0);
					}
					
					if(evt.browserEvent.clientX>=Ext.getBody().getViewSize().width-20){
						me.scrollBy(+30,0);
					}
					
					if (y != me.currentRow || x != me.currentCol) {

						me.currentRow = y;
						me.currentCol = x;
						me.drawDottedArea(x, y, w, h);
					}
				},
				
				b4Drag: function(e){
					me.movedPanel = Ext.getCmp(this.id);
					var x = me.movedPanel.unsavedPosition.left; 
					var y = me.movedPanel.unsavedPosition.top;
					this.currentRow = y;
					this.currentCol = x;
					
					me.movedPanel.ghost();
					
		        },
	            endDrag: function(e) {
	            		me.movedPanel.removeCls('x-dd-drag-current');
		            	if(me.hideOnMove){
							me.refreshRealPanelsByDummy();
						}
						
						me.movedPanel.ghostPanel.hide();
						me.currentCellPosition = undefined;
						
						me.movedPanel = undefined;	
						me.saveAllPanelPosition();

						me.removeUnusedRows();
						me.refreshBoard();

						me.enddrag = true;
						me.minHeight = me.rows*me.defaultHeight;
						me.panel.minHeight = me.minHeight;
						me.panel.height = me.minHeight;
		            }});
		}
	},
	
	moveAllPanelToTop: function(droppedNot){//csak a kijelölésig kell elvinni az elemeket
		for(var p = 0; p < this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			if(this.panels[p]==this.movedPanel){
				continue;
			}
			var pos = this.panels[p].unsavedPosition;

			var canMoveTop = true;
			var moveHeight = 0;
			while (canMoveTop && pos.top-(moveHeight+1)>=1){
				for(var i=0; i<pos.width; i++){
					if((!droppedNot && this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined)
					|| (droppedNot && (this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined || this.isInCurrentCell(pos.top-(moveHeight+1), pos.left+i)))){
						canMoveTop = false;
					}
					
				}
				if(canMoveTop){
					moveHeight++;
				}
			}
			if(moveHeight>0){		
				this.copyCellContent(pos.top, pos.left, pos.top-(moveHeight), pos.left);
				
				this.moveAllPanelToTop(droppedNot);
				return;
			}
		}
		if ( this.currentCellPosition!=null &&  this.currentCellPosition!=undefined){
			var pos = this.currentCellPosition;
			
			var canMoveTop = true;
			var moveHeight = 0;
			while (canMoveTop && pos.top-(moveHeight+1)>=1){
				for(var i=0; i<pos.width; i++){
					if((!droppedNot && this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined)
					|| (droppedNot && (this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined || this.isInCurrentCell(pos.top-(moveHeight+1), pos.left+i)))){
						canMoveTop = false;
					}
					
				}
				if(canMoveTop){
					moveHeight++;
				}
			}
			if(moveHeight>0){		
				this.copyCellContent(pos.top, pos.left, pos.top-(moveHeight), pos.left);
				
				this.moveAllPanelToTop(droppedNot);
				return;
			}
		}
	},
	
	refreshBoard: function(draggedNot){
		var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
		var newElem = document.createElement('tbody');
		this.tableModel = [];
		elem.parentNode.replaceChild(newElem, elem);
		this.addRows(this.rows, newElem);
		
		
		newElem.parentNode.style.height = this.rows*this.defaultHeight+"px";
		for(var p=0; p<this.panels.length; p++){
			
			this.panels[p].isOnBoard = false;
		}
		
		for(var p=0; p<this.panels.length; p++){
			if(this.panels[p] != this.movedPanel && this.panels[p] != this.currentAutoMovedPanel && this.panels[p] != undefined){
				this.insertDiv(this.panels[p].unsavedPosition.width, this.panels[p].unsavedPosition.height, this.panels[p].unsavedPosition.top, this.panels[p].unsavedPosition.left, this.panels[p]);
			}
			this.panels[p].isOnBoard = true;
			
		}
		if(this.currentCellPosition!=null && this.currentCellPosition != undefined){

			var pos = this.currentCellPosition;
			if(pos.left>this.cols.length){
				pos.left--;
			}
			elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ pos.top + ") > td:nth-child("+(pos.left+this.getPlusX(pos.top,pos.left))+")")[0];
			
			elem.colSpan = pos.width;
			elem.rowSpan = pos.height;
			var div = {
					tag:"div",
					cls: "dottedArea",
					style: {
						width : (this.getWidth((pos.left/*+this.getPlusX(pos.top,pos.left)*/),pos.width)-this.defaultPadding)+ "px",
						height : (parseInt(this.defaultHeight) * pos.height-this.defaultPadding)+ "px"
					}
				};
			Ext.DomHelper.append(elem, div);
			
			Ext.DomHelper.applyStyles(elem, {
				width : this.getWidth((pos.left/*+this.getPlusX(pos.top,pos.left)*/),pos.width)+ "px",
				height : (parseInt(this.defaultHeight) * pos.height)+ "px"
				
			});
		
			/**
			 * Törlés az első sorból
			 */
			for ( var k = 1; k < pos.width; k++) {
			
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ pos.top + ")")[0];
				if(elem)
				elem.deleteCell(pos.left+this.getPlusX(pos.top, pos.left));
				
			}

			/**
			 * Törlés a többi sorból
			 */
			for ( var k = 1; k < pos.height; k++) {
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (pos.top + k) + ")")[0];
				if(!elem){
					this.addRows(1);
					this.rows++;
					 elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (pos.top + k) + ")")[0];
				}
				for ( var l = 0; l < pos.width; l++) {
					
					try{
						elem.deleteCell((pos.left+this.getPlusX(pos.top+k, pos.left))-1);
					}catch(ex){
					
					}
				}
			}
		}
		
		newElem.parentNode.style.height = this.rows*this.defaultHeight+"px";
		this.panel.minHeight = this.rows*this.defaultHeight;
		this.panel.setHeight(this.rows*this.defaultHeight);
		this.resizeTable();

	},
	
	insertDiv : function(col, row, rownumber, colnumber, panel) {
		if(panel.hidden){
			return;
		}
		if(row+rownumber-1>this.rows){
			this.addRows((row+rownumber-1)-this.rows);
			this.rows = row+rownumber-1;
		}
		
		if(rownumber<=0 || colnumber<=0 || row<=0 || col<=0){
			alert("Div insert position error!");
			return;
		}
		
		var plusx = this.getPlusX(rownumber, colnumber);
		
		panel.width = (this.getWidth(colnumber, col)-this.defaultPadding);
		/**
		 * Törlés az első sorból
		 */
		var actrow = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ")")[0];
		
		while(actrow==null || actrow==undefined){
			 this.addRows(1);
			 actrow = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ")")[0];
		}
		
		for ( var k = 1; k < col; k++) {
			
			try{
				this.tableModel[rownumber-1][colnumber+k-1].exist=false;
				actrow.deleteCell(colnumber+plusx);
			}catch(ex){
			}
		}

		/**
		 * törlés a többi sorból
		 */
		for ( var k = 1; k < row; k++) {
			var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (rownumber + k) + ")")[0];
			if(elem==null || elem==undefined){
				this.addRows(1);
				 elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (rownumber + k) + ")")[0];
			}
			for ( var l = 0; l < col; l++) {
				try{
					this.tableModel[rownumber+k-1][colnumber+l-1].exist=false;
					elem.deleteCell((colnumber+this.getPlusX(rownumber+k, colnumber))-1);
				}catch(ex){
				//	console.debug(ex);
				}
			}
		}

		var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ") > td:nth-child(" + (colnumber+plusx) + ")")[0];
		elem.innerHTML = "";
		elem.colSpan = col;
		elem.rowSpan = row;
		this.tableModel[rownumber-1][colnumber-1].colSpan = col;
		this.tableModel[rownumber-1][colnumber-1].rowSpan = row;
		
		
		if(row+rownumber-1==this.rows){
			this.addRows(1);
		}
		
		var pos = {top:rownumber, left:colnumber, width:col, height:row};
		
		panel.unsavedPosition = pos;

		var me = this;
		var cls = (panel.cls && panel.cls.match("centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
		panel.resizeHandles = 's e se';
		panel.setWidth(me.getWidth(colnumber, col)-me.defaultPadding);
	    panel.setHeight(row*me.defaultHeight-me.defaultPadding);
	    panel.cls = cls;
		
		if(panel.rendered){
			panel.getEl().appendTo(elem);
			panel.hide();
			panel.show();
		}else{
			panel.render(elem);
			
		}

	},
	
	getPlusX: function(top, left){
		var plusx = 0;
		
			for ( var j = 1; j < left; j++) {
				if(this.tableModel[top-1] && this.tableModel[top-1][j-1] && !this.tableModel[top-1][j-1].exist){
				plusx--;
			}
		}

		
		var currentPanel = this.findPanel(top, left);
		if(currentPanel!=null ){
			
		//	var td = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ currentPanel.unsavedPosition.top + ") > td:nth-child(" +(currentPanel.unsavedPosition.left)+ ")")[0];
			if(this.tableModel[currentPanel.unsavedPosition.top-1] && this.tableModel[currentPanel.unsavedPosition.top-1][currentPanel.unsavedPosition.left-1] && !this.tableModel[currentPanel.unsavedPosition.top-1][currentPanel.unsavedPosition.left-1].empty){
				plusx-= (left - currentPanel.unsavedPosition.left);
			}
			
		}
		return plusx;
	},
	
	findPanel : function(top, left, saved){
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p]==this.movedPanel || this.panels[p].hidden){
				continue;
			}
			var pos;
			if(saved){
				pos = this.panels[p].savedPosition; 
			}
			else pos = this.panels[p].unsavedPosition;
			if(pos.left<=left && pos.left+pos.width-1>=left &&
				pos.top<=top && pos.top+pos.height-1>=top){
				return this.panels[p];
			}
		}
		return null;
	},
	hasContent: function(top, left, width, height){
		for(var i=0; i<height; i++){
			for(var j=0; j<width; j++){
				if(this.findPanel(top+i, left+j)!=undefined){
					return true;
				}
			}
		}
		return false;
	},
	hasSavedContent: function(top, left, width, height){
		for(var i=0; i<height; i++){
			for(var j=0; j<width; j++){
				if(this.findPanel(top+i, left+j, true)!=undefined){
					return true;
				}
			}
		}
		return false;
	},
	findPanelByPos: function(top,left){
	
		for(var p=0; p< this.panels.length; p++){
			if(!this.panels[p].hidden && this.panels[p].unsavedPosition.top == top && (this.panels[p].unsavedPosition.left <= left && this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1>=left)){
				return this.panels[p];
			}
		}
	},
	saveAllPanelPosition : function(){
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			this.panels[p].savedPosition = this.panels[p].unsavedPosition;
		}
	},
	

	deletePanel: function(id){
		
		for(var i=0; i<this.panels.length; i++){
			if(this.panels[i].controller.model.get('portletId') == id){
				Ext.Array.erase(this.panels, i, 1);
			}
		}

		this.moveAllPanelToTop();
		this.refreshBoard();
		
	},
	
	removeUnusedRows: function(){
		var table = Ext.query("div#mainPanel"+this.id+" table:nth(1)")[0];
		var rows = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr");
		var deletedNumber = 0;
		this.rows = this.getMaxRow();
		for(var i=this.rows; i<rows.length-1; i++){
			
			table.deleteRow(this.rows);
			this.panel.setHeight(this.panel.getHeight()-this.defaultHeight);
			
			deletedNumber++;
		}
		this.panel.minHeight =(this.rows+1)*this.defaultHeight;
	//	this.rows -= deletedNumber;
	//	this.setHeight();
	},
	
	getMaxRow: function(){
		var max = 1;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			if(this.panels[p].savedPosition.top+this.panels[p].savedPosition.height>max){
				max = this.panels[p].savedPosition.top+this.panels[p].savedPosition.height;
			}
		}
		return max;
	},
	isInCurrentCell : function(top, left){
		try{
			var pos = this.currentCellPosition;
			if(pos.left<=left && pos.left+pos.width-1>=left &&
					pos.top<=top && pos.top+pos.height-1>=top){
					return true;
				}
			}catch(e){
				return false;
			}
			return false;
	},
	copyCellContent: function(top, left, newTop, newLeft){
		/**
		 * Ezt a panelt akarjuk alrébb tenni
		 */
		var panel = undefined;
		var panelIndex = 0;
		for(var p=0; p< this.panels.length; p++){

			if(!this.panels[p].hidden && this.panels[p].unsavedPosition.left == left && this.panels[p].unsavedPosition.top == top){
				panel = this.panels[p];
				panelIndex = p;
				break;
			}
		}
		if(panel==undefined){
			console.debug("nincs találat("+top+","+left+")");
			return;
		}

		this.panels[panelIndex].unsavedPosition.top= newTop;
		this.panels[panelIndex].unsavedPosition.left= newLeft;

	},
	
	/**
	 * Csak ellenőrzés, nem törlünk semmit sehonnan
	 * @param index
	 */
	checkColumn: function(index){
		for(var i = 0; i<this.rows; i++){
			var p = this.findPanel(i, index, false);
			if(p!=undefined && p!=null){
				//itt kezdődik és csak ebben az oszlopban van
				if(p.unsavedPosition.left==index && p.unsavedPosition.width==1){
					return lang.dashboardedit.hasContent;	
				}
			}
		}
	},
	
	deleteColumn: function(index, force){
		/**
		 * végigmegyünk az oszlopon, megkeressük minden poziciójára hogy ki van benne (findPanel)
		 * a megtalált panelokat 3 esetre bontjuk:
		 * 1) belóg de nem itt kezdődik: a panel méretét csökkentjük az oszlop szélességével, vagyis az eddigi colspan-t eggyel csökkentjük
		 * 2) itt kezdődik és továbblóg valahova: a panel méretét csökkentjük, áthelyezzük a jobb oldali oszlopba, amit eddig si elfoglalt
		 * 3) a panel itt kezdődik és nem is lóg ki innen
		 */
		
		for(var i = 0; i<this.rows; i++){
			var p = this.findPanel(i, index, false);
			if(p!=undefined && p!=null){
				//belóg, de nem itt kezdődik
				if(p.unsavedPosition.left<index){
					p.unsavedPosition.width --; 
				}
				if(p.unsavedPosition.left==index && p.unsavedPosition.width>=2){
					p.unsavedPosition.width --; 
					p.unsavedPosition.left ++; 
				}
				if(p.unsavedPosition.left==index && p.unsavedPosition.width==1){
					if(force){
					//	p.destroy();
						for(var p2 in this.panels){
							if(this.panels[p2].hidden){
								continue;
							}
							if( this.panels[p2].savedPosition.top == p.savedPosition.top && (this.panels[p2].savedPosition.left <= p.savedPosition.left && this.panels[p2].savedPosition.left+this.panels[p2].savedPosition.width-1>=p.savedPosition.left)){
								this.dashboard.deletePortlet(this.panels[p2].controller.model.get('portletId'), true);
								Ext.Array.erase(this.panels,p2, 1);
								
							}
						}
					}					
				}
			}
		}
		
		for(var i in this.panels){
			if(this.panels[i].hidden){
				continue;
			}
			if(this.panels[i].unsavedPosition.left>index){
				this.panels[i].unsavedPosition.left--;
			}
			this.panels[i].savedPosition = this.panels[i].unsavedPosition;
			this.removeUnusedRows();
		}
	},
	
	insertColumn : function(index){
		for(var i in this.panels){
			if(this.panels[i].hidden){
				continue;
			}
			if(this.panels[i].savedPosition.left>=index){
				this.panels[i].savedPosition.left++;
			}
			this.panels[i].unsavedPosition = this.panels[i].savedPosition;
			
		}
	},
	fillDummyPanels: function(){
		this.dummyPanels=[];
		for(var p =0; p<this.realPanels.length; p++){
			if(p!=this.movedPanel && !this.realPanels[p].hidden){
				this.dummyPanels.push(this.realPanels[p].cloneConfig({
					html : "",
					realPanelId : p,
					items:[],
					cls: "dummyPanel",
					savedPosition: this.realPanels[p].savedPosition,
					unsavedPosition: this.realPanels[p].unsavedPosition,
					title: this.realPanels[p].title,
					width:  this.realPanels[p].width,
					height:  this.realPanels[p].height
				}));
			}
		}
		
		this.panels = this.dummyPanels;
	},
	
	refreshRealPanelsByDummy: function(){
		for(var p =0; p<this.dummyPanels.length; p++){
			this.realPanels[this.dummyPanels[p].realPanelId].savedPosition = this.dummyPanels[p].savedPosition;
			this.realPanels[this.dummyPanels[p].realPanelId].unsavedPosition = this.dummyPanels[p].unsavedPosition;
		}
		this.panels = this.realPanels;
	},
	copyDownCellContent: function(top2, left, plustop){
		
		/**
		 * Ezt a panelt akarjuk alrébb tenni
		 */
		var panelIndex = 0;
		var panel = undefined;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			if((this.panels[p].unsavedPosition.left<= left && left <=this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1) 
					&& this.panels[p].unsavedPosition.top == top2 && this.panels[p]!=this.movedPanel){
				panel = this.panels[p];
				panelIndex = p;
				break;
			}
		}
		if(panel==undefined){
			while(panel==undefined && top2>1){
				top2--;
				plustop++;
				for(var p=0; p<this.panels.length; p++){
					if(this.panels[p].hidden){
						continue;
					}
					if((this.panels[p].unsavedPosition.left<= left && left <=this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1) && this.panels[p].unsavedPosition.top == top2 && this.panels[p]!=this.movedPanel){
						panel = this.panels[p];
						panelIndex = p;
						break;
					}
				}
			}			
		}
		if(panel==undefined || panel==this.movedPanel){
			return;
		}
	
		/**
		 * Ellenőrzni kell hogy befér-e és ha nem akkor rekurzívan alrébb tesszük azt amelyik miatt nem fér be
		 * csak a közvetlenül felettünk lévőt elenőrizzük
		 */
		
		var panels = this.getBottomerPanels(panel.unsavedPosition.top, panel.unsavedPosition.left, panel.unsavedPosition.width);
		
		for(var p=0; p< panels.length; p++){
			this.copyDownCellContent(panels[p].unsavedPosition.top,panels[p].unsavedPosition.left,plustop);
		}				
		

		this.panels[panelIndex].unsavedPosition.top = top2+plustop;
		

	},
	
	hideAllcontent : function(){
		this.hidden = true;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			this.panels[p].body.hide();
		}
	},
	showAllcontent : function(){
		this.hidden = false;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			this.panels[p].body.show();
		}
	},
	
	
	getBottomerPanels: function(top, left, width){

		var panels2 = [];
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			var felt0 = this.panels[p].unsavedPosition.top >top;
			var felt1 = this.panels[p].unsavedPosition.left >=left && this.panels[p].unsavedPosition.left<=left+width-1;
			var felt2 = this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1 >=left && this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1<=left+width-1;
			var felt3 = this.panels[p].unsavedPosition.left <= left && this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1>=left+width-1;
			var felt4 = this.panels[p] == this.movedPanel;
			if(felt0 && (felt1 || felt2 || felt3) && !felt4){
				
				panels2.push(this.panels[p]);
			}
		}
		
		var firstindex = undefined;
		for(var p=0; p< panels2.length; p++){
			if(firstindex == undefined || panels2[p].unsavedPosition.top<firstindex){
				firstindex = panels2[p].unsavedPosition.top;
			}
		}
		var panels3 = [];
		for(var p=0; p< panels2.length; p++){
			if( panels2[p].unsavedPosition.top==firstindex){
				panels3.push(panels2[p]);
			}
		}
		
		return panels3;
	},
	getColspan: function(col, width){
		
		width += this.defaultPadding;
		var availableWidth = 0;
		var index = col-1;
		colspan = 0;
		while (availableWidth<width && index < this.cols.length){
			if(width-availableWidth >= availableWidth + parseInt(this.cols[index].width) -width){
				availableWidth += parseInt(this.cols[index].width);
				index++;
				colspan++;
			}else break;
		}
		if(colspan<=0){
			colspan=1;
		}
		return colspan;
	},
	resizePanel: function(oldpos, newpos, panel){
		
		panel.savedPosition=panel.unsavedPosition;
		
		/**
		 * a saját panelunkat tartalmazó cella colspanját, rowspanját kell módosítani
		 * előtte meg kell keresni azokat a panelokat akik belelógnának az új méret szerinti panelbe
		 */
		for(var i=1; i<=newpos.width; i++){
			for (var j=1; j<=newpos.height; j++){
				p = this.findPanel(oldpos.top+j-1,oldpos.left+i-1);
				if(p!=null && !(p.unsavedPosition.top==panel.unsavedPosition.top &&  p.unsavedPosition.left==panel.unsavedPosition.left))
				this.copyDownCellContent(p.unsavedPosition.top, p.unsavedPosition.left, p.unsavedPosition.height);
			}
		}

		panel.el.dom.style.left = 0;
		panel.el.dom.style.top = 0;
		panel.unsavedPosition = newpos;
		this.moveAllPanelToTop();
		this.saveAllPanelPosition();
		this.refreshBoard();
		this.removeUnusedRows();
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.DragAndDropPanel',
		{
		config:{
			out:false,
			defaultWidth : 100,
			defaultHeight : 100,
			defaultPadding : 10,
			cols : 5,
			id: 0,
			editable: false,
			rows : 5,
			panels:undefined,
			
			dragable: true,
			resizable: true,
			visible: true,
			hideOnMove: true,
			cellStyle: "backendTableTd",
			cells : [],
			dashboard: {}
		},		
			addPanel: function(panel){
				
				var width = parseInt(panel.width);
				var height = parseInt(panel.height);
				
				mod = height%this.defaultHeight;
				if(mod>(this.defaultHeight/2)){
					height = ((parseInt(height/this.defaultHeight)+1)*this.defaultHeight)-this.defaultPadding;
				}else{
					height = (parseInt(height/this.defaultHeight)*this.defaultHeight)-this.defaultPadding;
				}
				if(height<this.defaultHeight){
					height = this.defaultHeight - this.defaultPadding;
				}
				panel.height = height;
				
				
				var h = parseInt((parseInt(height) + this.defaultPadding) / this.defaultHeight);
				
				var colnumber;
				var rownumber;
				if(this.isExist(this.rows, 1) && this.isEmptyTD(Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ this.rows + ") > td:nth-child(" + (1) + ")")[0])){
					rownumber = this.rows;
					colnumber = 1;
				}else{
				
					this.insertRowToEnd();
					rownumber = this.rows;
					colnumber = 1;
				}

				panel.savedPosition = {
					top: rownumber,
					left: colnumber,
					width: this.getColspan(colnumber, width),
					height: h
				};
				
				panel.unsavedPosition = {
					top: rownumber,
					left: colnumber,
					width: this.getColspan(colnumber, width),
					height: h
				};

				var myself = this;
				var me = this;
				var resizable;
				panel.resizerFn = function(panel, width, height){
					mod = height%parseInt(myself.defaultHeight);
					if(mod>(parseInt(myself.defaultHeight)/2)){
						panel.height = ((parseInt(height/parseInt(myself.defaultHeight))+1)*parseInt(myself.defaultHeight))-myself.defaultPadding;
						height = ((parseInt(height/parseInt(myself.defaultHeight))+1)*parseInt(myself.defaultHeight))-myself.defaultPadding;
					}else{
						panel.height = (parseInt(height/parseInt(myself.defaultHeight))*parseInt(myself.defaultHeight))-myself.defaultPadding;
						height = (parseInt(height/parseInt(myself.defaultHeight))*parseInt(myself.defaultHeight))-myself.defaultPadding;
					}
					if(panel.height<parseInt(myself.defaultHeight)){
						panel.height = parseInt(myself.defaultHeight) - myself.defaultPadding;
						height = parseInt(myself.defaultHeight) - myself.defaultPadding;
					}
					
					var actpanel = panel;
				//	actpanel = myself.panels[myself.resizingPanelIndex];
					var w = myself.getColspan(actpanel.unsavedPosition.left, width);
					var h = parseInt((parseInt(height) + myself.defaultPadding) / parseInt(myself.defaultHeight));
					
				//	actpanel.setWidth(myself.getWidth(actpanel.unsavedPosition.left, w)-myself.defaultPadding);

				//	if(w!=actpanel.unsavedPosition.width || h!=actpanel.unsavedPosition.height)
					myself.resizePanel(actpanel.unsavedPosition, {top:actpanel.unsavedPosition.top, left:actpanel.unsavedPosition.left, width:w, height:h}, actpanel);
					
				}
				
				if(myself.resizable){
					resizable = {
						     transparent:true,
						     dynamic : false,
						    
						     listeners: {
						    	
								resize: function( resizer, width, height, e, eOpts ){
									
									var panel = resizer.target;								
									panel.resizerFn(resizer.target, width, height);
									e.stopEvent();
									
								}
								
						     }
						};
				}
				else{
					resizable = false;
				}
				
				
				var me = this;
			
				var cls = (panel.cls && panel.cls.match(" centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
				panel.draggable = this.getPortletDragHandlerConfig();
				panel.cls = cls;
				panel.resizable = resizable;
				panel.resizeHandles = 's e se';
		
				this.realPanels.push(panel);			
				
				this.moveAllPanelToTop(true);
				this.saveAllPanelPosition();
				this.refreshBoard();
				this.removeUnusedRows();
			},
			
			getPortletDragHandlerConfig: function(){
				var draggable;
				var me = this;
				if(me.dragable){
					draggable = {
				            insertProxy: true,
				            constrain:false,
				            onDrag: function(e) {
				                var el = this.proxy.getEl();
				                this.x = el.getX();
				                this.y = el.getY();
				             
				            },
				            startDrag: function(e){
				            	
				            	this.panel.ghostPanel.show();
				            },
				            endDrag: function(e) {

				            	if(me.hideOnMove){
									me.refreshRealPanelsByDummy();
								}
								
								var pos = me.currentCellPosition;
								

								var c = pos.left;
								c = c+ me.getPlusX(pos.top, c);
								var elem = Ext.query("div#mainPanel"+me.id+" table:nth(1) > tbody > tr:nth-child(" + pos.top+ ") > td:nth-child(" + c + ")")[0];

								elem.innerHTML = "";
							
								me.movedPanel.getEl().appendTo(elem);
								me.movedPanel.setWidth(me.getWidth(pos.left, pos.width) - me.defaultPadding);
								me.movedPanel.setHeight(pos.height * me.defaultHeight - me.defaultPadding);
								me.movedPanel.savedPosition = pos;
								me.movedPanel.unsavedPosition = pos;
								me.movedPanel.draggable = me.dragable;
								me.movedPanel.show();

								me.currentCellPosition = undefined;
								
								me.movedPanel = undefined;	
								me.saveAllPanelPosition();
								me.currentDropCell = undefined;

								me.removeUnusedRows();
								me.refreshBoard();
								Ext.DomHelper.applyStyles(elem, {
									border : 'none',
									background : "none"
								});	
								this.panel.ghostPanel.hide();
								
								me.enddrag = true;
								me.minHeight = me.rows*me.defaultHeight;
								me.panel.minHeight = me.minHeight;
								me.panel.height = me.minHeight;
								
				            }
				        };
				}else{
					draggable=false;
				}
				return draggable;
			},
			
			initDashboard: function(portlets){
				for(var i in portlets){
					var panel = portlets[i].getView();
					var myself = this;
					var me = this;
					var resizable;
					
					panel.resizerFn = function(panel, width, height){
						mod = height%parseInt(myself.defaultHeight);
						if(mod>(parseInt(myself.defaultHeight)/2)){
							panel.height = ((parseInt(height/parseInt(myself.defaultHeight))+1)*parseInt(myself.defaultHeight))-myself.defaultPadding;
							height = ((parseInt(height/parseInt(myself.defaultHeight))+1)*parseInt(myself.defaultHeight))-myself.defaultPadding;
						}else{
							panel.height = (parseInt(height/parseInt(myself.defaultHeight))*parseInt(myself.defaultHeight))-myself.defaultPadding;
							height = (parseInt(height/parseInt(myself.defaultHeight))*parseInt(myself.defaultHeight))-myself.defaultPadding;
						}
						if(panel.height<parseInt(myself.defaultHeight)){
							panel.height = parseInt(myself.defaultHeight) - myself.defaultPadding;
							height = parseInt(myself.defaultHeight) - myself.defaultPadding;
						}
						
						var actpanel = panel;
					//	actpanel = myself.panels[myself.resizingPanelIndex];
						var w = myself.getColspan(actpanel.unsavedPosition.left, width);
						var h = parseInt((parseInt(height) + myself.defaultPadding) / parseInt(myself.defaultHeight));
						
					//	actpanel.setWidth(myself.getWidth(actpanel.unsavedPosition.left, w)-myself.defaultPadding);

					//	if(w!=actpanel.unsavedPosition.width || h!=actpanel.unsavedPosition.height)
						myself.resizePanel(actpanel.unsavedPosition, {top:actpanel.unsavedPosition.top, left:actpanel.unsavedPosition.left, width:w, height:h}, actpanel);

						myself.setHeight();
						
					}
					
					if(myself.resizable){
						resizable = {
							     transparent:true,
							     dynamic : false,
							    
							     listeners: {
							    	
									resize: function( resizer, width, height, e, eOpts ){
										
										var panel = resizer.target;								
										panel.resizerFn(resizer.target, width, height);
										e.stopEvent();
										
									}
									
							     }
							};
					}
					else{
						resizable = false;
					}
					
				
					var cls = (panel.cls && panel.cls.match(" centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
					panel.draggable = this.getPortletDragHandlerConfig();
					panel.cls = cls;
					panel.resizable = resizable;
					panel.resizeHandles = 's e se';
			
					this.realPanels.push(panel);			
				}
				this.moveAllPanelToTop(true);
				this.saveAllPanelPosition();
				this.refreshBoard();
				this.removeUnusedRows();
			},
			
			getColspan: function(col, width){
				
				width += this.defaultPadding;
				var availableWidth = 0;
				var index = col-1;
				colspan = 0;
				while (availableWidth<width && index < this.cols.length){
					if(width-availableWidth >= availableWidth + parseInt(this.cols[index].width) -width){
						availableWidth += parseInt(this.cols[index].width);
						index++;
						colspan++;
					}else break;
				}
				if(colspan<=0){
					colspan=1;
				}
				return colspan;
			},
			
			getLeftPos: function(left){
				var aktSum=0;
				var index = 0;
				while(left>aktSum && index < this.cols.length){
					aktSum += parseInt(this.cols[index].width);
					if(aktSum<left){
						index++;
					}
				}
				return ++index;
			},
			
			getWidth: function(left,width){
				newWidth = 0;
				for(var i=left-1; i<left-1+width; i++){
					newWidth += parseInt(this.cols[i].width);
				}
				return newWidth;
			},
			
			insertPanel : function(col, row, rownumber, colnumber, panel){
				panel.width = (this.getWidth(colnumber, col)-this.defaultPadding);
				this.insertDiv(col, row, rownumber, colnumber, panel);
				this.realPanels.push(panel);
			},
			
			insertRowToEnd: function(){
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
				var children = [];
				for (var j in this.cols) {
					children.push({
						tag : 'td',
						id : 'td' + j,
						cls : this.cellStyle,
						width : this.cols[j].width,
						style : {
							width : this.cols[j].width,
							height : this.defaultHeight
						}
					});
				}

				Ext.DomHelper.append(elem, {
					tag : 'tr',
					style : {
						height : this.defaultHeight
					},
					children : children
				});
				this.rows++;
				this.panel.setHeight(this.panel.getHeight()+this.defaultHeight);
								
			},
			/**
			 * abszolult cella poziciókat használunk!
			 * @param col
			 * @param row
			 * @param rownumber
			 * @param colnumber
			 * @param panel
			 */
			insertDiv : function(col, row, rownumber, colnumber, panel) {
				if(rownumber<=0 || colnumber<=0 || row<=0 || col<=0){
					alert("Div insert position error!");
					return;
				}
				
				var plusx = this.getPlusX(rownumber, colnumber);
				
				panel.width = (this.getWidth(colnumber, col)-this.defaultPadding);
				/**
				 * Törlés az első sorból
				 */
				var actrow = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ")")[0];
				
				while(actrow==null || actrow==undefined){
					this.insertRowToEnd();
					 actrow = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ")")[0];
				}
				
				for ( var k = 1; k < col; k++) {
					
					try{
						
						actrow.deleteCell(colnumber+plusx);
					}catch(ex){
					}
				}

				/**
				 * törlés a többi sorból
				 */
				for ( var k = 1; k < row; k++) {
					var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (rownumber + k) + ")")[0];
					if(elem==null || elem==undefined){
						this.insertRowToEnd();
						 elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (rownumber + k) + ")")[0];
					}
					for ( var l = 0; l < col; l++) {
						try{
							elem.deleteCell((colnumber+this.getPlusX(rownumber+k, colnumber))-1);
						}catch(ex){
						//	console.debug(ex);
						}
					}
				}

				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ") > td:nth-child(" + (colnumber+plusx) + ")")[0];
				elem.innerHTML = "";
				elem.colSpan = col;
				elem.rowSpan = row;
				
				
				if(row+rownumber-1==this.rows){
					this.insertRowToEnd();
				}
				
				var pos = {top:rownumber, left:colnumber, width:col, height:row};
				
				panel.unsavedPosition = pos;

				var me = this;
				var cls = (panel.cls && panel.cls.match("centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
				panel.resizeHandles = 's e se';
				panel.setWidth(me.getWidth(colnumber, col)-me.defaultPadding);
			    panel.setHeight(row*me.defaultHeight-me.defaultPadding);
			    panel.cls = cls;
				
				if(panel.rendered){
					panel.getEl().appendTo(elem);
					panel.hide();
					panel.show();
				}else{
					panel.render(elem);
					
				}

			},

			resizePanel: function(oldpos, newpos, panel){
				
				panel.savedPosition=panel.unsavedPosition;
				
				/**
				 * a saját panelunkat tartalmazó cella colspanját, rowspanját kell módosítani
				 * előtte meg kell keresni azokat a panelokat akik belelógnának az új méret szerinti panelbe
				 */
				for(var i=1; i<=newpos.width; i++){
					for (var j=1; j<=newpos.height; j++){
						p = this.findPanel(oldpos.top+j-1,oldpos.left+i-1);
						if(p!=null && !(p.unsavedPosition.top==panel.unsavedPosition.top &&  p.unsavedPosition.left==panel.unsavedPosition.left))
						this.copyDownCellContent(p.unsavedPosition.top, p.unsavedPosition.left, p.unsavedPosition.height);
					}
				}

	//			this.insertDiv(newpos.width, newpos.height, newpos.top, newpos.left, panel);
				panel.el.dom.style.left = 0;
				panel.el.dom.style.top = 0;
				panel.unsavedPosition = newpos;
				this.moveAllPanelToTop();
				this.saveAllPanelPosition();
				this.refreshBoard();
				this.removeUnusedRows();
			},
			
			findPanel : function(top, left, saved){
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p]==this.movedPanel){
						continue;
					}
					var pos;
					if(saved){
						pos = this.panels[p].savedPosition; 
					}
					else pos = this.panels[p].unsavedPosition;
					if(pos.left<=left && pos.left+pos.width-1>=left &&
						pos.top<=top && pos.top+pos.height-1>=top){
						return this.panels[p];
					}
				}
				return null;
			},
			
			drawDottedArea : function(left, top, width, height, test) {
				var t1 = (new Date()).getTime();
				if(left+width-1>this.cols){
					left = this.cols-width+1;
				}
				if(top+height>this.rows){
					this.insertRowToEnd();
				}
				
				var originalLeft = left;
				
				this.moveAllPanelToTop(false);


				var plusx = this.getPlusX(top, left);
				left = left + plusx;


				var elem;
				if(this.isExist(top, originalLeft, false) && !this.hasContent(top, originalLeft, width, height)){
					
					/**
					 * Teljesen elfér ide az elemünk, próbáljuk meg minél feljebb tolni
					 */
					var exist = this.isExist(top, originalLeft);
					var hasContent = false;
					
					if(exist){
						hasContent = this.hasContent(top, originalLeft, width, height);
					}
					
					while(top>=1 && exist && !hasContent){
					
						top--;
						exist = this.isExist(top, originalLeft);
						
						if(exist){
							hasContent = this.hasContent(top, originalLeft, width, height);
						}
					}

					top++;
					left = originalLeft+this.getPlusX(top, originalLeft);
					elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" + left + ")")[0];
					
					this.currentCellPosition = {top:top, left:originalLeft, width:width, height:height};
					
					this.currentDropCell = elem;
					
					
					this.movedPanel.unsavedPosition = this.currentCellPosition;
				}else{
					
					/**
					 * nem fér el teljesen, vagy nemis létezik a hely ahova be akarunk szúrni
					 */
					for(var j=0; j<height; j++){
						for(var i=0; i<width; i++){
							
							var exist = this.isExist(top+j, originalLeft+i);
							var empty = false;
							
							if(exist){
								empty =  this.findPanel(top+j, originalLeft+i) == null;
								
							}
							
							if(!exist || !empty){
								this.copyDownCellContent((top+j), originalLeft+i, height-j);
							
							}					
						}
					}
				
					
					//próbáljuk feljebb vinni a kijelölést
					
					while(top-1>=1 && this.isExist(top-1, originalLeft) && !this.hasSavedContent(top-1, originalLeft, width, height)){
						top--;
					}

					left = originalLeft+this.getPlusX(top, originalLeft);
				
					elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" + left + ")")[0];
					this.currentCellPosition = {top:top, left:originalLeft, width:width, height:height};
					
					this.currentDropCell = elem;
					
					this.movedPanel.unsavedPosition = this.currentCellPosition;
					this.moveAllPanelToTop(true);
				}
				
				this.refreshBoard();
			},
			/**
			 * abszolult hivatkozás a cellákra, eldöntjük hogy üle- rajta éppen panel sé emiatt esetleg nem si létezik
			 * @param top
			 * @param left
			 */
			isExist : function(top, left, moved){
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p]==this.movedPanel && !moved){
						continue;
					}
					if(!this.panels[p].isOnBoard){
						continue;
					}
					var pos = this.panels[p].unsavedPosition;
					if(pos.left<=left && pos.left+pos.width-1>=left &&
						pos.top<=top && pos.top+pos.height-1>=top){
						if(left==pos.left && top==pos.top){
							return true;
						}else{
							return false;
						}
					}
				}
				return true;
			},
			
			isFirstRow : function(top, left, moved){
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p]==this.movedPanel && !moved){
						continue;
					}
					var pos = this.panels[p].unsavedPosition;
					if(pos.left<=left && pos.left+pos.width-1>=left &&
						pos.top<=top && pos.top+pos.height-1>=top){
						
						if(top==pos.top){
							return true;
						}else{
							return false;
						}
					}
				}
				return false;
			},
			
			isInCurrentCell : function(top, left){
				try{
					var pos = this.currentCellPosition;
					if(pos.left<=left && pos.left+pos.width-1>=left &&
							pos.top<=top && pos.top+pos.height-1>=top){
							return true;
						}
					}catch(e){
						return false;
					}
					return false;
			},
			
			
			moveAllPanelToTop: function(droppedNot){//csak a kijelölésig kell elvinni az elemeket
				for(var p = 0; p < this.panels.length; p++){
					if(this.panels[p]==this.movedPanel){
						continue;
					}
						var pos = this.panels[p].unsavedPosition;
			
						var canMoveTop = true;
						var moveHeight = 0;
						while (canMoveTop && pos.top-(moveHeight+1)>=1){
							for(var i=0; i<pos.width; i++){
								if((!droppedNot && this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined)
								|| (droppedNot && (this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined || this.isInCurrentCell(pos.top-(moveHeight+1), pos.left+i)))){
									canMoveTop = false;
								}
								
							}
							if(canMoveTop){
								moveHeight++;
							}
						}
						if(moveHeight>0){		
							this.copyCellContent(pos.top, pos.left, pos.top-(moveHeight), pos.left);
							
							this.moveAllPanelToTop(droppedNot);
							return;
						}
				}
				if ( this.currentCellPosition!=null &&  this.currentCellPosition!=undefined){
					var pos = this.currentCellPosition;
					
					var canMoveTop = true;
					var moveHeight = 0;
					while (canMoveTop && pos.top-(moveHeight+1)>=1){
						for(var i=0; i<pos.width; i++){
							if((!droppedNot && this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined)
							|| (droppedNot && (this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined || this.isInCurrentCell(pos.top-(moveHeight+1), pos.left+i)))){
								canMoveTop = false;
							}
							
						}
						if(canMoveTop){
							moveHeight++;
						}
					}
					if(moveHeight>0){		
						this.copyCellContent(pos.top, pos.left, pos.top-(moveHeight), pos.left);
						
						this.moveAllPanelToTop(droppedNot);
						return;
					}
				}
			},
			
			/**
			 * abszolult poziciókat használunk!
			 * @param top
			 * @param left
			 * @param newTop
			 * @param newLeft
			 */
			copyCellContent: function(top, left, newTop, newLeft){
				/**
				 * Ezt a panelt akarjuk alrébb tenni
				 */
				var panel = undefined;
				var panelIndex = 0;
				for(var p=0; p< this.panels.length; p++){

					if(this.panels[p].unsavedPosition.left == left && this.panels[p].unsavedPosition.top == top){
						panel = this.panels[p];
						panelIndex = p;
						break;
					}
				}
				if(panel==undefined){
					console.debug("nincs találat("+top+","+left+")");
					return;
				}
		
				this.panels[panelIndex].unsavedPosition.top= newTop;
				this.panels[panelIndex].unsavedPosition.left= newLeft;
		
			},
			
			/**
			 * panel lefelé mozgatása
			 */
			copyDownCellContent: function(top2, left, plustop){
				
				/**
				 * Ezt a panelt akarjuk alrébb tenni
				 */
				var panelIndex = 0;
				var panel = undefined;
				for(var p=0; p< this.panels.length; p++){
				
					if((this.panels[p].unsavedPosition.left<= left && left <=this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1) 
							&& this.panels[p].unsavedPosition.top == top2 && this.panels[p]!=this.movedPanel){
						panel = this.panels[p];
						panelIndex = p;
						break;
					}
				}
				if(panel==undefined){
					while(panel==undefined && top2>1){
						top2--;
						plustop++;
						for(var p=0; p<this.panels.length; p++){
							
							if((this.panels[p].unsavedPosition.left<= left && left <=this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1) && this.panels[p].unsavedPosition.top == top2 && this.panels[p]!=this.movedPanel){
								panel = this.panels[p];
								panelIndex = p;
								break;
							}
						}
					}			
				}
				if(panel==undefined || panel==this.movedPanel){
					return;
				}
			
				/**
				 * Ellenőrzni kell hogy befér-e és ha nem akkor rekurzívan alrébb tesszük azt amelyik miatt nem fér be
				 * csak a közvetlenül felettünk lévőt elenőrizzük
				 */
				
				var panels = this.getBottomerPanels(panel.unsavedPosition.top, panel.unsavedPosition.left, panel.unsavedPosition.width);
				
				for(var p=0; p< panels.length; p++){
					this.copyDownCellContent(panels[p].unsavedPosition.top,panels[p].unsavedPosition.left,plustop);
				}				
				

				this.panels[panelIndex].unsavedPosition.top = top2+plustop;
				

			},
			
			hideAllcontent : function(){
				this.hidden = true;
				for(var p=0; p< this.panels.length; p++){
					this.panels[p].body.hide();
				}
			},
			showAllcontent : function(){
				this.hidden = false;
				for(var p=0; p< this.panels.length; p++){
					this.panels[p].body.show();
				}
			},
			
			
			getBottomerPanels: function(top, left, width){

				var panels2 = [];
				for(var p=0; p< this.panels.length; p++){

					var felt0 = this.panels[p].unsavedPosition.top >top;
					var felt1 = this.panels[p].unsavedPosition.left >=left && this.panels[p].unsavedPosition.left<=left+width-1;
					var felt2 = this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1 >=left && this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1<=left+width-1;
					var felt3 = this.panels[p].unsavedPosition.left <= left && this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1>=left+width-1;
					var felt4 = this.panels[p] == this.movedPanel;
					if(felt0 && (felt1 || felt2 || felt3) && !felt4){
						
						panels2.push(this.panels[p]);
					}
				}
				
				var firstindex = undefined;
				for(var p=0; p< panels2.length; p++){
					if(firstindex == undefined || panels2[p].unsavedPosition.top<firstindex){
						firstindex = panels2[p].unsavedPosition.top;
					}
				}
				var panels3 = [];
				for(var p=0; p< panels2.length; p++){
					if( panels2[p].unsavedPosition.top==firstindex){
						panels3.push(panels2[p]);
					}
				}
				
				return panels3;
			},
			/**
			 * frissíti az egész táblát, úgy hogy mindenhol legyen cella ahol kell
			 * Az üres tehát "" inner html-el rendelkező celláknál, ahol rowspan vagy colspan>1, ott rakja rendbe a dolgokat
			 */
			
			refreshBoard: function(draggedNot){
				
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
				var newElem = document.createElement('tbody');
				var cols = this.cols;
				var defaultHeight = this.defaultHeight;
				
				
				for ( var i = 0; i < this.rows; i++) {
					var children = [];
					for (var j in cols) {
						children.push({
							tag : 'td',
							id : 'td' + i + "" + j,
							cls : this.cellStyle,
							width : cols[j].width,
							style : {
								width : cols[j].width,
								height : defaultHeight							
							}
						});
					}

					Ext.DomHelper.append(newElem, {
						tag : 'tr',
						style : {
							height : defaultHeight
						},
						children : children
					});
				}
				
				var t = (new Date()).getTime();
				
				elem.parentNode.replaceChild(newElem, elem);
				
				for(var p=0; p<this.panels.length; p++){
					
					this.panels[p].isOnBoard = false;
				}
				
				for(var p=0; p<this.panels.length; p++){
					if(this.panels[p] != this.movedPanel && this.panels[p] != this.currentAutoMovedPanel && this.panels[p] != undefined)
					this.insertDiv(this.panels[p].unsavedPosition.width, this.panels[p].unsavedPosition.height, this.panels[p].unsavedPosition.top, this.panels[p].unsavedPosition.left, this.panels[p]);
					this.panels[p].isOnBoard = true;
					
				}
				if(this.currentCellPosition!=null && this.currentCellPosition != undefined){
					var pos = this.currentCellPosition;
					if(pos.left>this.cols.length){
						pos.left--;
					}
					elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ pos.top + ") > td:nth-child("+(pos.left+this.getPlusX(pos.top,pos.left))+")")[0];
					
					elem.colSpan = pos.width;
					elem.rowSpan = pos.height;
					var div = {
							tag:"div",
							cls: "dottedArea",
							style: {
								width : (this.getWidth((pos.left/*+this.getPlusX(pos.top,pos.left)*/),pos.width)-this.defaultPadding)+ "px",
								height : (parseInt(this.defaultHeight) * pos.height-this.defaultPadding)+ "px"
							}
						};
					Ext.DomHelper.append(elem, div);
					
					Ext.DomHelper.applyStyles(elem, {
						width : this.getWidth((pos.left/*+this.getPlusX(pos.top,pos.left)*/),pos.width)+ "px",
						height : (parseInt(this.defaultHeight) * pos.height)+ "px"
						
					});
				
					/**
					 * Törlés az első sorból
					 */
					for ( var k = 1; k < pos.width; k++) {
					
						var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ pos.top + ")")[0];
						if(elem)
						elem.deleteCell(pos.left+this.getPlusX(pos.top, pos.left));
						
					}
		
					/**
					 * Törlés a többi sorból
					 */
					for ( var k = 1; k < pos.height; k++) {
						var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (pos.top + k) + ")")[0];
						if(!elem){
							this.insertRowToEnd();
							 elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (pos.top + k) + ")")[0];
						}
						for ( var l = 0; l < pos.width; l++) {
							
							try{
								elem.deleteCell((pos.left+this.getPlusX(pos.top+k, pos.left))-1);
							}catch(ex){
							
							}
						}
					}
				}
				this.setHeight();
			},
			
			moveAllPanelToSavedPosition: function (){
		
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p].unsavedPosition != this.panels[p].savedPosition && this.panels[p]!=this.movedPanel){
						this.copyCellContent(this.panels[p].unsavedPosition.top, this.panels[p].unsavedPosition.left, this.panels[p].savedPosition.top, this.panels[p].savedPosition.left);
					}
				}
			},
			
			/**
			 * abszolult paraméterekre működik
			 * @param top
			 * @param left
			 * @param width
			 * @param height
			 * @returns {Boolean}
			 */
			
			hasContent: function(top, left, width, height){
				for(var i=0; i<height; i++){
					for(var j=0; j<width; j++){
						if(this.findPanel(top+i, left+j)!=undefined){
							return true;
						}
					}
				}
				return false;
			},
			hasSavedContent: function(top, left, width, height){
				for(var i=0; i<height; i++){
					for(var j=0; j<width; j++){
						if(this.findPanel(top+i, left+j, true)!=undefined){
							return true;
						}
					}
				}
				return false;
			},
			findPanelByPos: function(top,left){
			
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p].unsavedPosition.top == top && (this.panels[p].unsavedPosition.left <= left && this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1>=left)){
						return this.panels[p];
					}
				}
			},
			saveAllPanelPosition : function(){
				for(var p=0; p< this.panels.length; p++){
					this.panels[p].savedPosition = this.panels[p].unsavedPosition;
				}
			},
			
		
			deletePanel: function(id){
				
				for(var i=0; i<this.panels.length; i++){
					if(this.panels[i].controller.model.get('portletId') == id){
						Ext.Array.erase(this.panels, i, 1);
					}
				}

				this.moveAllPanelToTop();
				this.refreshBoard();
				
			},
			
			getPlusX: function(top, left){
				var t = (new Date()).getTime();
				var plusx = 0;

				for ( var i = 1; i < top; i++) {
					j2=1;
					for ( var j = 1; j < left; j++) {
						if(this.isExist(i, j)){
							var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ i + ") > td:nth-child(" + (j2) + ")")[0];
							if(elem){
							
								if (elem.rowSpan + i - 1 >= top && !this.isEmptyTD(elem) && (j+elem.colSpan-1+plusx<left)) {
									plusx = plusx - ((elem.colSpan==null)?1:elem.colSpan);
									j+= (elem.colSpan==null)?0:(elem.colSpan - 1);
									
								}else if(elem.colSpan>1){
									j += elem.colSpan-1;
								}
								j2++;

							}
						}
						
					}
				}
				j2 = 1;
				for ( var j = 1; j < left; j++) {
					var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" +(j2)+ ")")[0];
					if(elem){
						if (this.isExist(top, j)){
							if ( elem.colSpan > 1 && !this.isEmptyTD(elem) && (j+elem.colSpan-1+plusx<left)) {
								j+=(elem.colSpan - 1);
								plusx = plusx - (elem.colSpan - 1);
							}
							j2++;
						}	
					}
				}
				
				var currentPanel = this.findPanel(top, left);
				if(currentPanel!=null ){
					
					var td = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ currentPanel.unsavedPosition.top + ") > td:nth-child(" +(currentPanel.unsavedPosition.left)+ ")")[0];
					if(td!=undefined && td.innerHTML !=""){
						plusx-= (left - currentPanel.unsavedPosition.left);
					}
					
				}
				return plusx;
			},
			
			isEmptyTD : function(td) {
				
				if (td.innerHTML=="" || td.innerHTML.substring(0,100).match("dottedArea")=="dottedArea" ) {
					return true;
				} else {
					return false;
				}
			},
			
			constructor : function(config) {
				this.panels = [];
				this.dummyPanels = [];
				this.realPanels = [];
				this.initConfig(config);
				
				this.originalOptions = config;
				this.dragable = this.editable;
				this.resizable = this.editable;
				this.cellStyle = this.cellStyle+this.editable;
				this.defaultHeight = parseInt(config.row.height);
				var myDragAndDrop = this;
				this.panels = this.realPanels;
				
				var minwidth = 0;
				for(var i in this.cols){
					if(this.cols[i].type=="fix"){
						minwidth += parseInt(this.cols[i].width);
					}else{
						minwidth += parseInt(this.cols[i].minWidth);
					}
				}
				this.minWidth = minwidth;
				this.minHeight = 50;
				
				
				this.outerPanel = Ext.create('Ext.panel.Panel',{
					header:false,
					flex:1,
					layout: {
						type: 'fit'
						
					},
					autoScroll: true,
					border:false,	
					bodyBorder:false,	
					overflowY: 'auto', 
					overflowX: 'auto',
					listeners: {
						 afterrender: function (c) {
							 c.body.on("scroll", function(a,b,c){
								 this.handleScroll(b.scrollLeft, b.scrollTop);
							 }, this);
							
                         },
			             scope: this
			         }
	//				items: [panel3]
					
				});
				
				this.panel = Ext.create('Ext.panel.Panel', {
					id : 'mainPanel'+this.id,
					framed:false,
					header:false,
					border:false,	
					bodyBorder:false,	
					minWidth:this.minWidth,
					minHeight: this.minHeight,
					listeners : {
						afterrender : function(panel){
							this.initializeDropTarget(panel);
						},	
						resize : function(panel, width, height, oldWidth, oldHeight, eOpts){
						
							if(width!=oldWidth){
								
								myDragAndDrop.repairPercents(myDragAndDrop.originalOptions, width);
								myDragAndDrop.resizeTable(myDragAndDrop.cols);
							}
						},
						scope:this
					},
				
					layout : {
						type : 'table',
						cls: 'ddtable',
						columns : this.cols.length
					}
				});
				this.outerPanel.add(this.panel);
			},
			
			handleScroll: function(left, top){
				this.dashboard.handleDDPanelScroll(left, top);
			},
			
			initializeDropTarget: function(targetPanel) {
				
				this.initTable(targetPanel);

				targetPanel.dropTarget = Ext.create('Ext.dd.DropTarget','mainPanel'+this.id);
				targetPanel.dropTarget.hasOuterHandles = true;
				var me = this;					

				targetPanel.dropTarget.notifyEnter = function(source, evt, data) {
				
					if(me.out && !me.enddrag){	//kintről jön be és nem engedte el közben
						me.out = false;
					}
				/*	}else if(me.out && me.enddrag){//kintről jön be és elengedte közben
						console.log("kintről jön be és elengedte közben");
						me.out = false;
					}*/else{												//nem volt kint, most kezdi a húzást
						me.enddrag = false;
						me.notifyEnter(source, evt, data);
					}
					
					return this.callParent(Array.prototype.slice.call(arguments));
				};

				
				targetPanel.dropTarget.notifyOut = function(source, evt,data) {
					me.out = true;
				
				};

				targetPanel.dropTarget.notifyOver = function(source, evt, data) {
								
					var x = me.getLeftPos(evt.browserEvent.clientX + Ext.getBody().getScrollLeft() - me.panel.body.dom.offsetLeft);
					var y= parseInt(((evt.browserEvent.clientY + Ext.getBody().getScrollTop()) - (me.panel.body.dom.offsetTop+me.panel.el.dom.offsetTop)) / parseInt(me.defaultHeight) + 1);
					
					var w = me.getColspan(x, data.panel.width);
					var h = data.panel.unsavedPosition.height; 

					//autoscroll y
					if(evt.browserEvent.clientY<=20){
						me.outerPanel.scrollBy(0,-30);
					}
					
					if(evt.browserEvent.clientY>=Ext.getBody().getViewSize().height-20){
						me.outerPanel.scrollBy(0,+30);
					}
					
					//autoscroll x
					if(evt.browserEvent.clientX<=20){
						me.outerPanel.scrollBy(-30,0);
					}
					
					if(evt.browserEvent.clientX>=Ext.getBody().getViewSize().width-20){
						me.outerPanel.scrollBy(+30,0);
					}
					
					if (y != me.currentRow || x != me.currentCol) {

						me.currentRow = y;
						me.currentCol = x;
						me.drawDottedArea(x, y, w, h);
					}

					return me.callParent(Array.prototype.slice.call(arguments));
						
				};

			},
			
			notifyEnter : function(source, evt, data) {
				
				if(this.hideOnMove){
					this.fillDummyPanels();
					this.refreshBoard();
				}
				
				var x = data.panel.unsavedPosition.left; 
				var y = data.panel.unsavedPosition.top;
				var w = data.panel.unsavedPosition.width;
				var h = data.panel.unsavedPosition.height; 
		
				this.currentRow = y;
				this.currentCol = x;

				var correctMovePanel = false;
				
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p].unsavedPosition.top == y && (this.panels[p].unsavedPosition.left <= x && this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1>=x)){
						this.movedPanelIndex = p;
						this.movedPanel = this.panels[p];
						correctMovePanel = true;
					}
				}
				
				
				this.drawDottedArea(x, y, w, h);
				
				},
				
			initTable: function (targetPanel){
				
				this.repairPercents(this.originalOptions);
				
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
				
				var cols = this.cols;
				var defaultHeight = this.defaultHeight;
				this.rows = 1;
				for ( var i = 0; i < 2; i++) {
			//		cells[i] = [];
					var children = [];
					for (var j in cols) {
						children.push({
							tag : 'td',
							id : 'td' + i + "" + j,
							cls : this.cellStyle,
							width : cols[j].width,
							style : {
								width : cols[j].width,
								height : defaultHeight
								
							}
						});
			//			cells[j] = {top:i, left:j};
					}

					Ext.DomHelper.append(elem, {
						tag : 'tr',
						style : {
							height : defaultHeight
						},
						children : children
					});
					
				}
			},
			
			setHeight: function(){
				this.minHeight = this.rows*this.defaultHeight;
				this.panel.minHeight = this.minHeight;
				this.panel.setHeight(this.minHeight);
				
			},
			
			drawTable: function(){
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
				
				var cols = this.cols;
				var defaultHeight = this.defaultHeight;
				this.rows = 1;
				for ( var i = 0; i < 1; i++) {
					var children = [];
					for (var j in cols) {
						children.push({
							tag : 'td',
							id : 'td' + i + "" + j,
							cls : this.cellStyle,
							width : cols[j].width,
							style : {
								width : cols[j].width,
								height : defaultHeight
								
							}
						});
					}

					Ext.DomHelper.append(elem, {
						tag : 'tr',
						style : {
							height : defaultHeight
						},
						children : children
					});
				}
				this.setHeight();
			},
			repairPercents: function(options, width){
				var pixels = 0;
				var config = {
						cols:[]
				};
				for(var i in options.cols){
					config.cols[i]= {};
					config.cols[i].type = options.cols[i].type;
					config.cols[i].width = options.cols[i].width;
					config.cols[i].minWidth = options.cols[i].minWidth;
				}
				
				for(var i in config.cols){
					if(config.cols[i].type=="fix"){
						pixels += parseInt(config.cols[i].width);
					}
				}
				
				var fullScreen = width;
				fullScreen -= pixels;
				
				for(var i in config.cols){
					if(config.cols[i].type=="flex"){
						config.cols[i].width = parseInt(config.cols[i].width)*fullScreen/100+"px";
						if(parseInt(config.cols[i].width)<parseInt(options.cols[i].minWidth)){
							config.cols[i].width = options.cols[i].minWidth;
						}
					}
				}
				
				this.cols = config.cols;
				
			},
			
			resizeTable: function(cols){
				var me = this;
					for ( var i = 1; i <= this.rows; i++) {
						for ( var j = 1; j <= this.cols.length; j++) {
							try{
								if(this.isExist(i, j)){
									var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ i + ") > td:nth-child(" + (j + this.getPlusX(i,j)) + ")")[0];
									Ext.DomHelper.applyStyles(elem, {
										width : me.getWidth((j), elem.colSpan) + "px",
										height : this.defaultHeight + "px"
									});
								}
							}catch(ex){
								break;
							}
						}
					}
					
					for(var p =0; p<this.panels.length; p++){
						this.panels[p].setWidth(parseInt(this.getWidth(this.panels[p].unsavedPosition.left, this.panels[p].unsavedPosition.width)-this.defaultPadding));
					}
					this.setHeight();
			},
			
			fillDummyPanels: function(){
				this.dummyPanels=[];
				for(var p =0; p<this.realPanels.length; p++){
					if(p!=this.movedPanel){
						this.dummyPanels.push(this.realPanels[p].cloneConfig({
							html : "",
							realPanelId : p,
							items:[],
							cls: "dummyPanel",
							savedPosition: this.realPanels[p].savedPosition,
							unsavedPosition: this.realPanels[p].unsavedPosition,
							title: this.realPanels[p].title,
							width:  this.realPanels[p].width,
							height:  this.realPanels[p].height
						}));
					}
				}
				
				this.panels = this.dummyPanels;
			},
			
			refreshRealPanelsByDummy: function(){
				for(var p =0; p<this.dummyPanels.length; p++){
					this.realPanels[this.dummyPanels[p].realPanelId].savedPosition = this.dummyPanels[p].savedPosition;
					this.realPanels[this.dummyPanels[p].realPanelId].unsavedPosition = this.dummyPanels[p].unsavedPosition;
				}
				this.panels = this.realPanels;
			},
			
			removeUnusedRows: function(){
				var table = Ext.query("div#mainPanel"+this.id+" table:nth(1)")[0];
				j=this.getMaxRow();
				var deletedNumber = 0;
				for(var i=this.getMaxRow(); i<this.rows; i++){
					
					table.deleteRow(j);
					this.panel.setHeight(this.panel.getHeight()-this.defaultHeight);
					deletedNumber++;
				}
				this.rows -= deletedNumber;
				this.setHeight();
			},
			
			getMaxRow: function(){
				var max = 1;
				for(var p=0; p< this.panels.length; p++){
					if(this.panels[p].savedPosition.top+this.panels[p].savedPosition.height>max){
						max = this.panels[p].savedPosition.top+this.panels[p].savedPosition.height;
					}
				}
				return max;
			},
			deleteColumn: function(index, force){
				/**
				 * végigmegyünk az oszlopon, megkeressük minden poziciójára hogy ki van benne (findPanel)
				 * a megtalált panelokat 3 esetre bontjuk:
				 * 1) belóg de nem itt kezdődik: a panel méretét csökkentjük az oszlop szélességével, vagyis az eddigi colspan-t eggyel csökkentjük
				 * 2) itt kezdődik és továbblóg valahova: a panel méretét csökkentjük, áthelyezzük a jobb oldali oszlopba, amit eddig si elfoglalt
				 * 3) a panel itt kezdődik és nem is lóg ki innen
				 */
				
				for(var i = 0; i<this.rows; i++){
					var p = this.findPanel(i, index, false);
					if(p!=undefined && p!=null){
						//belóg, de nem itt kezdődik
						if(p.unsavedPosition.left<index){
							p.unsavedPosition.width --; 
						}
						if(p.unsavedPosition.left==index && p.unsavedPosition.width>=2){
							p.unsavedPosition.width --; 
							p.unsavedPosition.left ++; 
						}
						if(p.unsavedPosition.left==index && p.unsavedPosition.width==1){
							if(force){
							//	p.destroy();
								for(var p2 in this.panels){
									if(this.panels[p2].savedPosition.top == p.savedPosition.top && (this.panels[p2].savedPosition.left <= p.savedPosition.left && this.panels[p2].savedPosition.left+this.panels[p2].savedPosition.width-1>=p.savedPosition.left)){
										Ext.Array.erase(this.panels,p2, 1);
									}
								}
							}else{
								for(var i in this.panels){
									this.panels[i].unsavedPosition = this.panels[i].savedPosition;
								}
								return lang.dashboardedit.hasContent;
							}
							
						}
					}
				}
				
				for(var i in this.panels){
					if(this.panels[i].unsavedPosition.left>index){
						this.panels[i].unsavedPosition.left--;
					}
					this.panels[i].savedPosition = this.panels[i].unsavedPosition;
					this.removeUnusedRows();
				}
			},
			
			insertColumn : function(index){
				for(var i in this.panels){
					if(this.panels[i].savedPosition.left>=index){
						this.panels[i].savedPosition.left++;
					}
					this.panels[i].unsavedPosition = this.panels[i].savedPosition;
					
				}
			}
		});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.DragAndDropPanel2',{
	extend: "Ext.panel.Panel",
	config:{
		out:false,
		defaultWidth : 100,
		defaultHeight : 100,
		defaultPadding : 10,
		cols : 5,
		id: 0,
		editable: false,
		rows : 5,
		panels:undefined,
		
		dragable: true,
		resizablePanels: true,
		hideOnMove: true,
		cellStyle: "backendTableTd",
		tableModel: undefined,
		dashboard: undefined	
	},		
	
	constructor: function(config){
		config.resizablePanels = config.editable;
		config.resizable = false;
		this.initConfig(config);
		
		this.dragable = this.editable;
		
		this.tableModel = [];
		this.panels = [];
		this.dummyPanels = [];
		this.realPanels = [];
		this.panels = this.realPanels;
		this.cellStyle = this.cellStyle+this.editable;
		this.defaultHeight = parseInt(config.row.height);
		
		var minwidth = 0;
		for(var i in this.cols){
			if(this.cols[i].type=="fix"){
				minwidth += parseInt(this.cols[i].width);
			}else{
				minwidth += parseInt(this.cols[i].minWidth);
			}
		}
		this.panelMinWidth = minwidth;
		this.minHeight = 50;
		this.flex = 1;
		this.layout = {
				type:"fit"
		};

		this.cls="DDPanel2",
		this.border = false,	
		this.bodyBorder = false,	

		this.callParent([this]);

		this.autoScroll = true;	
		this.overflowY = 'scroll'; 
		this.overflowX = 'scroll';
		
		this.originalOptions = config;
		
		this.panel = Ext.create('Ext.panel.Panel', {
			id : 'mainPanel'+this.id,
			framed:false,
			header:false,
			border:false,	
			bodyBorder:false,	
			minWidth:this.panelMinWidth,
			minHeight: this.minHeight,
			flex:1,
			listeners : {
				afterrender : function(panel){
					this.initTable();
					this.initializeDropTarget(panel);
				},	
				resize : function(panel, width, height, oldWidth, oldHeight, eOpts){
				
					if(width!=oldWidth){
						
						this.repairPercents(this.originalOptions, width);
						this.resizeTable();
					}
				},
				scope:this
			},
		
			layout : {
				type : 'table',
				cls: 'ddtable',
				columns : this.cols.length
			}
		});
		this.add(this.panel);
		
	},
	isExist : function(top, left, moved){
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p]==this.movedPanel && !moved){
				continue;
			}
			if(!this.panels[p].isOnBoard || this.panels[p].hidden){
				continue;
			}
			var pos = this.panels[p].unsavedPosition;
			if(pos.left<=left && pos.left+pos.width-1>=left &&
				pos.top<=top && pos.top+pos.height-1>=top){
				if(left==pos.left && top==pos.top){
					return true;
				}else{
					return false;
				}
			}
		}
		return false;
	},
	drawDottedArea : function(left, top, width, height, test) {
		var t1 = (new Date()).getTime();
		if(left+width-1>this.cols){
			left = this.cols-width+1;
		}
		if(top+height>this.rows){
			this.addRows(1);
		}
		
		var originalLeft = left;
		
		this.moveAllPanelToTop(false);


		var plusx = this.getPlusX(top, left);
		left = left + plusx;


		var elem;
		if(!this.isExist(top, originalLeft, false) && !this.hasContent(top, originalLeft, width, height)){
			
			/**
			 * Teljesen elfér ide az elemünk, próbáljuk meg minél feljebb tolni
			 */
			var exist = this.isExist(top, originalLeft);
			var hasContent = this.hasContent(top, originalLeft, width, height);
			
			
			
			while(top>=1 && !exist && !hasContent){
			
				top--;
				exist = this.isExist(top, originalLeft);
				hasContent = this.hasContent(top, originalLeft, width, height);
			}

			top++;
			left = originalLeft+this.getPlusX(top, originalLeft);
			elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" + left + ")")[0];
			
			this.currentCellPosition = {top:top, left:originalLeft, width:width, height:height};
			
			
			
			this.movedPanel.unsavedPosition = this.currentCellPosition;
		}else{
			
			/**
			 * nem fér el teljesen, vagy nemis létezik a hely ahova be akarunk szúrni
			 */
			for(var j=0; j<height; j++){
				for(var i=0; i<width; i++){
					
					var exist = this.isExist(top+j, originalLeft+i);
					var empty = false;
					
					if(!exist){
						empty =  this.findPanel(top+j, originalLeft+i) == null;
					}
					
					if(exist || !empty){
						this.copyDownCellContent((top+j), originalLeft+i, height-j);
					
					}					
				}
			}
		
			
		
			while(top-1>=1 && !this.isExist(top-1, originalLeft) && !this.hasContent(top-1, originalLeft, width, height)){
				
				top--;
			}

			left = originalLeft+this.getPlusX(top, originalLeft);
		
			elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ top + ") > td:nth-child(" + left + ")")[0];
			this.currentCellPosition = {top:top, left:originalLeft, width:width, height:height};
			
			
			this.movedPanel.unsavedPosition = this.currentCellPosition;
			this.moveAllPanelToTop(true);
		}
		
		this.refreshBoard();
	},
	
	getLeftPos: function(left){
		var aktSum=0;
		var index = 0;
		while(left>aktSum && index < this.cols.length){
			aktSum += parseInt(this.cols[index].width);
			if(aktSum<left){
				index++;
			}
		}
		return ++index;
	},
	getColspan: function(col, width){
		
		width += this.defaultPadding;
		var availableWidth = 0;
		var index = col-1;
		colspan = 0;
		while (availableWidth<width && index < this.cols.length){
			if(width-availableWidth >= availableWidth + parseInt(this.cols[index].width) -width){
				availableWidth += parseInt(this.cols[index].width);
				index++;
				colspan++;
			}else break;
		}
		if(colspan<=0){
			colspan=1;
		}
		return colspan;
	},
	initializeDropTarget: function(targetPanel) {
		var me = this;
		var dropTarget = Ext.create('Ext.dd.DropTarget',targetPanel.body,{
			notifyEnter : function(source, evt, data) {
				if(me.out && !me.enddrag){	//kintről jön be és nem engedte el közben
					me.out = false;
				}else{						//nem volt kint, most kezdi a húzást
					me.enddrag = false;
					me.movedPanel = data.panel;
					
					if(me.hideOnMove){
						me.fillDummyPanels();
						me.refreshBoard();
					}
					
					var x = data.panel.unsavedPosition.left; 
					var y = data.panel.unsavedPosition.top;
					var w = data.panel.unsavedPosition.width;
					var h = data.panel.unsavedPosition.height; 

					me.currentRow = y;
					me.currentCol = x;
					
					me.drawDottedArea(x, y, w, h);
				}
				return this.callParent(Array.prototype.slice.call(arguments));
			},
			notifyOut : function(source, evt,data) {
				me.out = true;
			},
			notifyOver : function(source, evt, data) {
							
				var x = me.getLeftPos(evt.browserEvent.clientX + Ext.getBody().getScrollLeft() - me.panel.body.dom.offsetLeft);
				var y= parseInt(((evt.browserEvent.clientY + Ext.getBody().getScrollTop()) - (me.panel.body.dom.offsetTop+me.panel.el.dom.offsetTop)) / parseInt(me.defaultHeight) + 1);
				
				var w = me.getColspan(x, data.panel.width);
				var h = data.panel.unsavedPosition.height; 
	
				//autoscroll y
				if(evt.browserEvent.clientY<=20){
					me.scrollBy(0,-30);
				}
				
				if(evt.browserEvent.clientY>=Ext.getBody().getViewSize().height-20){
					me.scrollBy(0,+30);
				}
				
				//autoscroll x
				if(evt.browserEvent.clientX<=20){
					me.scrollBy(-30,0);
				}
				
				if(evt.browserEvent.clientX>=Ext.getBody().getViewSize().width-20){
					me.scrollBy(+30,0);
				}
				
				if (y != me.currentRow || x != me.currentCol) {
	
					me.currentRow = y;
					me.currentCol = x;
					me.drawDottedArea(x, y, w, h);
				}
	
				return me.callParent(Array.prototype.slice.call(arguments));
					
			},
			notifyDrop: function(source, e, data){
				
            	if(me.hideOnMove){
					me.refreshRealPanelsByDummy();
				}
				
				
				var pos = me.currentCellPosition;
				
				
				me.movedPanel.savedPosition = pos;
				me.movedPanel.unsavedPosition = pos;
				
				var savedMovedPanel = me.movedPanel;
				
				me.currentCellPosition = undefined;
				me.movedPanel = undefined;	
				me.saveAllPanelPosition();

				me.removeUnusedRows();
				me.refreshBoard();

				
				savedMovedPanel.getPositionEl().dom.style.top = '';
				savedMovedPanel.getPositionEl().dom.style.left = '';
				savedMovedPanel = undefined;
				
				me.enddrag = true;
				me.minHeight = me.rows*me.defaultHeight;
				me.panel.minHeight = me.minHeight;
				me.panel.height = me.minHeight;	
				
				return me.callParent(Array.prototype.slice.call(arguments));
			}
		
	/*	
		onDrag: function(evt){
					var data = Ext.getCmp(this.id);
					me.movedPanel.ghostPanel.setWidth(me.movedPanel.width);
					me.movedPanel.ghostPanel.setHeight(me.movedPanel.height);
					me.movedPanel.ghostPanel.setPosition(evt.getPageX(), evt.getPageY());
					var x = me.getLeftPos(evt.browserEvent.clientX + Ext.getBody().getScrollLeft() - me.panel.body.dom.offsetLeft);
					var y= parseInt(((evt.browserEvent.clientY + Ext.getBody().getScrollTop()) - (me.panel.body.dom.offsetTop+me.panel.el.dom.offsetTop)) / parseInt(me.defaultHeight) + 1);
					
					
					var w = me.getColspan(x, data.width);
					var h = data.unsavedPosition.height; 

					//autoscroll y
					if(evt.browserEvent.clientY<=20){
						me.scrollBy(0,-30);
					}
					
					if(evt.browserEvent.clientY>=Ext.getBody().getViewSize().height-20){
						me.scrollBy(0,+30);
					}
					
					//autoscroll x
					if(evt.browserEvent.clientX<=20){
						me.scrollBy(-30,0);
					}
					
					if(evt.browserEvent.clientX>=Ext.getBody().getViewSize().width-20){
						me.scrollBy(+30,0);
					}
					
					if (y != me.currentRow || x != me.currentCol) {

						me.currentRow = y;
						me.currentCol = x;
						me.drawDottedArea(x, y, w, h);
					}
				},
		*/
		});
	},
	
	notifyEnter : function(source, evt, data) {
		
		if(this.hideOnMove){
			this.fillDummyPanels();
			this.refreshBoard();
		}
		
		var x = data.panel.unsavedPosition.left; 
		var y = data.panel.unsavedPosition.top;
		var w = data.panel.unsavedPosition.width;
		var h = data.panel.unsavedPosition.height; 

		this.currentRow = y;
		this.currentCol = x;

		var correctMovePanel = false;
		
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			if(this.panels[p].unsavedPosition.top == y && (this.panels[p].unsavedPosition.left <= x && this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1>=x)){
				this.movedPanelIndex = p;
				this.movedPanel = this.panels[p];
				correctMovePanel = true;
			}
		}
		
		
		this.drawDottedArea(x, y, w, h);
		
		},
	
	addRows: function(rowsNumber, tableDomElement){
		if(!tableDomElement){
			tableDomElement = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
		}
		var cols = this.cols;
		var defaultHeight = this.defaultHeight;
		for ( var i = 0; i < rowsNumber; i++) {
			var children = [];
			
			for (var j in cols) {
				var td = {
						tag : 'td',
						id : 'td' + i + "" + j,
						cls : this.cellStyle,
						style : {
							width : cols[j].width,
							height : defaultHeight
							
						}
					};
				children.push(td);
			}			
			Ext.DomHelper.append(tableDomElement, {
				tag : 'tr',
				style : {
					height : defaultHeight
				},
				children : children
			});
			var modelRow = [];
			for(var j=0; j<children.length; j++){
				modelRow[j] = {
						empty:true,
						exist: true,
						colSpan:1,
						rowspan:1,
						domElement:Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child(" + (i+1)+ ") > td:nth-child(" + (j+1) + ")")[0]
				};
			}
			this.tableModel.push(modelRow);
		}
		this.rows = this.tableModel.length;
	},
	
	initTable: function (){
		
		this.repairPercents(this.originalOptions);		
		this.rows = 1;
		this.tableModel = [];
		this.addRows(1);

	},
	
	repairPercents: function(options){
		var pixels = 0;
		var config = {
				cols:[]
		};
		for(var i in options.cols){
			config.cols[i]= {};
			config.cols[i].type = options.cols[i].type;
			config.cols[i].width = options.cols[i].width;
			config.cols[i].minWidth = options.cols[i].minWidth;
		}
		
		for(var i in config.cols){
			if(config.cols[i].type=="fix"){
				pixels += parseInt(config.cols[i].width);
			}
		}
		
		var fullScreen = this.panel.getWidth();
		fullScreen -= pixels;
		
		for(var i in config.cols){
			if(config.cols[i].type=="flex"){
				config.cols[i].width = parseInt(config.cols[i].width)*fullScreen/100+"px";
				if(parseInt(config.cols[i].width)<parseInt(options.cols[i].minWidth)){
					config.cols[i].width = options.cols[i].minWidth;
				}
			}
		}
		
		this.cols = config.cols;
		
	},
	
	resizeTable: function(cols){
		var me = this;
			for ( var i = 0; i < this.rows; i++) {
				for ( var j = 0; j < this.cols.length; j++) {
					try{
						if(this.tableModel[i][j] && this.tableModel[i][j].exist){
							var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child(" + (i+1) + ") > td:nth-child(" + ((j+1) + this.getPlusX(i+1,j+1)) + ")")[0];
							Ext.DomHelper.applyStyles(elem, {
								width : me.getWidth((j+1), this.tableModel[i][j].colSpan) + "px",
								height : this.defaultHeight + "px"
							});
						}
					}catch(ex){
						break;
					}
				}
			}
			
			for(var p=0; p<this.panels.length; p++){
				if(this.panels[p].hidden){
					continue;
				}
				this.panels[p].setWidth(parseInt(this.getWidth(this.panels[p].unsavedPosition.left, this.panels[p].unsavedPosition.width)-this.defaultPadding));
			}
			this.setHeight();
	},
	
	getWidth: function(left,width){
		newWidth = 0;
		for(var i=left-1; i<left-1+width; i++){
			newWidth += parseInt(this.cols[i].width);
		}
		return newWidth;
	},
	addPanel: function(panel){
		
		var width = parseInt(panel.width);
		var height = parseInt(panel.height);
		
		mod = height%this.defaultHeight;
		if(mod>(this.defaultHeight/2)){
			height = ((parseInt(height/this.defaultHeight)+1)*this.defaultHeight)-this.defaultPadding;
		}else{
			height = (parseInt(height/this.defaultHeight)*this.defaultHeight)-this.defaultPadding;
		}
		if(height<this.defaultHeight){
			height = this.defaultHeight - this.defaultPadding;
		}
		panel.height = height;
		
		
		var h = parseInt((parseInt(height) + this.defaultPadding) / this.defaultHeight);
		
		var colnumber;
		var rownumber;
		if(!this.isExist(this.rows, 1) && (this.tableModel[this.rows]!=undefined && this.tableModel[this.rows][0].empty)){
			rownumber = this.rows;
			colnumber = 1;
		}else{
		
			this.addRows(1);
			rownumber = this.rows;
			colnumber = 1;
		}

		panel.savedPosition = {
			top: rownumber,
			left: colnumber,
			width: this.getColspan(colnumber, width),
			height: h
		};
		
		panel.unsavedPosition = {
			top: rownumber,
			left: colnumber,
			width: this.getColspan(colnumber, width),
			height: h
		};

		var me = this;
		var resizable;
		panel.resizerFn = function(panel, width, height){
			var mod = height%parseInt(me.defaultHeight);
			if(mod>(parseInt(me.defaultHeight)/2)){
				panel.height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
				height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
			}else{
				panel.height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
				height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
			}
			if(panel.height<parseInt(me.defaultHeight)){
				panel.height = parseInt(me.defaultHeight) - me.defaultPadding;
				height = parseInt(me.defaultHeight) - me.defaultPadding;
			}
			
			var actpanel = panel;
		
			
			
			var w = me.getColspan(actpanel.unsavedPosition.left, width);
			var h = parseInt((parseInt(height) + me.defaultPadding) / parseInt(me.defaultHeight));
			me.resizePanel(actpanel.unsavedPosition, {top:actpanel.unsavedPosition.top, left:actpanel.unsavedPosition.left, width:w, height:h}, actpanel);

			me.setHeight();
			
		};
		
		if(this.resizablePanels){
			resizable = {
				     transparent:true,
				     dynamic : false,
				    
				     listeners: {
				    	
						resize: function( resizer, width, height, e, eOpts ){
							
							var panel = resizer.target;								
							panel.resizerFn(resizer.target, width, height);							
							e.stopEvent();
							
						}
						
				     }
				};
		}
		else{
			resizable = false;
		}
		var cls = (panel.cls && panel.cls.match(" centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
		
		panel.cls = cls;
		panel.resizable = resizable;
		panel.resizeHandles = 's e se';
		panel.draggable=true;
		
		this.addPortletDragHandler(panel);
		this.realPanels.push(panel);			
		
		this.moveAllPanelToTop(true);
		this.saveAllPanelPosition();
		this.removeUnusedRows();
		this.refreshBoard();
		
	},
	
	initDashboard: function(portlets){
		for(var i in portlets){
			var panel = portlets[i].getView();
				var me = this;
				var resizable;
				
				panel.resizerFn = function(panel, width, height){
					var mod = height%parseInt(me.defaultHeight);
					if(mod>(parseInt(me.defaultHeight)/2)){
						panel.height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
						height = ((parseInt(height/parseInt(me.defaultHeight))+1)*parseInt(me.defaultHeight))-me.defaultPadding;
					}else{
						panel.height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
						height = (parseInt(height/parseInt(me.defaultHeight))*parseInt(me.defaultHeight))-me.defaultPadding;
					}
					if(panel.height<parseInt(me.defaultHeight)){
						panel.height = parseInt(me.defaultHeight) - me.defaultPadding;
						height = parseInt(me.defaultHeight) - me.defaultPadding;
					}
					
					var actpanel = panel;
				
					var w = me.getColspan(actpanel.unsavedPosition.left, width);
					var h = parseInt((parseInt(height) + me.defaultPadding) / parseInt(me.defaultHeight));
					me.resizePanel(actpanel.unsavedPosition, {top:actpanel.unsavedPosition.top, left:actpanel.unsavedPosition.left, width:w, height:h}, actpanel);

					me.setHeight();
					
				};
				
				if(this.resizablePanels){
					resizable = {
						     transparent:true,
						     dynamic : false,
						    
						     listeners: {
						    	
								resize: function( resizer, width, height, e, eOpts ){
									
									var panel = resizer.target;								
									panel.resizerFn(resizer.target, width, height);
									e.stopEvent();
									
								}
								
						     }
						};
				}
				else{
					resizable = false;
				}
				var cls = (panel.cls && panel.cls.match(" centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
				panel.cls = cls;
				panel.resizable = resizable;
				panel.resizeHandles = 's e se';
				this.addPortletDragHandler(panel);
				this.realPanels.push(panel);	
//			}
					
		}
		if(this.rendered){
			this.moveAllPanelToTop(true);
			this.saveAllPanelPosition();
			this.removeUnusedRows();
			this.refreshBoard();
		}else{
			this.addListener('afterrender', function(){
				this.moveAllPanelToTop(true);
				this.saveAllPanelPosition();
				this.removeUnusedRows();
				this.refreshBoard();
			}, this);
		}
		
	},
	addPortletDragHandler: function(panel){
		var me = this;
		if(me.dragable){
			panel.draggable=true;
		}
	},
	
	moveAllPanelToTop: function(droppedNot){//csak a kijelölésig kell elvinni az elemeket
		for(var p = 0; p < this.panels.length; p++){
			
			if(this.panels[p].hidden){
				continue;
			}
			if(this.panels[p]==this.movedPanel){
				continue;
			}
			var pos = this.panels[p].unsavedPosition;

			var canMoveTop = true;
			var moveHeight = 0;
			while (canMoveTop && pos.top-(moveHeight+1)>=1){
				for(var i=0; i<pos.width; i++){
					if((!droppedNot && this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined)
					|| (droppedNot && (this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined || this.isInCurrentCell(pos.top-(moveHeight+1), pos.left+i)))){
						canMoveTop = false;
					}
					
				}
				if(canMoveTop){
					moveHeight++;
				}
			}
			if(moveHeight>0){		
				this.copyCellContent(pos.top, pos.left, pos.top-(moveHeight), pos.left);
				
				this.moveAllPanelToTop(droppedNot);
				return;
			}
		}
		if ( this.currentCellPosition!=null &&  this.currentCellPosition!=undefined){
			var pos = this.currentCellPosition;
			
			var canMoveTop = true;
			var moveHeight = 0;
			while (canMoveTop && (pos.top-(moveHeight+1))>=1){
				for(var i=0; i<pos.width; i++){
					if((!droppedNot && this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined)
					|| (droppedNot && (this.findPanel(pos.top-(moveHeight+1), pos.left+i)!=undefined || this.isInCurrentCell(pos.top-(moveHeight+1), pos.left+i)))){
						canMoveTop = false;
					}
					
				}
				if(canMoveTop){
					moveHeight++;
				}
			}
			if(moveHeight>0){		
	//			this.copyCellContent(pos.top, pos.left, pos.top-(moveHeight), pos.left);
				
	//			this.moveAllPanelToTop(droppedNot);
				return;
			}
		}
	},
	
	refreshBoard: function(draggedNot){
		var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody")[0];
		var newElem = document.createElement('tbody');
		this.tableModel = [];
		elem.parentNode.replaceChild(newElem, elem);
		this.addRows(this.rows, newElem);
		
		
		newElem.parentNode.style.height = this.rows*this.defaultHeight+"px";
		for(var p=0; p<this.panels.length; p++){
			
			this.panels[p].isOnBoard = false;
		}
		
		for(var p=0; p<this.panels.length; p++){
			if(this.panels[p] != this.movedPanel && this.panels[p] != this.currentAutoMovedPanel && this.panels[p] != undefined){
				this.insertDiv(this.panels[p].unsavedPosition.width, this.panels[p].unsavedPosition.height, this.panels[p].unsavedPosition.top, this.panels[p].unsavedPosition.left, this.panels[p]);
			}
			this.panels[p].isOnBoard = true;
			
		}
		if(this.currentCellPosition!=null && this.currentCellPosition != undefined){

			var pos = this.currentCellPosition;
			if(pos.left>this.cols.length){
				pos.left--;
			}
			elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ pos.top + ") > td:nth-child("+(pos.left+this.getPlusX(pos.top,pos.left))+")")[0];
			
			elem.colSpan = pos.width;
			elem.rowSpan = pos.height;
			var div = {
					tag:"div",
					cls: "dottedArea",
					style: {
						width : (this.getWidth((pos.left/*+this.getPlusX(pos.top,pos.left)*/),pos.width)-this.defaultPadding)+ "px",
						height : (parseInt(this.defaultHeight) * pos.height-this.defaultPadding)+ "px"
					}
				};
			Ext.DomHelper.append(elem, div);
			
			Ext.DomHelper.applyStyles(elem, {
				width : this.getWidth((pos.left/*+this.getPlusX(pos.top,pos.left)*/),pos.width)+ "px",
				height : (parseInt(this.defaultHeight) * pos.height)+ "px"
				
			});
		
			/**
			 * Törlés az első sorból
			 */
			for ( var k = 1; k < pos.width; k++) {
			
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ pos.top + ")")[0];
				if(elem)
				elem.deleteCell(pos.left+this.getPlusX(pos.top, pos.left));
				
			}

			/**
			 * Törlés a többi sorból
			 */
			for ( var k = 1; k < pos.height; k++) {
				var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (pos.top + k) + ")")[0];
				if(!elem){
					this.addRows(1);
					this.rows++;
					 elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (pos.top + k) + ")")[0];
				}
				for ( var l = 0; l < pos.width; l++) {
					
					try{
						elem.deleteCell((pos.left+this.getPlusX(pos.top+k, pos.left))-1);
					}catch(ex){
					
					}
				}
			}
		}
		
		newElem.parentNode.style.height = this.rows*this.defaultHeight+"px";
		this.panel.minHeight = this.rows*this.defaultHeight;
		this.panel.setHeight(this.rows*this.defaultHeight);
		this.resizeTable();

	},
	
	insertDiv : function(col, row, rownumber, colnumber, panel) {
		if(panel.hidden){
			return;
		}
		if(row+rownumber-1>this.rows){
			this.addRows((row+rownumber-1)-this.rows);
			this.rows = row+rownumber-1;
		}
		
		if(rownumber<=0 || colnumber<=0 || row<=0 || col<=0){
			alert("Div insert position error!");
			return;
		}
		
		var plusx = this.getPlusX(rownumber, colnumber);
		
		panel.width = (this.getWidth(colnumber, col)-this.defaultPadding);
		/**
		 * Törlés az első sorból
		 */
		var actrow = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ")")[0];
		
		while(actrow==null || actrow==undefined){
			 this.addRows(1);
			 actrow = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ")")[0];
		}
		
		for ( var k = 1; k < col; k++) {
			
			try{
				this.tableModel[rownumber-1][colnumber+k-1].exist=false;
				actrow.deleteCell(colnumber+plusx);
			}catch(ex){
			}
		}

		/**
		 * törlés a többi sorból
		 */
		for ( var k = 1; k < row; k++) {
			var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (rownumber + k) + ")")[0];
			if(elem==null || elem==undefined){
				this.addRows(1);
				 elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ (rownumber + k) + ")")[0];
			}
			for ( var l = 0; l < col; l++) {
				try{
					this.tableModel[rownumber+k-1][colnumber+l-1].exist=false;
					elem.deleteCell((colnumber+this.getPlusX(rownumber+k, colnumber))-1);
				}catch(ex){
				}
			}
		}

		var elem = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ rownumber + ") > td:nth-child(" + (colnumber+plusx) + ")")[0];
		elem.innerHTML = "";
		elem.colSpan = col;
		elem.rowSpan = row;
		this.tableModel[rownumber-1][colnumber-1].colSpan = col;
		this.tableModel[rownumber-1][colnumber-1].rowSpan = row;
		
		
		if(row+rownumber-1==this.rows){
			this.addRows(1);
		}
		
		var pos = {top:rownumber, left:colnumber, width:col, height:row};
		
		panel.unsavedPosition = pos;

		var me = this;
		var cls = (panel.cls && panel.cls.match("centerDDDiv"))?panel.cls:(panel.cls+ " centerDDDiv");
		panel.resizeHandles = 's e se';
		panel.setWidth(me.getWidth(colnumber, col)-me.defaultPadding);
	    panel.setHeight(row*me.defaultHeight-me.defaultPadding);
	    panel.cls = cls;
		
		if(panel.rendered){
			panel.getEl().appendTo(elem);
			panel.hide();
			panel.show();
		}else{
			panel.render(elem);
			
		}

	},
	
	getPlusX: function(top, left){
		var plusx = 0;
		
			for ( var j = 1; j < left; j++) {
				if(this.tableModel[top-1] && this.tableModel[top-1][j-1] && !this.tableModel[top-1][j-1].exist){
				plusx--;
			}
		}

		
		var currentPanel = this.findPanel(top, left);
		if(currentPanel!=null ){
			
		//	var td = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr:nth-child("+ currentPanel.unsavedPosition.top + ") > td:nth-child(" +(currentPanel.unsavedPosition.left)+ ")")[0];
			if(this.tableModel[currentPanel.unsavedPosition.top-1] && this.tableModel[currentPanel.unsavedPosition.top-1][currentPanel.unsavedPosition.left-1] && !this.tableModel[currentPanel.unsavedPosition.top-1][currentPanel.unsavedPosition.left-1].empty){
				plusx-= (left - currentPanel.unsavedPosition.left);
			}
			
		}
		return plusx;
	},
	
	findPanel : function(top, left, saved){
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p]==this.movedPanel || this.panels[p].hidden){
				continue;
			}
			var pos;
			if(saved){
				pos = this.panels[p].savedPosition; 
			}
			else {
				pos = this.panels[p].unsavedPosition;
			}
			if(pos.left<=left && pos.left+pos.width-1>=left &&
				pos.top<=top && pos.top+pos.height-1>=top){
				return this.panels[p];
			}
		}
		return null;
	},
	hasContent: function(top, left, width, height){
		for(var i=0; i<height; i++){
			for(var j=0; j<width; j++){
				if(this.findPanel(top+i, left+j)!=undefined){
					return true;
				}
			}
		}
		return false;
	},
	hasSavedContent: function(top, left, width, height){
		for(var i=0; i<height; i++){
			for(var j=0; j<width; j++){
				if(this.findPanel(top+i, left+j, true)!=undefined){
					return true;
				}
			}
		}
		return false;
	},
	findPanelByPos: function(top,left){
	
		for(var p=0; p< this.panels.length; p++){
			if(!this.panels[p].hidden && this.panels[p].unsavedPosition.top == top && (this.panels[p].unsavedPosition.left <= left && this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1>=left)){
				return this.panels[p];
			}
		}
	},
	saveAllPanelPosition : function(){
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			this.panels[p].savedPosition = this.panels[p].unsavedPosition;
		}
	},
	

	deletePanel: function(id){
		
		for(var i=0; i<this.panels.length; i++){
			if(this.panels[i].controller.model.get('portletId') == id){
				Ext.Array.erase(this.panels, i, 1);
			}
		}

		this.moveAllPanelToTop();
		this.refreshBoard();
		
	},
	
	removeUnusedRows: function(){
		var table = Ext.query("div#mainPanel"+this.id+" table:nth(1)")[0];
		var rows = Ext.query("div#mainPanel"+this.id+" table:nth(1) > tbody > tr");
		var deletedNumber = 0;
		this.rows = this.getMaxRow();
		for(var i=this.rows; i<rows.length-1; i++){
			
			table.deleteRow(this.rows);
			this.panel.setHeight(this.panel.getHeight()-this.defaultHeight);
			
			deletedNumber++;
		}
		this.panel.minHeight =(this.rows+1)*this.defaultHeight;

	},
	
	getMaxRow: function(){
		var max = 1;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			if(this.panels[p].savedPosition.top+this.panels[p].savedPosition.height>max){
				max = this.panels[p].savedPosition.top+this.panels[p].savedPosition.height;
			}
		}
		return max;
	},
	isInCurrentCell : function(top, left){
		try{
			var pos = this.currentCellPosition;
			if(pos.left<=left && pos.left+pos.width-1>=left &&
					pos.top<=top && pos.top+pos.height-1>=top){
					return true;
				}
			}catch(e){
				return false;
			}
			return false;
	},
	copyCellContent: function(top, left, newTop, newLeft){
		/**
		 * Ezt a panelt akarjuk alrébb tenni
		 */
		var panel = undefined;
		var panelIndex = 0;
		for(var p=0; p< this.panels.length; p++){

			if(!this.panels[p].hidden && this.panels[p].unsavedPosition.left == left && this.panels[p].unsavedPosition.top == top){
				panel = this.panels[p];
				panelIndex = p;
				break;
			}
		}
		if(panel==undefined){
			return;
		}

		this.panels[panelIndex].unsavedPosition.top= newTop;
		this.panels[panelIndex].unsavedPosition.left= newLeft;

	},
	
	/**
	 * Csak ellenőrzés, nem törlünk semmit sehonnan
	 * @param index
	 */
	checkColumn: function(index){
		for(var i = 0; i<this.rows; i++){
			var p = this.findPanel(i, index, false);
			if(p!=undefined && p!=null){
				//itt kezdődik és csak ebben az oszlopban van
				if(p.unsavedPosition.left==index && p.unsavedPosition.width==1){
					return lang.dashboardedit.hasContent;	
				}
			}
		}
	},
	
	deleteColumn: function(index, force){
		/**
		 * végigmegyünk az oszlopon, megkeressük minden poziciójára hogy ki van benne (findPanel)
		 * a megtalált panelokat 3 esetre bontjuk:
		 * 1) belóg de nem itt kezdődik: a panel méretét csökkentjük az oszlop szélességével, vagyis az eddigi colspan-t eggyel csökkentjük
		 * 2) itt kezdődik és továbblóg valahova: a panel méretét csökkentjük, áthelyezzük a jobb oldali oszlopba, amit eddig si elfoglalt
		 * 3) a panel itt kezdődik és nem is lóg ki innen
		 */
		
		for(var i = 0; i<this.rows; i++){
			var p = this.findPanel(i, index, false);
			if(p!=undefined && p!=null){
				//belóg, de nem itt kezdődik
				if(p.unsavedPosition.left<index){
					p.unsavedPosition.width --; 
				}
				if(p.unsavedPosition.left==index && p.unsavedPosition.width>=2){
					p.unsavedPosition.width --; 
					p.unsavedPosition.left ++; 
				}
				if(p.unsavedPosition.left==index && p.unsavedPosition.width==1){
					if(force){
					//	p.destroy();
						for(var p2 in this.panels){
							if(this.panels[p2].hidden){
								continue;
							}
							if( this.panels[p2].savedPosition.top == p.savedPosition.top && (this.panels[p2].savedPosition.left <= p.savedPosition.left && this.panels[p2].savedPosition.left+this.panels[p2].savedPosition.width-1>=p.savedPosition.left)){
								this.dashboard.deletePortlet(this.panels[p2].controller.model.get('portletId'), true);
								Ext.Array.erase(this.panels,p2, 1);
								
							}
						}
					}					
				}
			}
		}
		
		for(var i in this.panels){
			if(this.panels[i].hidden){
				continue;
			}
			if(this.panels[i].unsavedPosition.left>index){
				this.panels[i].unsavedPosition.left--;
			}
			this.panels[i].savedPosition = this.panels[i].unsavedPosition;
			this.removeUnusedRows();
		}
	},
	
	insertColumn : function(index){
		for(var i in this.panels){
			if(this.panels[i].hidden){
				continue;
			}
			if(this.panels[i].savedPosition.left>=index){
				this.panels[i].savedPosition.left++;
			}
			this.panels[i].unsavedPosition = this.panels[i].savedPosition;
			
		}
	},
	fillDummyPanels: function(){
		this.dummyPanels=[];
		for(var p =0; p<this.realPanels.length; p++){
			if(this.realPanels[p]!=this.movedPanel && !this.realPanels[p].hidden){
				this.dummyPanels.push(this.realPanels[p].cloneConfig({
					html : "",
					realPanelId : p,
					items:[],
					cls: "dummyPanel",
					savedPosition: this.realPanels[p].savedPosition,
					unsavedPosition: this.realPanels[p].unsavedPosition,
					title: this.realPanels[p].title,
					width:  this.realPanels[p].width,
					height:  this.realPanels[p].height
				}));
			}
		}
		
		this.panels = this.dummyPanels;
	},
	
	refreshRealPanelsByDummy: function(){
		for(var p =0; p<this.dummyPanels.length; p++){
			this.realPanels[this.dummyPanels[p].realPanelId].savedPosition = this.dummyPanels[p].savedPosition;
			this.realPanels[this.dummyPanels[p].realPanelId].unsavedPosition = this.dummyPanels[p].unsavedPosition;
		}
		this.panels = this.realPanels;
	},
	copyDownCellContent: function(top2, left, plustop){
		
		/**
		 * Ezt a panelt akarjuk alrébb tenni
		 */
		var panelIndex = 0;
		var panel = undefined;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			if((this.panels[p].unsavedPosition.left<= left && left <=this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1) 
					&& this.panels[p].unsavedPosition.top == top2 && this.panels[p]!=this.movedPanel){
				panel = this.panels[p];
				panelIndex = p;
				break;
			}
		}
		if(panel==undefined){
			while(panel==undefined && top2>1){
				top2--;
				plustop++;
				for(var p=0; p<this.panels.length; p++){
					if(this.panels[p].hidden){
						continue;
					}
					if((this.panels[p].unsavedPosition.left<= left && left <=this.panels[p].unsavedPosition.left+this.panels[p].unsavedPosition.width-1) && this.panels[p].unsavedPosition.top == top2 && this.panels[p]!=this.movedPanel){
						panel = this.panels[p];
						panelIndex = p;
						break;
					}
				}
			}			
		}
		if(panel==undefined || panel==this.movedPanel){
			return;
		}
	
		/**
		 * Ellenőrzni kell hogy befér-e és ha nem akkor rekurzívan alrébb tesszük azt amelyik miatt nem fér be
		 * csak a közvetlenül felettünk lévőt elenőrizzük
		 */
		
		var panels = this.getBottomerPanels(panel.unsavedPosition.top, panel.unsavedPosition.left, panel.unsavedPosition.width);
		
		for(var p=0; p< panels.length; p++){
			this.copyDownCellContent(panels[p].unsavedPosition.top,panels[p].unsavedPosition.left,plustop);
		}				
		

		this.panels[panelIndex].unsavedPosition.top = top2+plustop;
		

	},
	
	hideAllcontent : function(){
		this.hidden = true;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			this.panels[p].body.hide();
		}
	},
	showAllcontent : function(){
		this.hidden = false;
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			this.panels[p].body.show();
		}
	},
	
	
	getBottomerPanels: function(top, left, width){

		var panels2 = [];
		for(var p=0; p< this.panels.length; p++){
			if(this.panels[p].hidden){
				continue;
			}
			var felt0 = this.panels[p].unsavedPosition.top >top;
			var felt1 = this.panels[p].unsavedPosition.left >=left && this.panels[p].unsavedPosition.left<=left+width-1;
			var felt2 = this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1 >=left && this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1<=left+width-1;
			var felt3 = this.panels[p].unsavedPosition.left <= left && this.panels[p].unsavedPosition.left + this.panels[p].unsavedPosition.width-1>=left+width-1;
			var felt4 = this.panels[p] == this.movedPanel;
			if(felt0 && (felt1 || felt2 || felt3) && !felt4){
				
				panels2.push(this.panels[p]);
			}
		}
		
		var firstindex = undefined;
		for(var p=0; p< panels2.length; p++){
			if(firstindex == undefined || panels2[p].unsavedPosition.top<firstindex){
				firstindex = panels2[p].unsavedPosition.top;
			}
		}
		var panels3 = [];
		for(var p=0; p< panels2.length; p++){
			if( panels2[p].unsavedPosition.top==firstindex){
				panels3.push(panels2[p]);
			}
		}
		
		return panels3;
	},
	getColspan: function(col, width){
		
		width += this.defaultPadding;
		var availableWidth = 0;
		var index = col-1;
		colspan = 0;
		while (availableWidth<width && index < this.cols.length){
			if(width-availableWidth >= availableWidth + parseInt(this.cols[index].width) -width){
				availableWidth += parseInt(this.cols[index].width);
				index++;
				colspan++;
			}else break;
		}
		if(colspan<=0){
			colspan=1;
		}
		return colspan;
	},
	resizePanel: function(oldpos, newpos, panel){
		panel.savedPosition=panel.unsavedPosition;
		
		/**
		 * a saját panelunkat tartalmazó cella colspanját, rowspanját kell módosítani
		 * előtte meg kell keresni azokat a panelokat akik belelógnának az új méret szerinti panelbe
		 */
		for(var i=1; i<=newpos.width; i++){
			for (var j=1; j<=newpos.height; j++){
				p = this.findPanel(oldpos.top+j-1,oldpos.left+i-1);
				if(p!=null && !(p.unsavedPosition.top==panel.unsavedPosition.top &&  p.unsavedPosition.left==panel.unsavedPosition.left))
				this.copyDownCellContent(p.unsavedPosition.top, p.unsavedPosition.left, p.unsavedPosition.height);
			}
		}

		panel.el.dom.style.left = 0;
		panel.el.dom.style.top = 0;
		panel.unsavedPosition = newpos;
		this.moveAllPanelToTop();
		this.saveAllPanelPosition();
		this.removeUnusedRows();
		this.refreshBoard();
		
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.dataView.IconBrowser', {
    extend: 'Ext.view.View',
    alias: 'widget.iconbrowser',
    
    uses: 'Ext.data.Store',
    
	singleSelect: true,
    overItemCls: 'x-view-over',
    itemSelector: 'div.thumb-wrap',
    
    dataUrl : "",
    
   constructor: function(){
	   this.tpl = [
	               '<tpl for=".">',
	                   '<div class="thumb-wrap">',
	                       '<div class="thumb">',
	                       (!Ext.isIE6? '<img src="resource/dashboard-layout/image/portletInsert/{category}.png" width:"74" height:"74"/>' : 
	                       '<div style="width:74px;height:74px;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'resource/dashboard-layout/image/portletInsert/{category}.png\')"></div>'),
	                       '</div>',
	                       '<span>{name}</span>',
	                   '</div>',
	               '</tpl>'
	       	    ];
	   this.callParent(arguments);
   },
    
    initComponent: function(config) {
    	Ext.apply(this, config);
    
    	
    	
    	this.store = Ext.create('Ext.data.Store', {
            autoLoad: true,
            fields: ['id','name', 'description', 'category', 'portlet', 'preferedWidth', 'preferedHeight'],
            proxy: {
                type: 'ajax',
                url : this.dataUrl,
                reader: {
                    type: 'json',
                    root: '',
		            getResponseData: function( response ){
		            	var list;
		            	 
		                try {
		                	list = Ext.decode(response.responseText);
		                    list.push({
		                    	'id':'dashboardSettings',
		                    	'name':'Dashboard settings', 
		                    	'description':'All parameters of the dashboard', 
		                    	'category':'settings', 
		                    	'preferedWidth':'200', 
		                    	'preferedHeight':'200'
		                    });
		                   
		                    return this.readRecords(list);
		                 } catch (ex) {
		                     error = new Ext.data.ResultSet({
		                         total  : 0,
		                         count  : 0,
		                         records: [],
		                         success: false,
		                         message: ex.message
		                     });

		                     this.fireEvent('exception', this, response, error);

		                     Ext.Logger.warn('Unable to parse the JSON returned by the server');

		                     return error;
		                 }
		            	 
		             }
                }
            }
        });
        
        this.callParent(arguments);
        this.store.sort();
    }
});

// @tag dashboard-layout
/**
 * @class Ext.chooser.InfoPanel
 * @extends Ext.panel.Panel
 * @author Ed Spencer
 * 
 * This panel subclass just displays information about an image. We have a simple template set via the tpl property,
 * and a single function (loadRecord) which updates the contents with information about another image.
 */
Ext.define('NV.dashboard.layout.dashboard.panels.dataView.InfoPanel', {
    extend: 'Ext.panel.Panel',
    alias : 'widget.infopanel',
    id: 'img-detail-panel',

    width: 250,
    minWidth: 250,

    
    constructor: function(){
    	this.tpl = [
    	                 '<div class="details">',
    	                 '<tpl for=".">',
    	                         (!Ext.isIE6? '<img src="resource/dashboard-layout/image/portletInsert/{category}.png" width:"74" height:"74"/>' : 
    	                         '<div style="width:74px;height:74px;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\'resource/dashboard-layout/image/portletInsert/{category}.png\')"></div>'),
    	                     '<div class="details-info">',
    	                     	'<b>'+lang.insertPortlet.name+': </b>',
    	                         '<span>{name}</span><br>',
    	                         '<b>'+lang.insertPortlet.description+': </b>',
    	                         '<span>{description}</span><br>',
    	                         '<b>'+lang.insertPortlet.category+': </b>',
    	                         '<span>{category}</span><br>',
    	                         '<b>'+lang.insertPortlet.preferedSize+': </b>',
    	                         '<span>{preferedWidth} x {preferedHeight} </span>',
    	                     '</div>',
    	                 '</tpl>',
    	             '</div>',
    	             {
    	                 // XTemplate configuration:
    	                 compiled: true,
    	                 // member functions:
    	                 getLocalizedCategory: function(category){
    	                    return lang.insertPortlet[category];
    	                 }
    	             }
    	         ];
    	 this.callParent(arguments);
    },
    afterRender: function(){
        this.callParent();
        if (!Ext.isWebKit) {
            this.el.on('click', function(){
                alert('The Sencha Touch examples are intended to work on WebKit browsers. They may not display correctly in other browsers.');
            }, this, {delegate: 'a'});
        }    
    },

    /**
     * Loads a given image record into the panel. Animates the newly-updated panel in from the left over 250ms.
     */
    loadRecord: function(image) {
        this.body.hide();
        this.tpl.overwrite(this.body, image.data);
        this.body.slideIn('l', {
            duration: 250
        });
    },
    
    clear: function(){
        this.body.update('');
    }
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.InsertPortletPanel', {
	/**
	 * @class Ext.chooser.Window
	 * @extends Ext.window.Window
	 * @author Ed Spencer
	 * 
	 * This is a simple subclass of the built-in Ext.window.Window class. Although it weighs in at 100+ lines, most of this
	 * is just configuration. This Window class uses a border layout and creates a DataView in the central region and an
	 * information panel in the east. It also sets up a toolbar to enable sorting and filtering of the items in the 
	 * DataView. We add a few simple methods to the class at the bottom, see the comments inline for details.
	 */

	    extend: 'Ext.window.Window',
	    uses: [
	        'Ext.layout.container.Border',
	        'Ext.form.field.Text',
	        'Ext.form.field.ComboBox',
	        'Ext.toolbar.TextItem',
	        'Ext.layout.container.Fit'
	    ],
	    requires:[
	              'NV.dashboard.layout.dashboard.panels.dataView.IconBrowser',
	              'NV.dashboard.layout.dashboard.panels.dataView.InfoPanel'
	              ],
	    
	    height: 400,
	    width : 670,
	   
	    closeAction: 'hide',
	    buttonAlign: 'center',
	    layout: 'border',
	    modal: true,
	    border: false,
	    bodyBorder: false,
	    dataUrl: "",
	   
	    
	    /**
	     * initComponent is a great place to put any code that needs to be run when a new instance of a component is
	     * created. Here we just specify the items that will go into our Window, plus the Buttons that we want to appear
	     * at the bottom. Finally we call the superclass initComponent.
	     */
	    initComponent: function(config) {
	    	this.title = lang.insertPortlet.insertPortlet;
	    	Ext.apply(this, config);
	        this.items = [
	            {
	                xtype: 'panel',
	                region: 'center',
	                layout: 'fit',
	                items: {
	                    xtype: 'iconbrowser',
	                    dataUrl: this.dataUrl,
	                    autoScroll: true,
	                    id: 'img-chooser-view',
	                    listeners: {
	                        scope: this,
	                        selectionchange: this.onIconSelect,
	                        itemdblclick: this.fireImageSelected
	                    }
	                },
	                
	                tbar: [
	                    {
	                        xtype: 'textfield',
	                        name : 'filter',
	                        fieldLabel: lang.insertPortlet.filter,
	                        labelAlign: 'right',
	                        labelWidth: 35,
	                        listeners: {
	                            scope : this,
	                            buffer: 50,
	                            change: this.filter
	                        }
	                    },
	                    ' ',
	                    {
	                        xtype: 'combo',
	                        fieldLabel: lang.insertPortlet.sortBy,
	                        labelAlign: 'right',
	                        labelWidth: 45,
	                        valueField: 'field',
	                        displayField: 'label',
	                        value: lang.insertPortlet.name,
	                        editable: false,
	                        store: Ext.create('Ext.data.Store', {
	                            fields: ['field', 'label'],
	                            sorters: 'name',
	                            proxy : {
	                                type: 'memory',
	                                data  : [{label: lang.insertPortlet.name, field: 'name'}, {label: lang.insertPortlet.category, field: 'category'}]
	                            }
	                        }),
	                        listeners: {
	                            scope : this,
	                            select: this.sort
	                        }
	                    }
	                ]
	            },
	            {
	                xtype: 'infopanel',
	                region: 'east',
	                split: true
	            }
	        ];
	        
	        this.buttons = [
	            {
	                text: lang.ok,
	                scope: this,
	                handler: this.fireImageSelected
	            },
	            {
	                text: lang.cancel,
	                scope: this,
	                handler: function() {
	                    this.hide();
	                }
	            }
	        ];
	        
	        this.callParent(arguments);
	        
	        /**
	         * Specifies a new event that this component will fire when the user selects an item. The event is fired by the
	         * fireImageSelected function below. Other components can listen to this event and take action when it is fired
	         */
	        this.addEvents(
	            /**
	             * @event selected
	             * Fired whenever the user selects an image by double clicked it or clicking the window's OK button
	             * @param {Ext.data.Model} image The image that was selected
	             */
	            'selected'
	        );
	    },
	    
	    /**
	     * @private
	     * Called whenever the user types in the Filter textfield. Filters the DataView's store
	     */
	    filter: function(field, newValue) {
	        var store = this.down('iconbrowser').store,
	            view = this.down('dataview'),
	            selModel = view.getSelectionModel(),
	            selection = selModel.getSelection()[0];
	        
	        store.suspendEvents();
	        store.clearFilter();
	        store.filter({
	            property: 'name',
	            anyMatch: true,
	            value   : newValue
	        });
	        store.resumeEvents();
	        if (selection && store.indexOf(selection) === -1) {
	            selModel.clearSelections();
	            this.down('infopanel').clear();
	        }
	        view.refresh();
	        
	    },
	    
	    /**
	     * @private
	     * Called whenever the user changes the sort field using the top toolbar's combobox
	     */
	    sort: function() {
	        var field = this.down('combobox').getValue();
	        
	        this.down('dataview').store.sort(field);
	    },
	    
	    /**
	     * Called whenever the user clicks on an item in the DataView. This tells the info panel in the east region to
	     * display the details of the image that was clicked on
	     */
	    onIconSelect: function(dataview, selections) {
	        var selected = selections[0];
	        
	        if (selected) {
	            this.down('infopanel').loadRecord(selected);
	        }
	    },
	    
	    /**
	     * Fires the 'selected' event, informing other components that an image has been selected
	     */
	    fireImageSelected: function() {
	        var selectedImage = this.down('iconbrowser').selModel.getSelection()[0];
	        
	        if (selectedImage) {
	            this.fireEvent('selected', selectedImage);
	            this.hide();
	        }
	    }
	});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.ParamAssignPanel',{
	extend: 'Ext.window.Window',
	config:{
		inputParamsConfigs : {},
		outputParamsConfig :{},
		inputParamsConfigs : {},
		dashboardParams : {},
		portlet : {},
		resolvers: undefined,
		dashboard:{},
		otherPortlets:{}
	},
	fields: [],
	
	constructor: function(config){
		
		this.initConfig(config);
		this.fields = [];
		var items = [];
		var paramsAssignPanel = this;
		for(var i in this.inputParamsConfigs){
			
			var radioItems = [];
			var fieldsetChilds = [];
			
			var typeCorrectParams = Ext.Array.map(this.dashboardParams, function(item, index, array) {
				if (item.type == this)
					return item;
				else
					return null;
			}, this.inputParamsConfigs[i].type);
			typeCorrectParams = Ext.Array.clean(typeCorrectParams);
			
			
	  //  	if(typeCorrectParams.length>0){
	    	radioItems.push( { boxLabel: lang.params.dashboardParam, name: 'type'+i, inputValue: '1' });
	   // 	}
	    	
	    	var store = Ext.create('Ext.data.Store', {
	    		fields: ['name', 'label'],
	    	    data: typeCorrectParams
	    	});
			
			var dashboardParameterField = Ext.create('Ext.form.ComboBox',{
				fieldLabel: lang.params.value,
			    width:300,
			    displayField: 'label',
//			    labelWidth: 90,
			    store: store,
			    queryMode: 'local',
			    typeAhead: true
			});
			var configObject = Ext.clone(this.inputParamsConfigs[i]);
			Ext.apply(configObject, {
				dashboard: this.dashboard
			});
			
			if (configObject.type == "boolean") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.BooleanInput', configObject);
			} else if (configObject.type == "float" || configObject.type == "number") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.NumberInput', configObject);
			} else if (configObject.type == "string") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.StringInput', configObject);
			} else if (configObject.type == "date") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateInput', configObject);
			}else if (configObject.type == "datetime") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.DateTimeInput', configObject);
			}else if (configObject.type == "list") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ListInput', configObject);
			}else if (configObject.type == "enum") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput', configObject);
			}else if (configObject.type == "enumArray") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumArrayInput', configObject);
			}else if (configObject.type == "interval") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.IntervalInput', configObject);
			}else if (configObject.type == "object") {
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ObjectInput', configObject);
			}else{
				resolver = Ext.create('NV.dashboard.layout.dashboard.controllers.ComboInput', configObject);
			}
			
			if(resolver!=undefined){				
				radioItems.push( {boxLabel: lang.params.fixParam, name: 'type'+i, inputValue: '2'});
			}
			
			radioItems.push( {boxLabel: lang.params.paramFromPortlet, name: 'type'+i, inputValue: '3'});
						
			var radioGroup = Ext.create('Ext.form.RadioGroup',{
//				 labelWidth: 70,
//				 width:300,
				 fieldLabel: lang.params.type,
				 columns: 1,
				 vertical: true,
				 items: radioItems,
				 paramindex :i,
				 listeners:{
					 change: function(me, newValue, oldValue, eOpts ){
						 paramsAssignPanel.refreshFieldset(me.paramindex, newValue);
					 } 
				 }
			});

			var dashboardParameterFieldset = Ext.create('Ext.form.FieldContainer',{
				layout:'hbox',
				items:[
				       dashboardParameterField,
				       {
		                    xtype: 'button',
		                    text : "+",
		                    handler: function(button, e) {
		                        this.assignPanel.showNewDashboardParameter(this.index);
		                    },
		                    scope:{
		                    	assignPanel: this,
		                    	index: i
		                    }
		                }
				   ]
			});
			
			
			//kiválasztott portlet megfelelő paraméterei
			var store = Ext.create('Ext.data.Store', {
	    		fields: ['name', 'label'],
	    	    data: []
	    	});
			
			var otherPortletValuesField = Ext.create('Ext.form.ComboBox',{
				fieldLabel: lang.params.value,
			    width:300,
			    displayField: 'label',
//			    labelWidth: 90,
			    store: store,
			    queryMode: 'local',
			    typeAhead: true
			});
			
			
			//összes többi portlet felsorolása egy comboboxban
			var store = Ext.create('Ext.data.Store', {
	    		fields: ['name', 'label', 'type'],
	    	    data: this.otherPortlets
	    	});
			
			var otherPortletsField = Ext.create('Ext.form.ComboBox',{
				fieldLabel: lang.params.portlet,
			    width:300,
			    displayField: 'label',
			    store: store,
			    queryMode: 'local',
			    typeAhead: true,
			    listeners:{
			    	select: function(combo, records, eOpts){
			    		this.paramAssignPanel.dashboard.getPortletOutputs(records[0].get('name'), this.type, function(data, scope){
			    			scope.valuesField.getStore().removeAll();
			    			scope.valuesField.getStore().loadData(data);
			    		}, this);
			    		
			    	},
			    	scope: {
			    		paramAssignPanel: this, 
			    		valuesField: otherPortletValuesField,
			    		type: this.inputParamsConfigs[i].type
			    		}
			    }
			});

			fieldsetChilds.push(radioGroup);
			fieldsetChilds.push(dashboardParameterFieldset);
			if(resolver)fieldsetChilds.push(resolver.getController());
			fieldsetChilds.push(otherPortletsField);
			fieldsetChilds.push(otherPortletValuesField);
			
			this.fields[i] = {};
			this.fields[i].paramConfig = this.inputParamsConfigs[i];
			this.fields[i].paramName = this.inputParamsConfigs[i].name;
			this.fields[i].radioGroup = radioGroup;
			this.fields[i].dashboardParameterField = dashboardParameterField;
			this.fields[i].dashboardParameterFieldset = dashboardParameterFieldset;
			this.fields[i].otherPortletsField = otherPortletsField;
			this.fields[i].otherPortletValuesField = otherPortletValuesField;
			this.fields[i].resolver = resolver;
			
			var fieldSet = Ext.create('Ext.form.FieldSet',{
				title:this.inputParamsConfigs[i].label?this.inputParamsConfigs[i].label:this.inputParamsConfigs[i].name,
				checkboxToggle: false,
			    collapsed: false, // fieldset initially collapsed
			    items:fieldsetChilds,
			    padding:5
				
			});
			items.push(fieldSet);
		}
		
		this.callParent([{
			title: lang.params.params,
    		buttonAlign: 'center',
    		items:items,
    		width:400,
    		padding:5,
    		buttons:[{ 
    			text: lang.params.save, 
    			handler: function() {
    				paramsAssignPanel.save();
    				paramsAssignPanel.hide();
    				paramsAssignPanel.destroy();
    			} 
    		},
    		{
    			text: lang.params.cancel, 
    			handler:function(){
    				paramsAssignPanel.hide();
    				paramsAssignPanel.destroy();
    			}
    		}
    		]
		}]);
		
		this.fillValues();
	},
	
	refreshDashboardParameterCombos: function(){
		for(var i=0; i<this.fields.length; i++){
			var typeCorrectParams = Ext.Array.map(this.dashboardParams, function(item, index, array) {
				if (item.type == this)
					return item;
				else
					return null;
			}, this.fields[i].paramConfig.type);
			typeCorrectParams = Ext.Array.clean(typeCorrectParams);
				    	
	    	var store = Ext.create('Ext.data.Store', {
	    		fields: ['name', 'label'],
	    	    data: typeCorrectParams
	    	});
			this.fields[i].dashboardParameterField.store = store;
		}
	},
	
	showNewDashboardParameter: function(index) {
		var newParamWindow = Ext.create('NV.dashboard.layout.dashboard.panels.DashboardParameterPopup',{
			paramAssingPanel:this,
			type:this.inputParamsConfigs[index].type,
			name:this.inputParamsConfigs[index].name,
			label:this.inputParamsConfigs[index].label,
			index: index
		});
		newParamWindow.show();
	},
	
	createNewDashboardParameter: function(config, index){
		var pmodel = config;
		this.dashboard.createNewParameter(pmodel);
		this.dashboardParams = this.dashboard.model.get("parameters");
		this.refreshDashboardParameterCombos();
		this.fields[index].dashboardParameterField.setValue(this.fields[index].dashboardParameterField.getStore().findRecord('name',config.name));
	},
	
	save: function(originalParamsConfigObject){
		for(var i=0; i<this.fields.length; i++){
			/**
			 * 1) DASHBOARD PARAMÉTEREN VAN:
			 * a portlet resolvereiben meg kell keresni ezt a mezőt és be kell állítani a source, target cuccot, default Value null-al
			 * 2) fix paraméter van:
			 * a portlet resolvereiben meg kell keresni ezt a mezőt és be kell állítani a defaultValue-t null-ra
			 */
			
			if(this.fields[i].radioGroup.getValue()["type"+i] != 2 && this.fields[i].radioGroup.getValue()["type"+i] != 1 && this.fields[i].radioGroup.getValue()["type"+i] != 3){
				continue;
			}
			
			var parameterName = this.fields[i].paramName;
			var myResolver = null;
			for(var j=0; j<this.resolvers.length; j++){
				if(this.resolvers[j].targetName == parameterName && this.resolvers[j].targetName != null){
					myResolver = this.resolvers[j];
					break;
				}
			}
			
			if(myResolver==null){
				myResolver = {
						targetName:parameterName,
						defaultValue: undefined,
						sources: []
					};
				this.resolvers.push(myResolver);
			}
			
			if(myResolver!=null){
				if(this.fields[i].radioGroup.getValue()["type"+i] == 2){//fix param
					myResolver.defaultValue = this.fields[i].resolver.getValue();
					myResolver.sources = [];
				}else if(this.fields[i].radioGroup.getValue()["type"+i] == 1){//dashboard param
					myResolver.defaultValue= undefined,
					myResolver.sources = [{
						sourceContainer: undefined,
					    sourceName: this.fields[i].dashboardParameterField.findRecordByDisplay(this.fields[i].dashboardParameterField.getValue()).data.name  
					    }];
				}else if(this.fields[i].radioGroup.getValue()["type"+i] == 3){//other portlet param
					myResolver.defaultValue= undefined,
					myResolver.sources = [{
						sourceContainer: this.fields[i].otherPortletsField.findRecordByDisplay( this.fields[i].otherPortletsField.getValue()).data.name,
					    sourceName: this.fields[i].otherPortletValuesField.findRecordByDisplay(this.fields[i].otherPortletValuesField.getValue()).data.name  
					    }];
				}
			}
			
		}
		
		this.portlet.refreshAfterParamsChanged();
	},
	
	getDefaultValueByResolver: function(parameterName){
		for(var i=0; i<this.resolvers.length; i++){
			if(this.resolvers[i].targetName == parameterName && this.resolvers[i].targetName != null){
				return (this.resolvers[i].defaultValue);
			}
		}
		
		return null;
	},
	
	getDashboardParameterNameByResolver: function(parameterName){
		for(var i=0; i<this.resolvers.length; i++){
			if(this.resolvers[i].targetName == parameterName && this.resolvers[i].sources != null){
				var sources = this.resolvers[i].sources;
				for(var j=0; j<sources.length; j++){
					if(sources[j].sourceContainer==null){
						return sources[j].sourceName;
					}
				}
			}
		}
		
		return null;
	},
	
	//az aktuálisan szerkesztett portletben parameterName néven szerepel a paraméter, 
	//a fv visszaadja hogy a dashboard leíró json-ben milyen portlet milyen nevű output paramétere van erre ráállítva
	getOtherPortletParametersByName: function(parameterName){
		for(var i=0; i<this.resolvers.length; i++){
			if(this.resolvers[i].targetName == parameterName && this.resolvers[i].sources != null){
				var sources = this.resolvers[i].sources;
				for(var j=0; j<sources.length; j++){
					if(sources[j].sourceContainer!=null){
						return {
							name:sources[j].sourceName,
							container:sources[j].sourceContainer
						};
					}
				}
			}
		}
		
		return null;
	},
	
	fillValues: function(){
		for(var i in this.fields){
			this.fields[i].dashboardParameterFieldset.hide();
			if(this.fields[i].resolver!=undefined)this.fields[i].resolver.getController().hide();
			this.fields[i].otherPortletsField.hide();
			this.fields[i].otherPortletValuesField.hide();
			
			//meg kell határozni, hogy mik az aktuális állapotok
			//ha meg van adva hozzá resolver és abban default Value van megadva, akkor azt kell beállítani
			//ha van resolvere de nicns default valueja, akkor a source name-nek megfelelő dashboard paramétert kell bejelölni a dashboard paraméter választóban
			
			var defValue = this.getDefaultValueByResolver(this.fields[i].paramConfig.name);
			if(defValue!=null){
				this.fields[i].resolver.setValue(defValue);
				var val = {};
				val["type"+i] = '2';
				this.fields[i].radioGroup.setValue(val);
				this.fields[i].resolver.getController().show();
				continue;
			}
			
			var dashboardValue = this.getDashboardParameterNameByResolver(this.fields[i].paramConfig.name);
			if(dashboardValue!=null){
				this.fields[i].dashboardParameterField.setValue(this.fields[i].dashboardParameterField.getStore().findRecord('name',dashboardValue));
				var val = {};
				val["type"+i] = '1';
				this.fields[i].radioGroup.setValue(val);
				this.fields[i].dashboardParameterFieldset.show();
				continue;
			}
			
			var portletValue = this.getOtherPortletParametersByName(this.fields[i].paramConfig.name);
			if(portletValue!=null){
				this.fields[i].otherPortletsField.setValue(this.fields[i].otherPortletsField.getStore().findRecord('name', portletValue.container));
				var val = {};
				val["type"+i] = '3';
				this.fields[i].radioGroup.setValue(val);
				this.fields[i].otherPortletsField.show();
				
				this.dashboard.getPortletOutputs(portletValue.container, this.fields[i].paramConfig.type, function(data, scope){
					scope.field.otherPortletValuesField.getStore().removeAll();
					scope.field.otherPortletValuesField.getStore().loadData(data);
					scope.field.otherPortletValuesField.setValue(scope.field.otherPortletValuesField.getStore().findRecord('name', scope.value, 0, false, true, true));
	    		}, {
	    			field: this.fields[i], 
	    			value:portletValue.name
	    			}
	    		);
				
				continue;
			}
			
			
		}
	},
	
	refreshFieldset: function(index, value){
		this.fields[index].dashboardParameterFieldset.hide();
		if(this.fields[index].resolver!=undefined)this.fields[index].resolver.getController().hide();
		this.fields[index].otherPortletsField.hide();
		this.fields[index].otherPortletValuesField.hide();
//		this.fields[index].newParam.hide();
		
		if(value["type"+index] == "1"){
			this.fields[index].dashboardParameterFieldset.show();
		}
		if(value["type"+index] == "2"){
			this.fields[index].resolver.getController().show();
		}
		if(value["type"+index] == "3"){
			this.fields[index].otherPortletsField.show();
			if(this.fields[index].otherPortletsField.getValue!=null && this.fields[index].otherPortletsField!=undefined){
				this.fields[index].otherPortletValuesField.show();
			}
		}
	},
	
	replaceToUrl: function(string){
		return string.replace("á","a").replace("é","e").replace("ő","o").replace("ö","o").replace("ó","o").replace("ű","u").replace("ü","u").replace("ú","u");
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.dashboard.panels.PropertyAssignPanel',{
	extend: 'Ext.window.Window',
	config:{
		properties:{},
		portletModel:{},
		fields:[],
		portlet: undefined,
		containers: undefined, 
		container: undefined
	},
	
	constructor: function(config){
		this.initConfig(config);
		var me = this;
		var items = [];
		this.fields = [];
		for(var i=0; i < this.properties.length; i++){
			var radioItems = [];
			var fieldsetChilds = [];
			
			radioItems.push({ boxLabel: lang.properties.defaultValue+" ("+this.properties[i].defaultValue+")", name: 'type'+i, inputValue: '1' });
			radioItems.push({ boxLabel: lang.properties.customValue, name: 'type'+i, inputValue: '2' });
			
			var radioGroup = Ext.create('Ext.form.RadioGroup',{
				 labelWidth: 100,
				 width:300,
				 fieldLabel: this.properties[i].label,
				 columns: 1,
				 vertical: true,
				 items: radioItems,
				 paramindex :i,
				 listeners:{
					 change: function(radiogroup, newValue, oldValue, eOpts ){
						 me.refreshFieldset(radiogroup.paramindex, newValue);
					 } 
				 }
			});
			var newParamField = {};
			if(this.properties[i].type=="bool"){
				
				var boolStore = Ext.create('Ext.data.Store', {
				    fields: ['key', 'value'],
				    data : [
				        {"key":true, "value":"true"},
				        {"key":false, "value":"false"}
				    ]
				});

				// Create the combo box, attached to the states data store
				newParamField = Ext.create('Ext.form.ComboBox', {
					fieldLabel:lang.params.value,
				    store: boolStore,
				    labelWidth:100,
				    queryMode: 'local',
				    displayField: 'value',
				    valueField: 'key'
				});
				
			}else if(this.properties[i].type=="number"){	
				newParamField = Ext.create('Ext.form.field.Number',{
					width:300,
					labelWidth:100,
					fieldLabel:lang.params.value,
					visible:false
				});
			}else{
				newParamField = Ext.create('Ext.form.field.Text',{
					width:300,
					labelWidth:100,
					fieldLabel:lang.params.value,
					visible:false
				});
			}

			
			fieldsetChilds.push(radioGroup);
			fieldsetChilds.push(newParamField);
			
			this.fields[i] = {};
			this.fields[i].rowIndex = i;
			this.fields[i].name = this.properties[i].name;
			this.fields[i].radioGroup = radioGroup;
			this.fields[i].newParam = newParamField;
			
			var fieldSet = Ext.create('Ext.form.FieldSet',{
	//			title: this.properties[i].label,
				checkboxToggle: false,
			    collapsed: false,
			    items:fieldsetChilds,
			    padding:2
	//		    border:0
				
			});
			items.push(fieldSet);
			
		}
		
		this.containerCombo = Ext.create('NV.dashboard.layout.dashboard.controllers.EnumInput',{
			label: "Visibility group",
			name:"container",
			enumValues: this.containers,
			value: this.container
		});
		
		items.push(this.containerCombo.getController());
		this.callParent([{
			title: lang.properties.properties,
    		buttonAlign: 'center',
    		items:items,
    		width:400,
    		
    		layout:{
    			type: 'vbox',
    			align: 'stretch',
    			padding: '5 5 5 5'
    		},
    		buttons:[{ 
    			text: lang.params.save, 
    			handler: function() {
    				me.save();
    				me.hide();
    				me.destroy();
    			} 
    		},
    		
    		{
    			text: lang.params.cancel, 
    			handler:function(){
    				me.hide();
    				me.destroy();
    			}
    		}]
		}]);
		
		this.fillValues();
	},
	
	save: function(){
		for(var i in this.fields){
			
			if(this.fields[i].radioGroup.getValue()["type"+i] == 2){
				this.properties[this.fields[i].rowIndex].value = this.fields[i].newParam.getValue();
				this.properties[this.fields[i].rowIndex].overrided = true;
			}else{
				this.properties[this.fields[i].rowIndex].overrided = false;
				this.properties[this.fields[i].rowIndex].value = undefined;
			}
			this.properties[this.fields[i].rowIndex].scope.handlePropertyRefresh();
		}
		this.portlet.model.set('containerId', this.containerCombo.getValue());
		
		this.portlet.refreshOverriddedProperties();
	},
	
	fillValues: function(){
		for(var i in this.fields){
			this.fields[i].newParam.hide();
			if(this.properties[this.fields[i].rowIndex].value==undefined){	//van custom value
				var val = {};
				val["type"+i] = '1';
				this.fields[i].radioGroup.setValue(val);
			}else{
				this.fields[i].newParam.show();
				this.fields[i].newParam.setValue(this.properties[this.fields[i].rowIndex].value);
				var val = {};
				val["type"+i] = '2';
				this.fields[i].radioGroup.setValue(val);
			}
		}
	},
	refreshFieldset: function(index, value){
		this.fields[index].newParam.hide();
		if(value["type"+index] == "2"){
			this.fields[index].newParam.show();
		}	
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.NVBasicModel',{
    extend: 'Ext.data.Model',
    lastObservablePortlets: undefined,
    constructor: function(config){
        this.callParent([config]);
        this.observers = [];
        this.lastObservablePortlets = [];
    },
    endEdit: function(){
    	
    	var modifiedNames = this.getChanges();
    	this.callParent(arguments); // original set functions
    	 for (var i = 0; i < this.observers.length; i++) {
    		if(this.lastObservablePortlets.length>0){
    		
    		}else{	//nincs megadva hogy kinek szól a frissítés, így mindenki rákapcsolódhat
    			if(this.observers[i].field!=undefined){	//csak egy mező frissülése érdekli az observert
             		if(Ext.Array.contains(Ext.Object.getKeys(modifiedNames), this.observers[i].field)){
             			this.observers[i].callback(this.get(this.observers[i].field), this.observers[i].scope);
             		}
             	}else{
             		this.observers[i].callback(modifiedNames, this.observers[i].scope);
             	}
    		}
    			
    		 
         }
    	 this.commit();
    },
    
    // other functions
    addObserver: function (obj, callback, scope, field) {
    	
        this.observers.push({observer:obj, callback:callback, scope:scope, field:field});    		
    	
    },
    
    removeObserver: function (observer){
    	
    	for(var i in this.observers){
    		if(this.observers[i].observer == observer){
    			Ext.Array.splice( this.observers, i, 1);
    			break;
    		}
    	}
    }    
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.DashboardModel',{
    extend: 'NV.dashboard.layout.model.NVBasicModel',
    fields: [             
             {name: 'editable',  type: 'boolean', defaultValue: true},
             {name: 'dashboardID', defaultValue: 1},
             {name: 'cols', defaultValue: [{
                                               "minWidth":"100px",
                                               "width":"100%",
                                               "type":"flex"
                                           }]},
             {name: 'row', defaultValue: {height:50}},
             {name: 'panels', defaultValue: []},
             {name: 'containers', defaultValue: {}},
             {name: 'parameters', defaultValue: []},
             {name: 'output', defaultValue: {}},
             {name: 'contentMap', defaultValue: {
            	 							"html"  :'NV.dashboard.layout.dashboard.content.HtmlContent',
            	 							"iframe":'NV.dashboard.layout.dashboard.content.IframeContent',
            	 							"report":'NV.dashboard.layout.dashboard.content.ReportContent',
            	 							"chart" :'NV.dashboard.layout.dashboard.content.ChartContent',
            	 							"graph" :'NV.dashboard.layout.dashboard.content.GraphContent',
            	 							"grid"  :'NV.dashboard.layout.dashboard.content.GridContent',
            	 							"settings"	:'NV.dashboard.layout.dashboard.content.SettingsContent',
            	 							"dashboardSettings"	:'NV.dashboard.layout.dashboard.content.DashboardSettingsContent',
            	 							"tree"	:'NV.dashboard.layout.dashboard.content.TreeContent'
            	 							//"grid2" :'NV.dashboard.layout.dashboard.content.GridContent2'
             }},
             {name: 'dashboardCommands', defaultValue: [
                    {
                    	 icon:'resource/dashboard-layout/image/save.png',
                    	 command:'savePanels'
                    }
                 ]
             },
             
            	 	
             {name: 'panelType', defaultValue: "viewport"},
             {name: 'urls', defaultValue:{}},
             {name: 'layoutClass', defaultValue: "NV.dashboard.layout.dashboard.panels.DragAndDropPanel2"}
            
         ]
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.resolver.ResolverModel',{
    extend: 'NV.dashboard.layout.model.NVBasicModel',
    fields: [
             'ownParameterName',
             'outerParameterName',
             'outerObject'
        ]
       
});

// @tag dashboard-layout
Ext.require('NV.dashboard.layout.model.resolver.ResolverModel');
Ext.define('NV.dashboard.layout.model.PropertyModel',{
    extend: 'NV.dashboard.layout.model.NVBasicModel',
    fields: [
             {name: 'name',  type: 'string'},
             {name: 'value', type: 'string', defaultValue:null, useNull:true},
             {name: 'label', type: 'string'},
             {name: 'valueType',  type: 'string'},
             {name: 'editable', type:' boolean'}
         ]

});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.content.PortletContentModel',{
    extend: 'NV.dashboard.layout.model.NVBasicModel',
    fields: [
             {name: 'content',  defaultValue: {}},
             {name: 'type',  type: 'string', defaultValue: ""},
             {name: 'refreshJobs',  defaultValue: {}},
             {name: 'output', defaultValue:{}},
             {name: 'properties', defaultValue: []},		//properties to create property window
             {name: 'editableProperties', defaultValue: [				
                 {name: 'headerVisible', label:"Header Visible"},
                 {name: 'title', label:"Title"},
                 {name: 'refreshButtonVisible', label:"Refresh Button Visible"}
            	 ]
             },
                                                     
             {name: 'overridedProperties', defaultValue: {}},	//properties from dashboard json (user defined properties) json value
             {name: 'description', defaultValue:""}
         ],
         
    validations: [
             {type: 'inclusion', field: 'type',   list: ['html', 'iframe', 'chart', 'grid']}
         ],

    /**
     * Refreshes the model output hash field. 
     * The original output is cloned, new values are applied, and the merged output is set back.
     * If the model is not in editing state, it will be opened and closed automatically.
     * 
     * @param values the new hash containing the new output values.
     */
	changeOutput : function( values )
	{
		var me = this, 
			inEdit = me.editing,
			key, newOutput;
		
		if ( values && typeof values === 'object' )
		{
			if ( ! inEdit )
			{
				me.beginEdit();
			}
			
			newOutput = Ext.clone( me.get( "output" ) );
			Ext.apply( newOutput, values );
			me.set( "output", newOutput );
			
			if ( ! inEdit )
			{
				me.endEdit();
			}
		}
	}
   
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.content.HtmlContentModel',{
    extend: 'NV.dashboard.layout.model.content.PortletContentModel',
    fields: [
             {name: 'html',  type: 'string', defaultValue: ""}
         ]
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.content.IframeContentModel',{
    extend: 'NV.dashboard.layout.model.content.PortletContentModel',
    fields: [
             {name: 'url',  type: 'string', defaultValue: ""}
         ]
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.content.ReportContentModel',{
    extend: 'Ext.data.Model',
    fields: [
             {name: 'url',  type: 'string', defaultValue: ""}
         ]
});

// @tag dashboard-layout
//Ext.define('Test.model.ComboBoxModel',{
Ext.define('NV.dashboard.layout.model.controllers.ComboBoxModel',{
    requires: ['Ext.data.Model'],
    extend: 'Ext.data.Model',
    fields: [
        {name: 'store', defaultValue: undefined},
        // key, value, (index)
        // visible, font
        {name: 'value', defaultValue: undefined},
        {name: 'disabled', type: 'boolean', defaultValue: false},
        {name: 'label', type: 'string', defaultValue: ''},
        {name: 'name', type: 'string', defaultValue: undefined},
        {name: 'id', type: 'string', defaultValue: undefined}, // must be unique
        {name: 'itemsShow', type: 'int', defaultValue: 3},
        {name: 'lineHeight', type: 'int', defaultValue: 22},
        {name: 'scrolling', type: 'boolean', defaultValue: true},
        {name: 'settings', type: 'boolean', defaultValue: false}
        // 'store', 'value', 'disabled', 'label', 'name', 'id', 'itemsShow', 'lineHeight', 'scrolling', 'settings'
    ],
    
    owners: undefined, // array of widgets (controllers) using this model
    
    constructor: function(config){
        this.owners = [];
        this.callParent([config]);
    },
    
    set: function () {
        this.callParent(arguments); // original set functions
        
        // refresh owners on set
        
        // beta:
        var o = this.countOwners();
        for (var i = 0; i < o; i++) {
            this.owners[i].refreshField(arguments);
        }
    },
        
    // other functions
    
    addOwner: function (obj) {    	
        this.owners.push(obj);
    },
    
    countOwners: function () {
        return this.owners.length;
    },
    
    getOwnerIds: function () {
        var ids = [];
        for (var i = 0; i < this.countOwners(); i++) {
            ids.push(this.owners[i].getView().getId());
        }
        return ids;
    }
    
    
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.model.portlet.PortletModel',{
    extend: 'NV.dashboard.layout.model.NVBasicModel',
    fields: [             
             {name: 'headerVisible',  type: 'boolean', defaultValue: true},
             {name: 'title',  type: 'string', defaultValue: "_"},
             {name: 'url',  type: 'string', defaultValue: undefined, useNull:true},						//every portlet has an url, that return the content parameters
             {name: 'refreshButtonVisible',  type: 'boolean', defaultValue: false},
             {name: 'settingsButtonVisible', type: 'boolean', defaultValue: false},
             {name: 'infoButtonVisible', type: 'boolean', defaultValue: false},

             {name: 'zoomButtonVisible', type: 'boolean', defaultValue: false},
             {name: 'cls', type: 'string', defaultValue: ""},
             {name: 'type', type: 'string', defaultValue: "panel"},
             {name: 'properties', defaultValue: []},		//properties to create property window
             {name: 'parameters', defaultValue: {}},		//name - value a kész értékek, minden ami rá tartozik
             {name: 'storeParameters', defaultValue: {}},		
             {name: 'output', defaultValue:{}},
             {name: 'resolvers', defaultValue: []},		//object, ami leírja az összekötéseket
             {name: 'portletId' },	
             
             {name: 'originalPortletId'},		
             {name: 'paramsDefUrl', defaultValue:""},
             
             
             {name: 'editableProperties', defaultValue: [				
                 {name: 'headerVisible', label:"Header Visible"},
                 {name: 'title', label:"Title"},
                 {name: 'refreshButtonVisible', label:"Refresh Button Visible"}
            	 ]
             },
             
             {name: 'overridedProperties', defaultValue: undefined, useNull:true},	//properties from dashboard json (user defined properties) json value
             //content descriptor
             {name: 'content', defaultValue: undefined, useNull:true},
             {name: 'contentType', defaultValue: undefined, useNull:true},
             {name: 'refreshJobs', defaultValue: undefined, useNull:true},
             
             //extjs panel/window properties
             {name: 'borderVisible',  type: 'boolean', defaultValue: true},
             {name: 'borderWidth',  type: 'int', defaultValue:1},
             {name: 'width', type: 'int', defaultValue:100},
             {name: 'height', type: 'int', defaultValue:100},
             {name: 'frame', type: 'boolean', defaultValue:true},
             {name: 'hidden', type: 'boolean', defaultValue: undefined, useNull:true},
             {name: 'closable', type: 'boolean', defaultValue:true},
             {name: 'containerId', type: "string", defautValue:""}
         ]
         
});

// @tag dashboard-layout

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.content.ChartContentView',{
	extend: 'Ext.panel.Panel'
	
	
});

// @tag dashboard-layout
/**
 * ContentView is a panel.
 */
Ext.define('NV.dashboard.layout.view.content.ChartContent',{
	
	refresh: function(){
		throw "Unimplemented method.";
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.content.GraphContentView',{
	extend: 'Ext.panel.Panel',
	
	config:{
		header:false,
		layout: 'fit',
		flex:1	
	},
	
	constructor: function(config){
//		this.initConfig(config);
		this.header = false;
		this.layout = 'fit';
		this.flex = 1;
		this.border = false;
		this.bodyBorder = false;
		this.divID = "dojograph-"+Math.floor((Math.random()*1000))+""+(Ext.Date.format(new Date(),'U'));
		
		this.html ="<div id='"+this.divID+"' style='height:100%' onContextMenu:'return false;'></div>";
		
		this.callParent(this.config);
	},
	
	getDivId : function(){
		return this.divID;
	}
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.content.HtmlContentView',{
	extend: 'Ext.panel.Panel',

	setHtml: function(html){
		this.setHtml(html);
	}
	
});

// @tag dashboard-layout
//Ext.define('Test.view.ComboBoxView',{
Ext.define('NV.dashboard.layout.view.controllers.ComboBoxView',{
    requires: ['Ext.form.field.ComboBox'],
	extend: 'Ext.form.field.ComboBox',
	
	// configs & defaults
	
	displayField: 'label',
	valueField: 'key',
	
	controller: undefined,
	fieldType: 'combo', // maybe needs to identify
    
    /* boolean */
    settings: false, // settings on right click
    
    /* integer */
    itemsShow: 3, // setting count of items to show
    /* integer */
    lineHeight: 22,
    /* boolean */
    disableSel: false,
    /* boolean */
    scrolling: true, // show scrollbar
    	
	initComponent: function()
    {
        Ext.apply(this, {
            
            queryMode: 'local', // ?
            fieldLabel : this.fieldLabel,
            displayField: this.displayField,
            valueField: this.valueField,
            name: this.name,
            id: this.id,
            grow: true,
            growToLongestValue: true,
            listConfig: {
                height: this.lineHeight * this.itemsShow,
                minHeight: 22 * 1,
                maxHeight: this.lineHeight * this.itemsShow,
                overflowY: this.showScroll()
            },
            
            listeners: {
                render: function (t) {
                    
                    this.getEl().on('contextmenu', function(e){
                        e.stopEvent();
                        if(this.settings){
                            this.getSettingsFields().showAt(e.getXY());
                        }
                    }, this)
                                        
                    // verify store
                    this.verifyStore(this.store);
                    
                    this.disableSel = this.isDisabled();
                    this.listConfig.disableSelection = this.disableSel;
                    this.listConfig.trackOver = !this.disableSel;
                   
                    this.setDisabled(false);
                    
                    if (this.disableSel) {
                        this.listConfig.cls = 'disabled-combobox';
                        this.setFieldStyle('background: #f5f5f5');
                        this.setEditable(false);
                    }
                },
                select: function (t, r, e) {
                    this.controller.setValue(this.getValue());
                },
                disable: function (t) {
                    this.setDisabled(false);
                    if(!this.disableSel){ 
                    
                        this.disableSel = true;
                        this.getPicker().getSelectionModel().setLocked(true);
                        this.getPicker().trackOver = false;
                        
                        this.getPicker().addCls('disabled-combobox');
                        this.setFieldStyle('background: #f5f5f5');
                        this.setEditable(false);
                        
                    } else {
                    
                        this.disableSel = false;
                        this.getPicker().trackOver = true;
                        this.getPicker().getSelectionModel().setLocked(false);
                        
                        this.getPicker().removeCls('disabled-combobox');
                        this.setFieldStyle('background: #ffffff');
                        this.setEditable(true);
                        
                    }
                    
                    this.getPicker().doComponentLayout();
                    this.doComponentLayout();
                }
            },
            store: this.getStore()
        });
        this.callParent();
    },
	
	// get/set
	
	/* store */
    setStore: function (s) {
        this.getStore().loadData(this.verifyStore(s));
        this.doComponentLayout();
    },
        
    /* string */
    setId: function (i) {
        this.id = i;
        this.doComponentLayout();
    },
    
    /* string */
    setName: function (n) {
        this.name = n;
        this.doComponentLayout();
    },
    
    /* integer */
    getItemsShow: function () {
        return this.itemsShow;
    },
    setItemsShow: function (newShow) {
        this.itemsShow = newShow;
        this.getPicker().setHeight(this.lineHeight * newShow);
        this.getPicker().maxHeight = this.lineHeight * newShow;
        this.doComponentLayout();
    },
    
    /* integer */
    getLineHeight: function () {
        return this.lineHeight;
    },
    setLineHeight: function (newHeight) {
        this.lineHeight = newHeight;
        this.getPicker().setHeight(newHeight * this.itemsShow);
        this.getPicker().maxHeight = newHeight *  this.itemsShow;
        this.doComponentLayout();
    },
    
    /* boolean */
    getScroll: function () {
        return this.scrolling;
    },
    setScroll: function (newScroll) {
        this.scrolling = newScroll;
        var overflowY;
        if (newScroll) overflowY = 'auto';
        else overflowY = 'hidden';
        this.getPicker().setOverflowXY( 'hidden', overflowY ) 
        this.doComponentLayout();
    },
    
    /* boolean */ 
    getIsDisabled: function () {
        return this.disableSel;
    },
    toggleDisable: function (d) {
        if (this.disableSel !== d) {
            this.setDisabled(true);
        }
    },
    
    /* boolean */
    getSettingsShow: function () {
        return this.settings;
    },
    setSettingsShow: function (newShow) {
        this.settings = newShow;
        // on/un right click TODO
    },
    
	
	// other functions
	
	showScroll: function() {
        if (this.scrolling) return 'auto';
        else return 'hidden';
    },
    
    getSettingsFields: function() {
        // on right click it shows a little form
        // these fields are on this form
        // save changes on OK button
        
        if (Ext.isEmpty(Ext.getCmp(this.id + '-settingsForm'))) {
        
            var fields = [];
            
            var id = Ext.create('Ext.form.field.Text', {
                name: 'id',
                fieldLabel: 'Field ID',
                allowBlank: false,
                margin: '5 5 2 5',
                grow: true,
                growMax: 45,
                growMin: 45,
                value: this.id
            });
            fields.push(id);
            
            var name = Ext.create('Ext.form.field.Text', {
                name: 'name',
                fieldLabel: 'Field Name',
                allowBlank: false,
                margin: '5 5 2 5',
                grow: true,
                growMax: 45,
                growMin: 45,
                value: this.name
            });
            fields.push(name);
            
            var lab = Ext.create('Ext.form.field.Text', {
                name: 'label',
                fieldLabel: 'Field Label',
                margin: '5 5 2 5',
                grow: true,
                growMax: 45,
                growMin: 45,
                value: this.fieldLabel
            });
            fields.push(lab);
            
            var itemshow = Ext.create('Ext.form.field.Number', {
                name: 'itemsShow',
                fieldLabel: 'Items to show',
                allowBlank: false,
                margin: '5 5 2 5',
                grow: true,
                growMax: 25,
                growMin: 25,
                value: this.itemsShow
            });
            fields.push(itemshow);
            
            var lineHeight = Ext.create('Ext.form.field.Number', {
                name: 'lineHeight',
                fieldLabel: 'Height of Row',
                allowBlank: false,
                margin: '0 5 2 5',
                grow: true,
                growMax: 25,
                growMin: 25,
                value: this.lineHeight
            });
            fields.push(lineHeight);
            
            var scrolling = Ext.create('Ext.form.field.Checkbox', {
                name: 'scrolling',
                fieldLabel: 'Show Scrollbar',
                margin: '0 5 2 5',
                checked: this.scrolling
            });
            fields.push(scrolling);
            
            var disable = Ext.create('Ext.form.field.Checkbox', {
                name: 'disable',
                fieldLabel: 'Disabled',
                margin: '0 5 2 5',
                checked: this.disableSel
            });
            fields.push(disable);
            
            var form = Ext.create('Ext.form.Panel', {
                id: this.id + '-settingsForm',
                items: fields,
                border: false,
                floating: true,
                defaults: {
                    columnWidth: 50
                },
                width: 165,
                buttons: [{
                    text: 'OK',
                    scope: this,
                    maxWidth: 40,
                    handler: function() {
                        
                        if (form.isValid()) {
                        
                            var data = form.getForm().getValues();
                                            
                            if (form.getForm().findField('id').isDirty()) {             
                                this.controller.setId(data.id);
                            }
                            if (form.getForm().findField('name').isDirty()) { 
                                this.controller.setName(data.name);
                            }
                            if (form.getForm().findField('label').isDirty()) { 
                                this.controller.setLabel(data.label);
                            }
                            if (form.getForm().findField('itemsShow').isDirty()) {  
                                this.controller.setItemsShow(parseInt(data.itemsShow, 10));
                            }
                            if (form.getForm().findField('lineHeight').isDirty()) { 
                                this.controller.setLineHeight(parseInt(data.lineHeight, 10));
                            }
                            if (form.getForm().findField('scrolling').isDirty()) {   
                                this.controller.setScroll((data.scrolling === 'on'));
                            }
                            if (form.getForm().findField('disable').isDirty()) {     
                                this.controller.disable((data.disable === 'on'));
                            }
                            
                            form.close();
                        }
                    }
                },{
                    text: 'Reset',
                    scope: this,
                    maxWidth: 40,
                    handler: function() {
                        form.getForm().reset();
                    }
                }]
            });
            
            return form;
        }
        return Ext.getCmp(this.id + '-settingsForm');
    },
    
    verifyStore: function (store) {
        
        var items = store.data.items;
        var empty = false;
        
        Ext.Array.each(items, function(items, index, itself) {
            if (!items.data.key && !items.data.label) {
                empty = true;
            } else if (!items.data.label){
                items.data.label = items.data.key;
            } else if (!items.data.key){
                items.data.key = items.data.label;
            }
        });
        
        if (empty) { 
            Ext.MessageBox.alert('Error', 'Error message: empty record in store.'); // TODO
            items = [];
        }
        
        return items;
    }
		
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.dashboard.DashboardPanelView',{
	extend: 'Ext.panel.Panel',
	config:{
		dashboardId: 0,
		dashboard:undefined,
		minWidth: 100,
		dragpanel : undefined
	},
	constructor: function(config){
		
		var myWidth = this.getViewportWidth();
		
		 if(myWidth<this.minWidth){
			 viewportWidth = this.minWidth;
		 }else{
			 viewportWidth = myWidth;
		 }
		 
		
		 Ext.apply(config, {
				id : 'viewport'+config.dashboardId,
				minWidth: this.minWidth,
				width: viewportWidth,
				renderTo : Ext.getBody(),
				border:false,
				bodyBorder:false,
				layout: {
				    type: 'fit'
				},
				
				flex:1
			});
		this.initConfig(config);
		this.callParent([this]);
		
	},
	
	getViewportWidth : function(){
		var myWidth = 0;
		if (typeof (window.innerWidth) == 'number') {
			//Non-IE
			myWidth = window.innerWidth;
		} else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
			//IE 6+ in 'standards compliant mode'
			myWidth = document.documentElement.clientWidth;
		} else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
			//IE 4 compatible
			myWidth = document.body.clientWidth;
		}
		return myWidth;
	}
   
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.dashboard.DashboardView',{
	extend: 'Ext.container.Viewport',
	config:{
		dashboardId: 0,
		dashboard:undefined,
		minWidth: 100,
		dragpanel : undefined
	},
	constructor: function(config){
		
		Ext.apply(config, {
				id : 'viewport'+config.dashboardId,
				renderTo:Ext.getBody(),
				border:false,
				bodyBorder: false,
				layout: {
				    type:'vbox',
				    align:'stretch',
				    pack  : 'start'
				},
				style:{
					border:5
				}

				});
		this.initConfig(config);	
		this.callParent([this]);
		this.add(this.dragpanel);
		
	},
	
	getViewportWidth : function(){
		var myWidth = 0;
		if (typeof (window.innerWidth) == 'number') {
			//Non-IE
			myWidth = window.innerWidth;
		} else if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {
			//IE 6+ in 'standards compliant mode'
			myWidth = document.documentElement.clientWidth;
		} else if (document.body && (document.body.clientWidth || document.body.clientHeight)) {
			//IE 4 compatible
			myWidth = document.body.clientWidth;
		}
		return myWidth;
	}
   
});

// @tag dashboard-layout
/**
 * Portlet view is an interface, ha has a portlet content
 */
Ext.define('NV.dashboard.layout.view.portlet.PortletView',{
	config:{
		controller:undefined

	},
	constructor:function(config){
		this.initConfig(config);
	},
	
	setContent: function(content){
		throw "Unimplemented method.";
	},
	removeContent: function(){
		throw "Unimplemented method.";
	},
/*	setTitle: function(title){
		throw "Unimplemented method.";
	},*/
	getContent: function(){
		return this.content;
	},
/*	setWidth: function(width){
		throw "Unimplemented method.";
	},
	setHeight: function(){
		throw "Unimplemented method.";
	},
	
	setBorder: function(border){
		throw "Unimplemented method.";
	},
	*/
	refreshContent: function(){
		this.content.refresh();
	},
	
	/*
	 * Ha olyan extjs elemet használunk view-nak, aminek van headerje (panel és window), azoknak nem kell mégegyszer megvalóstíani ezt a fv-ét
	 */
	setHeaderVisible: function(value){
		if(this.rendered){
			try{
				if(this.header){
					this.header.setVisible(value);
				}else{
					this.header = Ext.create('Ext.panel.Header',{hidden:(!value), title: '_'});
					this.header.setVisible(value);
					
				}
				;
			/*	if(value){
					Ext.apply(this, {frame:true});
					this.setUI('default-framed');
					this.setBorder("1px");
				}else{
					Ext.apply(this, {frame:false});
					this.setUI('default');
					this.setBorder("0px");
				}
				*/
			}catch(ex){
				throw "Unimplemented method.";
			}
		}else{	//ha még nem renderelődött ki, akkor listenerrel állítjuk be rendelerés után a header elrejtést
			this.addListener('afterrender',function(){
				if(this.header){
					this.header.setVisible(this);
				}else{
					this.header = Ext.create('Ext.panel.Header',{hidden:(!value), title: '_'});
				}
				
			}, value);
		/*	if(value){
				Ext.apply(this, {frame:true});
				this.setUI('default-framed');
				this.setBorder("1px");
			}else{
				Ext.apply(this, {frame:false});
				this.setUI('default');
				this.setBorder("0px");
			}*/
		}
	},
	
	/**
	 * a) már van neki refresh buttonja, de épp nem látszik
	 * b) nincs neki refresh buttonja
	 * @param value
	 */
	setButtonVisible: function(type,value){
		var hasButton = false;
		if(this.header){
			for(var i in this.header.tools){
				if(this.header.tools[i].type==type){
					this.header.tools[i].panel = this;
					this.header.tools[i].setVisible(value);
					hasButton = true;
					break;
				}
			}		
			if(!hasButton){
				var me = this;
				try{
					this.addTool(Ext.create('Ext.panel.Tool',{
					    type:type,
					    hidden: !value,
					    tooltip: type,
					    tooltipType: "title",
					    panel:me 
					}));
				}catch(ex){
					throw "Unimplemented method.";
				}
			}
		}
	},
	
	setBordered: function(value){
		if(value){
			Ext.apply(this, {frame:true, frameHeader:false});
			this.setUI('default-framed');
		}else{
			Ext.apply(this, {frame:false});
			this.setUI('default');
		}
	},
	
	setButtonHandler: function(type,scope,handler){
		if(this.header){
			for(var i in this.header.tools){
				if(this.header.tools[i].type==type){
					this.header.tools[i].addListener('click', scope[handler], scope);
					hasButton = true;
					break;
				}
			}
			if(!hasButton){
				throw "Dont have "+type+" button!";
			}
		}
		
	},
	
	setHtml: function(html){
		if(this.rendered){
			this.body.dom.innerHTML = html;
		}else{
			this.addListener("render", function(){
				this.body.dom.innerHTML= html;
			});
		}
	}
	
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.portlet.PanelView',{
	config:{
		savedPosition: {},
		unsavedPosition: {}
	},
	mixins: {
        portletView: 'NV.dashboard.layout.view.portlet.PortletView',
        panel: 'Ext.panel.Panel'
    },
    
    constructor: function(options){
    	Ext.apply(this,options);
    	
    	this.initConfig(options);
    	
    	this.initialConfig = options;
    	this.mixins.panel.constructor.call(this, options);	
    	
    	this.addListener("afterrender", function(panel){
    		if(this.header){
    			this.header.el.on("dblclick", function(evt){
        			var w = Ext.create("Ext.window.Window", {
        				layout: 'fit',
        				height: this.height,
        				width: this.width,
        				x: this.getX(),
        				y: this.getY(),
        				title: this.title,
        				margin:'0',
        				padding:'0',
        				modal:true,
        				bodyBorder:false,
        				listeners:{
        					beforedestroy:function(component){
        						this.add(component.items.items[0]);
        					},
        					afterrender: function(component){
        						component.header.el.on("dblclick", function(evt){
        							component.animate({
        		        				easing:"linear",
        		        			    to: {
        		        			    	x:5,
        		        			    	y:5,
        		        			        width : Ext.getBody().getWidth()-10,
        		         			        height : Ext.getBody().getHeight()-10
        		        			    }
        		        			});
        						}, component);
        					},
        					scope:this
        				}
        			});
        			w.add(this.items.items[0]);
        			w.show();
        			
        			var diffX = 0;
        			var diffY = 0;
        			var ratio = this.width/this.height;
        			while(this.width+diffX<Ext.getBody().getWidth()-10 && this.height+diffY<Ext.getBody().getHeight()-10){
        				diffY++;
        				diffX += ratio;
        			}

        			var newx = (Ext.getBody().getWidth() - (this.width+diffX))/2;
        			var newy = (Ext.getBody().getHeight() - (this.height+diffY))/2;
        			
        			w.animate({
        				easing:"linear",
        			    to: {
        			    	x:newx,
        			    	y:newy,
        			        width : this.width+diffX,
         			        height : this.height+diffY
        			    }
        			});
        			
        		}, this);
    		}
    	}, this);
    },
	
	setContent: function(content){
		this.content = content;
		if(this.rendered){
			this.removeAll();
			this.add(content);
		}else{
			this.addListener("render", function(){
				this.add(content);
			}, this);
		}
	},
	removeContent: function(){
		this.remove(this.content);
		this.content = undefined;
	},
	
	innerResize: function(width, height){
		this.resizerFn(this, width, height);
		
	}
   
});

// @tag dashboard-layout
Ext.define('NV.dashboard.layout.view.portlet.WindowView',{
	
	mixins: {
        portletView: 'NV.dashboard.layout.view.portlet.PortletView',
        window: 'Ext.window.Window'
    },
    
    constructor: function(options){
    	Ext.apply(this,options);
    	
    	this.mixins.window.constructor.call(this);	
    },
	
	setContent: function(content){
		this.content = content;
		this.add(content);
	},
	removeContent: function(){
		this.remove(this.content);
		this.content = undefined;
	}
    
});

Ext.ClassManager.addNameAliasMappings({
  "GridModel": [],
  "NV.dashboard.layout.model.NVBasicModel": [],
  "NV.dashboard.layout.dashboard.controllers.StringInput": [],
  "NV.dashboard.layout.view.content.ChartContent": [],
  "NV.dashboard.layout.model.content.HtmlContentModel": [],
  "NV.dashboard.layout.dashboard.controllers.ListInput": [],
  "NV.dashboard.layout.dashboard.panels.DragAndDropPanel2": [],
  "NV.dashboard.layout.dashboard.panels.dataView.IconBrowser": [
    "widget.iconbrowser"
  ],
  "NV.dashboard.layout.dashboard.controllers.ComboBox": [],
  "NV.dashboard.layout.view.content.ChartContentView": [],
  "NV.dashboard.layout.dashboard.Portlet": [],
  "NV.dashboard.layout.view.content.GraphContentView": [],
  "NV.dashboard.layout.dashboard.content.IframeContent": [
    "portlet-content.iframe"
  ],
  "NV.dashboard.layout.dashboard.content.ChartContent": [
    "portlet-content.chart"
  ],
  "NV.dashboard.layout.dashboard.controllers.BooleanInput": [],
  "NV.dashboard.layout.dashboard.controllers.ObjectInput": [],
  "NV.dashboard.layout.dashboard.panels.InsertPortletPanel": [],
  "NV.dashboard.layout.dashboard.components.FilterForm2": [
    "BasicFilterForm2"
  ],
  "NV.dashboard.layout.dashboard.resolvers.UrlParameterResolver": [],
  "NV.dashboard.layout.dashboard.controllers.ColorInput": [],
  "NV.dashboard.layout.dashboard.controllers.ComboInput": [],
  "NV.dashboard.layout.dashboard.controllers.BaseController": [],
  "NV.dashboard.layout.dashboard.content.HtmlContent": [
    "portlet-content.grid"
  ],
  "NV.dashboard.layout.dashboard.Container": [],
  "NV.dashboard.layout.dashboard.panels.columnEditor.ColumnDialogWindow": [],
  "NV.dashboard.layout.view.portlet.PortletView": [],
  "NV.dashboard.layout.view.dashboard.DashboardView": [],
  "NV.dashboard.layout.model.content.IframeContentModel": [],
  "NV.dashboard.layout.dashboard.content.GridContent": [
    "portlet-content.grid"
  ],
  "NV.dashboard.layout.dashboard.panels.DashboardParameterPopup": [],
  "NV.dashboard.layout.dashboard.controllers.NumberInput": [],
  "NV.dashboard.layout.model.portlet.PortletModel": [],
  "NV.dashboard.layout.dashboard.content.SettingsContent": [
    "portlet-content.settings"
  ],
  "NV.dashboard.layout.model.content.PortletContentModel": [],
  "NV.dashboard.layout.dashboard.panels.dataView.InfoPanel": [
    "widget.infopanel"
  ],
  "NV.dashboard.layout.model.content.ReportContentModel": [],
  "NV.dashboard.layout.dashboard.ModelObserver": [],
  "NV.dashboard.layout.dashboard.controllers.DateTimeInput": [],
  "NV.dashboard.layout.model.PropertyModel": [],
  "NV.dashboard.layout.dashboard.components.tools.GridPagingToolbar": [],
  "NV.dashboard.layout.dashboard.components.Grid": [],
  "NV.dashboard.layout.view.controllers.ComboBoxView": [],
  "NV.dashboard.layout.dashboard.controllers.DateInput": [],
  "BaseList": [],
  "NV.dashboard.layout.dashboard.content.DashboardSettingsContent": [
    "portlet-content.dashboardsettings"
  ],
  "NV.dashboard.layout.dashboard.controllers.EnumInput": [],
  "NV.dashboard.layout.dashboard.panels.CustomLayout": [],
  "NV.dashboard.layout.dashboard.components.FilterForm": [
    "BasicFilterForm"
  ],
  "NV.dashboard.layout.dashboard.panels.DashboardColumnEditor": [],
  "NV.dashboard.layout.dashboard.controllers.EnumArrayInput": [],
  "NV.dashboard.layout.dashboard.components.EditForm": [
    "BasicEditForm"
  ],
  "NV.dashboard.layout.dashboard.Dashboard": [],
  "NV.dashboard.layout.view.dashboard.DashboardPanelView": [],
  "NV.dashboard.layout.dashboard.content.PortletContent": [],
  "NV.dashboard.layout.dashboard.components.tools.GridFilter": [],
  "NV.dashboard.layout.dashboard.panels.ParamAssignPanel": [],
  "NV.dashboard.layout.dashboard.panels.columnEditor.ColumnPanel": [],
  "NV.dashboard.layout.model.DashboardModel": [],
  "NV.dashboard.layout.view.content.HtmlContentView": [],
  "NV.dashboard.layout.dashboard.panels.PropertyAssignPanel": [],
  "NV.dashboard.layout.dashboard.panels.columnEditor.InnerColumnPanel": [],
  "NV.dashboard.layout.dashboard.controllers.ObjectArrayInput": [],
  "NV.dashboard.layout.dashboard.content.GraphContent": [
    "portlet-content.graph"
  ],
  "NV.dashboard.layout.view.portlet.PanelView": [],
  "NV.dashboard.layout.dashboard.panels.DragAndDropPanel": [],
  "NV.dashboard.layout.view.portlet.WindowView": [],
  "NV.dashboard.layout.dashboard.controllers.IntervalInput": [],
  "NV.dashboard.layout.model.controllers.ComboBoxModel": [],
  "NV.dashboard.layout.model.resolver.ResolverModel": [],
  "NV.dashboard.layout.dashboard.DashboardMain": [],
  "NV.dashboard.layout.dashboard.content.TreeContent": [
    "portlet-content.tree"
  ]
});